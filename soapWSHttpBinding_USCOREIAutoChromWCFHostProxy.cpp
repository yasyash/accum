/* soapWSHttpBinding_USCOREIAutoChromWCFHostProxy.cpp
   Generated by gSOAP 2.8.75 for liga.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapWSHttpBinding_USCOREIAutoChromWCFHostProxy.h"

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(const WSHttpBinding_USCOREIAutoChromWCFHostProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(_soap->imode, _soap->omode);
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(iomode, iomode);
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(imode, omode);
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy::~WSHttpBinding_USCOREIAutoChromWCFHostProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void WSHttpBinding_USCOREIAutoChromWCFHostProxy::WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ser", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL },
        { "arr", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL },
        { "ns5", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Configurations", NULL, NULL },
        { "ns6", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Service.AuxiliaryDevices2", NULL, NULL },
        { "ns7", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Service.AuxiliaryDevices", NULL, NULL },
        { "ns3", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Service.Processing", NULL, NULL },
        { "ns4", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.WorkPlan", NULL, NULL },
        { "ns8", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Library", NULL, NULL },
        { "ns9", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Service.Chromatographs", NULL, NULL },
        { "ns10", "http://schemas.datacontract.org/2004/07/liga.AutoChrom.Main.Entities", NULL, NULL },
        { "tempuri", "http://tempuri.org/", NULL, NULL },
        { "ns2", "http://liga.AutoChrom.WCFHost", NULL, NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy *WSHttpBinding_USCOREIAutoChromWCFHostProxy::copy()
{	WSHttpBinding_USCOREIAutoChromWCFHostProxy *dup = SOAP_NEW_UNMANAGED(WSHttpBinding_USCOREIAutoChromWCFHostProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

WSHttpBinding_USCOREIAutoChromWCFHostProxy& WSHttpBinding_USCOREIAutoChromWCFHostProxy::operator=(const WSHttpBinding_USCOREIAutoChromWCFHostProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void WSHttpBinding_USCOREIAutoChromWCFHostProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void WSHttpBinding_USCOREIAutoChromWCFHostProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	WSHttpBinding_USCOREIAutoChromWCFHostProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_noheader()
{	this->soap->header = NULL;
}

void WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	::soap_header(this->soap);
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

::SOAP_ENV__Header *WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_fault()
{	return this->soap->fault;
}

const char *WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *WSHttpBinding_USCOREIAutoChromWCFHostProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_StartAutoPlan(const char *soap_endpoint_url, const char *soap_action, _ns2__StartAutoPlan *ns2__StartAutoPlan)
{
	struct __tempuri__StartAutoPlan soap_tmp___tempuri__StartAutoPlan;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/StartAutoPlan";
	soap_tmp___tempuri__StartAutoPlan.ns2__StartAutoPlan = ns2__StartAutoPlan;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__StartAutoPlan(soap, &soap_tmp___tempuri__StartAutoPlan);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__StartAutoPlan(soap, &soap_tmp___tempuri__StartAutoPlan, "-tempuri:StartAutoPlan", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__StartAutoPlan(soap, &soap_tmp___tempuri__StartAutoPlan, "-tempuri:StartAutoPlan", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_StartAutoPlan(_ns2__StartAutoPlanResponse &ns2__StartAutoPlanResponse)
{
	ns2__StartAutoPlanResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__StartAutoPlanResponse.soap_get(soap, "ns2:StartAutoPlanResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_StartOperation(const char *soap_endpoint_url, const char *soap_action, _ns2__StartOperation *ns2__StartOperation)
{
	struct __tempuri__StartOperation soap_tmp___tempuri__StartOperation;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/StartOperation";
	soap_tmp___tempuri__StartOperation.ns2__StartOperation = ns2__StartOperation;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__StartOperation(soap, &soap_tmp___tempuri__StartOperation);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__StartOperation(soap, &soap_tmp___tempuri__StartOperation, "-tempuri:StartOperation", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__StartOperation(soap, &soap_tmp___tempuri__StartOperation, "-tempuri:StartOperation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_StartOperation(_ns2__StartOperationResponse &ns2__StartOperationResponse)
{
	ns2__StartOperationResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__StartOperationResponse.soap_get(soap, "ns2:StartOperationResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_StopAnalyzing(const char *soap_endpoint_url, const char *soap_action, _ns2__StopAnalyzing *ns2__StopAnalyzing)
{
	struct __tempuri__StopAnalyzing soap_tmp___tempuri__StopAnalyzing;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/StopAnalyzing";
	soap_tmp___tempuri__StopAnalyzing.ns2__StopAnalyzing = ns2__StopAnalyzing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__StopAnalyzing(soap, &soap_tmp___tempuri__StopAnalyzing);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__StopAnalyzing(soap, &soap_tmp___tempuri__StopAnalyzing, "-tempuri:StopAnalyzing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__StopAnalyzing(soap, &soap_tmp___tempuri__StopAnalyzing, "-tempuri:StopAnalyzing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_StopAnalyzing(_ns2__StopAnalyzingResponse &ns2__StopAnalyzingResponse)
{
	ns2__StopAnalyzingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__StopAnalyzingResponse.soap_get(soap, "ns2:StopAnalyzingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_AbortAnalyzing(const char *soap_endpoint_url, const char *soap_action, _ns2__AbortAnalyzing *ns2__AbortAnalyzing)
{
	struct __tempuri__AbortAnalyzing soap_tmp___tempuri__AbortAnalyzing;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/AbortAnalyzing";
	soap_tmp___tempuri__AbortAnalyzing.ns2__AbortAnalyzing = ns2__AbortAnalyzing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__AbortAnalyzing(soap, &soap_tmp___tempuri__AbortAnalyzing);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__AbortAnalyzing(soap, &soap_tmp___tempuri__AbortAnalyzing, "-tempuri:AbortAnalyzing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__AbortAnalyzing(soap, &soap_tmp___tempuri__AbortAnalyzing, "-tempuri:AbortAnalyzing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_AbortAnalyzing(_ns2__AbortAnalyzingResponse &ns2__AbortAnalyzingResponse)
{
	ns2__AbortAnalyzingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__AbortAnalyzingResponse.soap_get(soap, "ns2:AbortAnalyzingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetProcessingInfo(const char *soap_endpoint_url, const char *soap_action, _ns2__GetProcessingInfo *ns2__GetProcessingInfo)
{
	struct __tempuri__GetProcessingInfo soap_tmp___tempuri__GetProcessingInfo;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetProcessingInfo";
	soap_tmp___tempuri__GetProcessingInfo.ns2__GetProcessingInfo = ns2__GetProcessingInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetProcessingInfo(soap, &soap_tmp___tempuri__GetProcessingInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetProcessingInfo(soap, &soap_tmp___tempuri__GetProcessingInfo, "-tempuri:GetProcessingInfo", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetProcessingInfo(soap, &soap_tmp___tempuri__GetProcessingInfo, "-tempuri:GetProcessingInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetProcessingInfo(_ns2__GetProcessingInfoResponse &ns2__GetProcessingInfoResponse)
{
	ns2__GetProcessingInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetProcessingInfoResponse.soap_get(soap, "ns2:GetProcessingInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_SetIgnoreClearing(const char *soap_endpoint_url, const char *soap_action, _ns2__SetIgnoreClearing *ns2__SetIgnoreClearing)
{
	struct __tempuri__SetIgnoreClearing soap_tmp___tempuri__SetIgnoreClearing;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/SetIgnoreClearing";
	soap_tmp___tempuri__SetIgnoreClearing.ns2__SetIgnoreClearing = ns2__SetIgnoreClearing;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__SetIgnoreClearing(soap, &soap_tmp___tempuri__SetIgnoreClearing);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__SetIgnoreClearing(soap, &soap_tmp___tempuri__SetIgnoreClearing, "-tempuri:SetIgnoreClearing", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__SetIgnoreClearing(soap, &soap_tmp___tempuri__SetIgnoreClearing, "-tempuri:SetIgnoreClearing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_SetIgnoreClearing(_ns2__SetIgnoreClearingResponse &ns2__SetIgnoreClearingResponse)
{
	ns2__SetIgnoreClearingResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__SetIgnoreClearingResponse.soap_get(soap, "ns2:SetIgnoreClearingResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetSystemConfigurations(const char *soap_endpoint_url, const char *soap_action, _ns2__GetSystemConfigurations *ns2__GetSystemConfigurations)
{
	struct __tempuri__GetSystemConfigurations soap_tmp___tempuri__GetSystemConfigurations;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetSystemConfigurations";
	soap_tmp___tempuri__GetSystemConfigurations.ns2__GetSystemConfigurations = ns2__GetSystemConfigurations;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetSystemConfigurations(soap, &soap_tmp___tempuri__GetSystemConfigurations);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetSystemConfigurations(soap, &soap_tmp___tempuri__GetSystemConfigurations, "-tempuri:GetSystemConfigurations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetSystemConfigurations(soap, &soap_tmp___tempuri__GetSystemConfigurations, "-tempuri:GetSystemConfigurations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetSystemConfigurations(_ns2__GetSystemConfigurationsResponse &ns2__GetSystemConfigurationsResponse)
{
	ns2__GetSystemConfigurationsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetSystemConfigurationsResponse.soap_get(soap, "ns2:GetSystemConfigurationsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_SetSystemConfigurations(const char *soap_endpoint_url, const char *soap_action, _ns2__SetSystemConfigurations *ns2__SetSystemConfigurations)
{
	struct __tempuri__SetSystemConfigurations soap_tmp___tempuri__SetSystemConfigurations;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/SetSystemConfigurations";
	soap_tmp___tempuri__SetSystemConfigurations.ns2__SetSystemConfigurations = ns2__SetSystemConfigurations;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__SetSystemConfigurations(soap, &soap_tmp___tempuri__SetSystemConfigurations);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__SetSystemConfigurations(soap, &soap_tmp___tempuri__SetSystemConfigurations, "-tempuri:SetSystemConfigurations", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__SetSystemConfigurations(soap, &soap_tmp___tempuri__SetSystemConfigurations, "-tempuri:SetSystemConfigurations", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_SetSystemConfigurations(_ns2__SetSystemConfigurationsResponse &ns2__SetSystemConfigurationsResponse)
{
	ns2__SetSystemConfigurationsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__SetSystemConfigurationsResponse.soap_get(soap, "ns2:SetSystemConfigurationsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetResults(const char *soap_endpoint_url, const char *soap_action, _ns2__GetResults *ns2__GetResults)
{
	struct __tempuri__GetResults soap_tmp___tempuri__GetResults;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetResults";
	soap_tmp___tempuri__GetResults.ns2__GetResults = ns2__GetResults;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetResults(soap, &soap_tmp___tempuri__GetResults);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetResults(soap, &soap_tmp___tempuri__GetResults, "-tempuri:GetResults", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetResults(soap, &soap_tmp___tempuri__GetResults, "-tempuri:GetResults", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetResults(_ns2__GetResultsResponse &ns2__GetResultsResponse)
{
	ns2__GetResultsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetResultsResponse.soap_get(soap, "ns2:GetResultsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetLastResult(const char *soap_endpoint_url, const char *soap_action, _ns2__GetLastResult *ns2__GetLastResult)
{
	struct __tempuri__GetLastResult soap_tmp___tempuri__GetLastResult;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetLastResult";
	soap_tmp___tempuri__GetLastResult.ns2__GetLastResult = ns2__GetLastResult;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetLastResult(soap, &soap_tmp___tempuri__GetLastResult);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetLastResult(soap, &soap_tmp___tempuri__GetLastResult, "-tempuri:GetLastResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetLastResult(soap, &soap_tmp___tempuri__GetLastResult, "-tempuri:GetLastResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetLastResult(_ns2__GetLastResultResponse &ns2__GetLastResultResponse)
{
	ns2__GetLastResultResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetLastResultResponse.soap_get(soap, "ns2:GetLastResultResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetLastResultId(const char *soap_endpoint_url, const char *soap_action, _ns2__GetLastResultId *ns2__GetLastResultId)
{
	struct __tempuri__GetLastResultId soap_tmp___tempuri__GetLastResultId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetLastResultId";
	soap_tmp___tempuri__GetLastResultId.ns2__GetLastResultId = ns2__GetLastResultId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetLastResultId(soap, &soap_tmp___tempuri__GetLastResultId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetLastResultId(soap, &soap_tmp___tempuri__GetLastResultId, "-tempuri:GetLastResultId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetLastResultId(soap, &soap_tmp___tempuri__GetLastResultId, "-tempuri:GetLastResultId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetLastResultId(_ns2__GetLastResultIdResponse &ns2__GetLastResultIdResponse)
{
	ns2__GetLastResultIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetLastResultIdResponse.soap_get(soap, "ns2:GetLastResultIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetResultsSinceId(const char *soap_endpoint_url, const char *soap_action, _ns2__GetResultsSinceId *ns2__GetResultsSinceId)
{
	struct __tempuri__GetResultsSinceId soap_tmp___tempuri__GetResultsSinceId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetResultsSinceId";
	soap_tmp___tempuri__GetResultsSinceId.ns2__GetResultsSinceId = ns2__GetResultsSinceId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetResultsSinceId(soap, &soap_tmp___tempuri__GetResultsSinceId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetResultsSinceId(soap, &soap_tmp___tempuri__GetResultsSinceId, "-tempuri:GetResultsSinceId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetResultsSinceId(soap, &soap_tmp___tempuri__GetResultsSinceId, "-tempuri:GetResultsSinceId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetResultsSinceId(_ns2__GetResultsSinceIdResponse &ns2__GetResultsSinceIdResponse)
{
	ns2__GetResultsSinceIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetResultsSinceIdResponse.soap_get(soap, "ns2:GetResultsSinceIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetEvents(const char *soap_endpoint_url, const char *soap_action, _ns2__GetEvents *ns2__GetEvents)
{
	struct __tempuri__GetEvents soap_tmp___tempuri__GetEvents;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetEvents";
	soap_tmp___tempuri__GetEvents.ns2__GetEvents = ns2__GetEvents;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetEvents(soap, &soap_tmp___tempuri__GetEvents);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetEvents(soap, &soap_tmp___tempuri__GetEvents, "-tempuri:GetEvents", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetEvents(soap, &soap_tmp___tempuri__GetEvents, "-tempuri:GetEvents", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetEvents(_ns2__GetEventsResponse &ns2__GetEventsResponse)
{
	ns2__GetEventsResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetEventsResponse.soap_get(soap, "ns2:GetEventsResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetLastEventId(const char *soap_endpoint_url, const char *soap_action, _ns2__GetLastEventId *ns2__GetLastEventId)
{
	struct __tempuri__GetLastEventId soap_tmp___tempuri__GetLastEventId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetLastEventId";
	soap_tmp___tempuri__GetLastEventId.ns2__GetLastEventId = ns2__GetLastEventId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetLastEventId(soap, &soap_tmp___tempuri__GetLastEventId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetLastEventId(soap, &soap_tmp___tempuri__GetLastEventId, "-tempuri:GetLastEventId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetLastEventId(soap, &soap_tmp___tempuri__GetLastEventId, "-tempuri:GetLastEventId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetLastEventId(_ns2__GetLastEventIdResponse &ns2__GetLastEventIdResponse)
{
	ns2__GetLastEventIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetLastEventIdResponse.soap_get(soap, "ns2:GetLastEventIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::send_GetEventsSinceId(const char *soap_endpoint_url, const char *soap_action, _ns2__GetEventsSinceId *ns2__GetEventsSinceId)
{
	struct __tempuri__GetEventsSinceId soap_tmp___tempuri__GetEventsSinceId;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
        soap_endpoint = "http://192.168.1.111:7120/liga.AutoChrom";
	if (soap_action == NULL)
		soap_action = "http://liga.AutoChrom.WCFHost/IAutoChromWCFHost/GetEventsSinceId";
	soap_tmp___tempuri__GetEventsSinceId.ns2__GetEventsSinceId = ns2__GetEventsSinceId;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___tempuri__GetEventsSinceId(soap, &soap_tmp___tempuri__GetEventsSinceId);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___tempuri__GetEventsSinceId(soap, &soap_tmp___tempuri__GetEventsSinceId, "-tempuri:GetEventsSinceId", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___tempuri__GetEventsSinceId(soap, &soap_tmp___tempuri__GetEventsSinceId, "-tempuri:GetEventsSinceId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int WSHttpBinding_USCOREIAutoChromWCFHostProxy::recv_GetEventsSinceId(_ns2__GetEventsSinceIdResponse &ns2__GetEventsSinceIdResponse)
{
	ns2__GetEventsSinceIdResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns2__GetEventsSinceIdResponse.soap_get(soap, "ns2:GetEventsSinceIdResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
