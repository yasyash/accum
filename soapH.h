/* soapH.h
   Generated by gSOAP 2.8.75 for liga.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_DEFINED
#define SOAP_TYPE_xsd__unsignedByte_DEFINED

inline void soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

#define soap_xsd__unsignedByte2s soap_unsignedByte2s

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);

#define soap_s2xsd__unsignedByte soap_s2unsignedByte

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

#define soap_instantiate_xsd__unsignedByte soap_instantiate_unsignedByte


#define soap_new_xsd__unsignedByte soap_new_unsignedByte

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_xsd__unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__unsignedByte(soap, p, "xsd:unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_xsd__unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (::soap_read_unsignedByte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (::soap_read_unsignedInt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__RetryAfter is a typedef synonym of ULONG64 */

#ifndef SOAP_TYPE__wsa5__RetryAfter_DEFINED
#define SOAP_TYPE__wsa5__RetryAfter_DEFINED

#define soap_default__wsa5__RetryAfter soap_default_ULONG64


#define soap__wsa5__RetryAfter2s soap_ULONG642s


#define soap_out__wsa5__RetryAfter soap_out_ULONG64


#define soap_s2_wsa5__RetryAfter soap_s2ULONG64


#define soap_in__wsa5__RetryAfter soap_in_ULONG64


#define soap_instantiate__wsa5__RetryAfter soap_instantiate_ULONG64


#define soap_new__wsa5__RetryAfter soap_new_ULONG64

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RetryAfter(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write__wsa5__RetryAfter(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RetryAfter(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__RetryAfter(soap, p, "wsa5:RetryAfter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RetryAfter soap_get_ULONG64


#define soap_read__wsa5__RetryAfter soap_read_ULONG64


#define soap_GET__wsa5__RetryAfter soap_GET_ULONG64


#define soap_POST_recv__wsa5__RetryAfter soap_POST_recv_ULONG64

#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (::soap_read_ULONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED
#define SOAP_TYPE__wsa5__IsReferenceParameter_DEFINED

inline void soap_default__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__wsa5__IsReferenceParameter
	*a = SOAP_DEFAULT__wsa5__IsReferenceParameter;
#else
	*a = (enum _wsa5__IsReferenceParameter)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out__wsa5__IsReferenceParameter(struct soap*, const char*, int, const enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap__wsa5__IsReferenceParameter2s(struct soap*, enum _wsa5__IsReferenceParameter);
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_in__wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2_wsa5__IsReferenceParameter(struct soap*, const char*, enum _wsa5__IsReferenceParameter *);

SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_new__wsa5__IsReferenceParameter(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__IsReferenceParameter(struct soap*, const enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_write__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__IsReferenceParameter(soap, p, "wsa5:IsReferenceParameter", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum _wsa5__IsReferenceParameter * SOAP_FMAC4 soap_get__wsa5__IsReferenceParameter(struct soap*, enum _wsa5__IsReferenceParameter *, const char*, const char*);

inline int soap_read__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__wsa5__IsReferenceParameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__wsa5__IsReferenceParameter(struct soap *soap, const char *URL, enum _wsa5__IsReferenceParameter *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__wsa5__IsReferenceParameter(struct soap *soap, enum _wsa5__IsReferenceParameter *p)
{
	if (::soap_read__wsa5__IsReferenceParameter(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesType_DEFINED

inline void soap_default_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesType
	*a = SOAP_DEFAULT_wsa5__FaultCodesType;
#else
	*a = (enum wsa5__FaultCodesType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesType(struct soap*, const char*, int, const enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__FaultCodesType2s(struct soap*, enum wsa5__FaultCodesType);
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_in_wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__FaultCodesType(struct soap*, const char*, enum wsa5__FaultCodesType *);

SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_new_wsa5__FaultCodesType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesType(struct soap*, const enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_write_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesType(soap, p, "wsa5:FaultCodesType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__FaultCodesType * SOAP_FMAC4 soap_get_wsa5__FaultCodesType(struct soap*, enum wsa5__FaultCodesType *, const char*, const char*);

inline int soap_read_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesType(struct soap *soap, const char *URL, enum wsa5__FaultCodesType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesType(struct soap *soap, enum wsa5__FaultCodesType *p)
{
	if (::soap_read_wsa5__FaultCodesType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipType_DEFINED
#define SOAP_TYPE_wsa5__RelationshipType_DEFINED

inline void soap_default_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipType
	*a = SOAP_DEFAULT_wsa5__RelationshipType;
#else
	*a = (enum wsa5__RelationshipType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipType(struct soap*, const char*, int, const enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_wsa5__RelationshipType2s(struct soap*, enum wsa5__RelationshipType);
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_in_wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2wsa5__RelationshipType(struct soap*, const char*, enum wsa5__RelationshipType *);

SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_new_wsa5__RelationshipType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipType(struct soap*, const enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_write_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipType(soap, p, "wsa5:RelationshipType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum wsa5__RelationshipType * SOAP_FMAC4 soap_get_wsa5__RelationshipType(struct soap*, enum wsa5__RelationshipType *, const char*, const char*);

inline int soap_read_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipType(struct soap *soap, const char *URL, enum wsa5__RelationshipType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipType(struct soap *soap, enum wsa5__RelationshipType *p)
{
	if (::soap_read_wsa5__RelationshipType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__EEventTypes_DEFINED
#define SOAP_TYPE_ns10__EEventTypes_DEFINED

inline void soap_default_ns10__EEventTypes(struct soap *soap, enum ns10__EEventTypes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns10__EEventTypes
	*a = SOAP_DEFAULT_ns10__EEventTypes;
#else
	*a = (enum ns10__EEventTypes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__EEventTypes(struct soap*, const char*, int, const enum ns10__EEventTypes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns10__EEventTypes2s(struct soap*, enum ns10__EEventTypes);
SOAP_FMAC3 enum ns10__EEventTypes * SOAP_FMAC4 soap_in_ns10__EEventTypes(struct soap*, const char*, enum ns10__EEventTypes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns10__EEventTypes(struct soap*, const char*, enum ns10__EEventTypes *);

SOAP_FMAC3 enum ns10__EEventTypes * SOAP_FMAC4 soap_new_ns10__EEventTypes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns10__EEventTypes(struct soap*, const enum ns10__EEventTypes *, const char*, const char*);

inline int soap_write_ns10__EEventTypes(struct soap *soap, enum ns10__EEventTypes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns10__EEventTypes(soap, p, "ns10:EEventTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns10__EEventTypes(struct soap *soap, const char *URL, enum ns10__EEventTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EEventTypes(soap, p, "ns10:EEventTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__EEventTypes(struct soap *soap, const char *URL, enum ns10__EEventTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EEventTypes(soap, p, "ns10:EEventTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__EEventTypes(struct soap *soap, const char *URL, enum ns10__EEventTypes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EEventTypes(soap, p, "ns10:EEventTypes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns10__EEventTypes * SOAP_FMAC4 soap_get_ns10__EEventTypes(struct soap*, enum ns10__EEventTypes *, const char*, const char*);

inline int soap_read_ns10__EEventTypes(struct soap *soap, enum ns10__EEventTypes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns10__EEventTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__EEventTypes(struct soap *soap, const char *URL, enum ns10__EEventTypes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__EEventTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__EEventTypes(struct soap *soap, enum ns10__EEventTypes *p)
{
	if (::soap_read_ns10__EEventTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__EResultValueStatus_DEFINED
#define SOAP_TYPE_ns10__EResultValueStatus_DEFINED

inline void soap_default_ns10__EResultValueStatus(struct soap *soap, enum ns10__EResultValueStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns10__EResultValueStatus
	*a = SOAP_DEFAULT_ns10__EResultValueStatus;
#else
	*a = (enum ns10__EResultValueStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__EResultValueStatus(struct soap*, const char*, int, const enum ns10__EResultValueStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns10__EResultValueStatus2s(struct soap*, enum ns10__EResultValueStatus);
SOAP_FMAC3 enum ns10__EResultValueStatus * SOAP_FMAC4 soap_in_ns10__EResultValueStatus(struct soap*, const char*, enum ns10__EResultValueStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns10__EResultValueStatus(struct soap*, const char*, enum ns10__EResultValueStatus *);

SOAP_FMAC3 enum ns10__EResultValueStatus * SOAP_FMAC4 soap_new_ns10__EResultValueStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns10__EResultValueStatus(struct soap*, const enum ns10__EResultValueStatus *, const char*, const char*);

inline int soap_write_ns10__EResultValueStatus(struct soap *soap, enum ns10__EResultValueStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns10__EResultValueStatus(soap, p, "ns10:EResultValueStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns10__EResultValueStatus(struct soap *soap, const char *URL, enum ns10__EResultValueStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EResultValueStatus(soap, p, "ns10:EResultValueStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__EResultValueStatus(struct soap *soap, const char *URL, enum ns10__EResultValueStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EResultValueStatus(soap, p, "ns10:EResultValueStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__EResultValueStatus(struct soap *soap, const char *URL, enum ns10__EResultValueStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EResultValueStatus(soap, p, "ns10:EResultValueStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns10__EResultValueStatus * SOAP_FMAC4 soap_get_ns10__EResultValueStatus(struct soap*, enum ns10__EResultValueStatus *, const char*, const char*);

inline int soap_read_ns10__EResultValueStatus(struct soap *soap, enum ns10__EResultValueStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns10__EResultValueStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__EResultValueStatus(struct soap *soap, const char *URL, enum ns10__EResultValueStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__EResultValueStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__EResultValueStatus(struct soap *soap, enum ns10__EResultValueStatus *p)
{
	if (::soap_read_ns10__EResultValueStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__EResultStatus_DEFINED
#define SOAP_TYPE_ns10__EResultStatus_DEFINED

inline void soap_default_ns10__EResultStatus(struct soap *soap, enum ns10__EResultStatus *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns10__EResultStatus
	*a = SOAP_DEFAULT_ns10__EResultStatus;
#else
	*a = (enum ns10__EResultStatus)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__EResultStatus(struct soap*, const char*, int, const enum ns10__EResultStatus *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns10__EResultStatus2s(struct soap*, enum ns10__EResultStatus);
SOAP_FMAC3 enum ns10__EResultStatus * SOAP_FMAC4 soap_in_ns10__EResultStatus(struct soap*, const char*, enum ns10__EResultStatus *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns10__EResultStatus(struct soap*, const char*, enum ns10__EResultStatus *);

SOAP_FMAC3 enum ns10__EResultStatus * SOAP_FMAC4 soap_new_ns10__EResultStatus(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns10__EResultStatus(struct soap*, const enum ns10__EResultStatus *, const char*, const char*);

inline int soap_write_ns10__EResultStatus(struct soap *soap, enum ns10__EResultStatus const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns10__EResultStatus(soap, p, "ns10:EResultStatus", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns10__EResultStatus(struct soap *soap, const char *URL, enum ns10__EResultStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EResultStatus(soap, p, "ns10:EResultStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__EResultStatus(struct soap *soap, const char *URL, enum ns10__EResultStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EResultStatus(soap, p, "ns10:EResultStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__EResultStatus(struct soap *soap, const char *URL, enum ns10__EResultStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__EResultStatus(soap, p, "ns10:EResultStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns10__EResultStatus * SOAP_FMAC4 soap_get_ns10__EResultStatus(struct soap*, enum ns10__EResultStatus *, const char*, const char*);

inline int soap_read_ns10__EResultStatus(struct soap *soap, enum ns10__EResultStatus *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns10__EResultStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__EResultStatus(struct soap *soap, const char *URL, enum ns10__EResultStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__EResultStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__EResultStatus(struct soap *soap, enum ns10__EResultStatus *p)
{
	if (::soap_read_ns10__EResultStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__ESampleTypes_DEFINED
#define SOAP_TYPE_ns10__ESampleTypes_DEFINED

inline void soap_default_ns10__ESampleTypes(struct soap *soap, enum ns10__ESampleTypes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns10__ESampleTypes
	*a = SOAP_DEFAULT_ns10__ESampleTypes;
#else
	*a = (enum ns10__ESampleTypes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__ESampleTypes(struct soap*, const char*, int, const enum ns10__ESampleTypes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns10__ESampleTypes2s(struct soap*, enum ns10__ESampleTypes);
SOAP_FMAC3 enum ns10__ESampleTypes * SOAP_FMAC4 soap_in_ns10__ESampleTypes(struct soap*, const char*, enum ns10__ESampleTypes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns10__ESampleTypes(struct soap*, const char*, enum ns10__ESampleTypes *);

SOAP_FMAC3 enum ns10__ESampleTypes * SOAP_FMAC4 soap_new_ns10__ESampleTypes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns10__ESampleTypes(struct soap*, const enum ns10__ESampleTypes *, const char*, const char*);

inline int soap_write_ns10__ESampleTypes(struct soap *soap, enum ns10__ESampleTypes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns10__ESampleTypes(soap, p, "ns10:ESampleTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns10__ESampleTypes(struct soap *soap, const char *URL, enum ns10__ESampleTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__ESampleTypes(soap, p, "ns10:ESampleTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__ESampleTypes(struct soap *soap, const char *URL, enum ns10__ESampleTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__ESampleTypes(soap, p, "ns10:ESampleTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__ESampleTypes(struct soap *soap, const char *URL, enum ns10__ESampleTypes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns10__ESampleTypes(soap, p, "ns10:ESampleTypes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns10__ESampleTypes * SOAP_FMAC4 soap_get_ns10__ESampleTypes(struct soap*, enum ns10__ESampleTypes *, const char*, const char*);

inline int soap_read_ns10__ESampleTypes(struct soap *soap, enum ns10__ESampleTypes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns10__ESampleTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__ESampleTypes(struct soap *soap, const char *URL, enum ns10__ESampleTypes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__ESampleTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__ESampleTypes(struct soap *soap, enum ns10__ESampleTypes *p)
{
	if (::soap_read_ns10__ESampleTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns9__ChromatographMode_DEFINED
#define SOAP_TYPE_ns9__ChromatographMode_DEFINED

inline void soap_default_ns9__ChromatographMode(struct soap *soap, enum ns9__ChromatographMode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns9__ChromatographMode
	*a = SOAP_DEFAULT_ns9__ChromatographMode;
#else
	*a = (enum ns9__ChromatographMode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns9__ChromatographMode(struct soap*, const char*, int, const enum ns9__ChromatographMode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns9__ChromatographMode2s(struct soap*, enum ns9__ChromatographMode);
SOAP_FMAC3 enum ns9__ChromatographMode * SOAP_FMAC4 soap_in_ns9__ChromatographMode(struct soap*, const char*, enum ns9__ChromatographMode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns9__ChromatographMode(struct soap*, const char*, enum ns9__ChromatographMode *);

SOAP_FMAC3 enum ns9__ChromatographMode * SOAP_FMAC4 soap_new_ns9__ChromatographMode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns9__ChromatographMode(struct soap*, const enum ns9__ChromatographMode *, const char*, const char*);

inline int soap_write_ns9__ChromatographMode(struct soap *soap, enum ns9__ChromatographMode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns9__ChromatographMode(soap, p, "ns9:ChromatographMode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns9__ChromatographMode(struct soap *soap, const char *URL, enum ns9__ChromatographMode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns9__ChromatographMode(soap, p, "ns9:ChromatographMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns9__ChromatographMode(struct soap *soap, const char *URL, enum ns9__ChromatographMode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns9__ChromatographMode(soap, p, "ns9:ChromatographMode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns9__ChromatographMode(struct soap *soap, const char *URL, enum ns9__ChromatographMode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns9__ChromatographMode(soap, p, "ns9:ChromatographMode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns9__ChromatographMode * SOAP_FMAC4 soap_get_ns9__ChromatographMode(struct soap*, enum ns9__ChromatographMode *, const char*, const char*);

inline int soap_read_ns9__ChromatographMode(struct soap *soap, enum ns9__ChromatographMode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns9__ChromatographMode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns9__ChromatographMode(struct soap *soap, const char *URL, enum ns9__ChromatographMode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns9__ChromatographMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns9__ChromatographMode(struct soap *soap, enum ns9__ChromatographMode *p)
{
	if (::soap_read_ns9__ChromatographMode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns8__Logger_x002eLogLevel_DEFINED
#define SOAP_TYPE_ns8__Logger_x002eLogLevel_DEFINED

inline void soap_default_ns8__Logger_x002eLogLevel(struct soap *soap, enum ns8__Logger_x002eLogLevel *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns8__Logger_x002eLogLevel
	*a = SOAP_DEFAULT_ns8__Logger_x002eLogLevel;
#else
	*a = (enum ns8__Logger_x002eLogLevel)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns8__Logger_x002eLogLevel(struct soap*, const char*, int, const enum ns8__Logger_x002eLogLevel *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns8__Logger_x002eLogLevel2s(struct soap*, enum ns8__Logger_x002eLogLevel);
SOAP_FMAC3 enum ns8__Logger_x002eLogLevel * SOAP_FMAC4 soap_in_ns8__Logger_x002eLogLevel(struct soap*, const char*, enum ns8__Logger_x002eLogLevel *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns8__Logger_x002eLogLevel(struct soap*, const char*, enum ns8__Logger_x002eLogLevel *);

SOAP_FMAC3 enum ns8__Logger_x002eLogLevel * SOAP_FMAC4 soap_new_ns8__Logger_x002eLogLevel(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns8__Logger_x002eLogLevel(struct soap*, const enum ns8__Logger_x002eLogLevel *, const char*, const char*);

inline int soap_write_ns8__Logger_x002eLogLevel(struct soap *soap, enum ns8__Logger_x002eLogLevel const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns8__Logger_x002eLogLevel(soap, p, "ns8:Logger.LogLevel", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns8__Logger_x002eLogLevel(struct soap *soap, const char *URL, enum ns8__Logger_x002eLogLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns8__Logger_x002eLogLevel(soap, p, "ns8:Logger.LogLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns8__Logger_x002eLogLevel(struct soap *soap, const char *URL, enum ns8__Logger_x002eLogLevel const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns8__Logger_x002eLogLevel(soap, p, "ns8:Logger.LogLevel", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns8__Logger_x002eLogLevel(struct soap *soap, const char *URL, enum ns8__Logger_x002eLogLevel const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns8__Logger_x002eLogLevel(soap, p, "ns8:Logger.LogLevel", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns8__Logger_x002eLogLevel * SOAP_FMAC4 soap_get_ns8__Logger_x002eLogLevel(struct soap*, enum ns8__Logger_x002eLogLevel *, const char*, const char*);

inline int soap_read_ns8__Logger_x002eLogLevel(struct soap *soap, enum ns8__Logger_x002eLogLevel *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns8__Logger_x002eLogLevel(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns8__Logger_x002eLogLevel(struct soap *soap, const char *URL, enum ns8__Logger_x002eLogLevel *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns8__Logger_x002eLogLevel(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns8__Logger_x002eLogLevel(struct soap *soap, enum ns8__Logger_x002eLogLevel *p)
{
	if (::soap_read_ns8__Logger_x002eLogLevel(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__OperationTypes_DEFINED
#define SOAP_TYPE_ns4__OperationTypes_DEFINED

inline void soap_default_ns4__OperationTypes(struct soap *soap, enum ns4__OperationTypes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__OperationTypes
	*a = SOAP_DEFAULT_ns4__OperationTypes;
#else
	*a = (enum ns4__OperationTypes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__OperationTypes(struct soap*, const char*, int, const enum ns4__OperationTypes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__OperationTypes2s(struct soap*, enum ns4__OperationTypes);
SOAP_FMAC3 enum ns4__OperationTypes * SOAP_FMAC4 soap_in_ns4__OperationTypes(struct soap*, const char*, enum ns4__OperationTypes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__OperationTypes(struct soap*, const char*, enum ns4__OperationTypes *);

SOAP_FMAC3 enum ns4__OperationTypes * SOAP_FMAC4 soap_new_ns4__OperationTypes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__OperationTypes(struct soap*, const enum ns4__OperationTypes *, const char*, const char*);

inline int soap_write_ns4__OperationTypes(struct soap *soap, enum ns4__OperationTypes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns4__OperationTypes(soap, p, "ns4:OperationTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__OperationTypes(struct soap *soap, const char *URL, enum ns4__OperationTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__OperationTypes(soap, p, "ns4:OperationTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__OperationTypes(struct soap *soap, const char *URL, enum ns4__OperationTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__OperationTypes(soap, p, "ns4:OperationTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__OperationTypes(struct soap *soap, const char *URL, enum ns4__OperationTypes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__OperationTypes(soap, p, "ns4:OperationTypes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns4__OperationTypes * SOAP_FMAC4 soap_get_ns4__OperationTypes(struct soap*, enum ns4__OperationTypes *, const char*, const char*);

inline int soap_read_ns4__OperationTypes(struct soap *soap, enum ns4__OperationTypes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns4__OperationTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__OperationTypes(struct soap *soap, const char *URL, enum ns4__OperationTypes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__OperationTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__OperationTypes(struct soap *soap, enum ns4__OperationTypes *p)
{
	if (::soap_read_ns4__OperationTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ControlledParametr_x002eControlActionType_DEFINED
#define SOAP_TYPE_ns4__ControlledParametr_x002eControlActionType_DEFINED

inline void soap_default_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, enum ns4__ControlledParametr_x002eControlActionType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__ControlledParametr_x002eControlActionType
	*a = SOAP_DEFAULT_ns4__ControlledParametr_x002eControlActionType;
#else
	*a = (enum ns4__ControlledParametr_x002eControlActionType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ControlledParametr_x002eControlActionType(struct soap*, const char*, int, const enum ns4__ControlledParametr_x002eControlActionType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__ControlledParametr_x002eControlActionType2s(struct soap*, enum ns4__ControlledParametr_x002eControlActionType);
SOAP_FMAC3 enum ns4__ControlledParametr_x002eControlActionType * SOAP_FMAC4 soap_in_ns4__ControlledParametr_x002eControlActionType(struct soap*, const char*, enum ns4__ControlledParametr_x002eControlActionType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__ControlledParametr_x002eControlActionType(struct soap*, const char*, enum ns4__ControlledParametr_x002eControlActionType *);

SOAP_FMAC3 enum ns4__ControlledParametr_x002eControlActionType * SOAP_FMAC4 soap_new_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ControlledParametr_x002eControlActionType(struct soap*, const enum ns4__ControlledParametr_x002eControlActionType *, const char*, const char*);

inline int soap_write_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, enum ns4__ControlledParametr_x002eControlActionType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns4__ControlledParametr_x002eControlActionType(soap, p, "ns4:ControlledParametr.ControlActionType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, const char *URL, enum ns4__ControlledParametr_x002eControlActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__ControlledParametr_x002eControlActionType(soap, p, "ns4:ControlledParametr.ControlActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, const char *URL, enum ns4__ControlledParametr_x002eControlActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__ControlledParametr_x002eControlActionType(soap, p, "ns4:ControlledParametr.ControlActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, const char *URL, enum ns4__ControlledParametr_x002eControlActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__ControlledParametr_x002eControlActionType(soap, p, "ns4:ControlledParametr.ControlActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns4__ControlledParametr_x002eControlActionType * SOAP_FMAC4 soap_get_ns4__ControlledParametr_x002eControlActionType(struct soap*, enum ns4__ControlledParametr_x002eControlActionType *, const char*, const char*);

inline int soap_read_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, enum ns4__ControlledParametr_x002eControlActionType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns4__ControlledParametr_x002eControlActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, const char *URL, enum ns4__ControlledParametr_x002eControlActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ControlledParametr_x002eControlActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ControlledParametr_x002eControlActionType(struct soap *soap, enum ns4__ControlledParametr_x002eControlActionType *p)
{
	if (::soap_read_ns4__ControlledParametr_x002eControlActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__OperationStepTypes_DEFINED
#define SOAP_TYPE_ns4__OperationStepTypes_DEFINED

inline void soap_default_ns4__OperationStepTypes(struct soap *soap, enum ns4__OperationStepTypes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns4__OperationStepTypes
	*a = SOAP_DEFAULT_ns4__OperationStepTypes;
#else
	*a = (enum ns4__OperationStepTypes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__OperationStepTypes(struct soap*, const char*, int, const enum ns4__OperationStepTypes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__OperationStepTypes2s(struct soap*, enum ns4__OperationStepTypes);
SOAP_FMAC3 enum ns4__OperationStepTypes * SOAP_FMAC4 soap_in_ns4__OperationStepTypes(struct soap*, const char*, enum ns4__OperationStepTypes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__OperationStepTypes(struct soap*, const char*, enum ns4__OperationStepTypes *);

SOAP_FMAC3 enum ns4__OperationStepTypes * SOAP_FMAC4 soap_new_ns4__OperationStepTypes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__OperationStepTypes(struct soap*, const enum ns4__OperationStepTypes *, const char*, const char*);

inline int soap_write_ns4__OperationStepTypes(struct soap *soap, enum ns4__OperationStepTypes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns4__OperationStepTypes(soap, p, "ns4:OperationStepTypes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns4__OperationStepTypes(struct soap *soap, const char *URL, enum ns4__OperationStepTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__OperationStepTypes(soap, p, "ns4:OperationStepTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__OperationStepTypes(struct soap *soap, const char *URL, enum ns4__OperationStepTypes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__OperationStepTypes(soap, p, "ns4:OperationStepTypes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__OperationStepTypes(struct soap *soap, const char *URL, enum ns4__OperationStepTypes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns4__OperationStepTypes(soap, p, "ns4:OperationStepTypes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns4__OperationStepTypes * SOAP_FMAC4 soap_get_ns4__OperationStepTypes(struct soap*, enum ns4__OperationStepTypes *, const char*, const char*);

inline int soap_read_ns4__OperationStepTypes(struct soap *soap, enum ns4__OperationStepTypes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns4__OperationStepTypes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__OperationStepTypes(struct soap *soap, const char *URL, enum ns4__OperationStepTypes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__OperationStepTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__OperationStepTypes(struct soap *soap, enum ns4__OperationStepTypes *p)
{
	if (::soap_read_ns4__OperationStepTypes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__ProcessingModes_DEFINED
#define SOAP_TYPE_ns3__ProcessingModes_DEFINED

inline void soap_default_ns3__ProcessingModes(struct soap *soap, enum ns3__ProcessingModes *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__ProcessingModes
	*a = SOAP_DEFAULT_ns3__ProcessingModes;
#else
	*a = (enum ns3__ProcessingModes)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ProcessingModes(struct soap*, const char*, int, const enum ns3__ProcessingModes *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ProcessingModes2s(struct soap*, enum ns3__ProcessingModes);
SOAP_FMAC3 enum ns3__ProcessingModes * SOAP_FMAC4 soap_in_ns3__ProcessingModes(struct soap*, const char*, enum ns3__ProcessingModes *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ProcessingModes(struct soap*, const char*, enum ns3__ProcessingModes *);

SOAP_FMAC3 enum ns3__ProcessingModes * SOAP_FMAC4 soap_new_ns3__ProcessingModes(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ProcessingModes(struct soap*, const enum ns3__ProcessingModes *, const char*, const char*);

inline int soap_write_ns3__ProcessingModes(struct soap *soap, enum ns3__ProcessingModes const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__ProcessingModes(soap, p, "ns3:ProcessingModes", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__ProcessingModes(struct soap *soap, const char *URL, enum ns3__ProcessingModes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__ProcessingModes(soap, p, "ns3:ProcessingModes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ProcessingModes(struct soap *soap, const char *URL, enum ns3__ProcessingModes const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__ProcessingModes(soap, p, "ns3:ProcessingModes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ProcessingModes(struct soap *soap, const char *URL, enum ns3__ProcessingModes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__ProcessingModes(soap, p, "ns3:ProcessingModes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__ProcessingModes * SOAP_FMAC4 soap_get_ns3__ProcessingModes(struct soap*, enum ns3__ProcessingModes *, const char*, const char*);

inline int soap_read_ns3__ProcessingModes(struct soap *soap, enum ns3__ProcessingModes *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__ProcessingModes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ProcessingModes(struct soap *soap, const char *URL, enum ns3__ProcessingModes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__ProcessingModes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ProcessingModes(struct soap *soap, enum ns3__ProcessingModes *p)
{
	if (::soap_read_ns3__ProcessingModes(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfoStates_DEFINED
#define SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfoStates_DEFINED

inline void soap_default_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__OperationProcInfo_x002eOperationStepInfoStates
	*a = SOAP_DEFAULT_ns3__OperationProcInfo_x002eOperationStepInfoStates;
#else
	*a = (enum ns3__OperationProcInfo_x002eOperationStepInfoStates)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, const char*, int, const enum ns3__OperationProcInfo_x002eOperationStepInfoStates *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__OperationProcInfo_x002eOperationStepInfoStates2s(struct soap*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates);
SOAP_FMAC3 enum ns3__OperationProcInfo_x002eOperationStepInfoStates * SOAP_FMAC4 soap_in_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, const char*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, const char*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *);

SOAP_FMAC3 enum ns3__OperationProcInfo_x002eOperationStepInfoStates * SOAP_FMAC4 soap_new_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, const enum ns3__OperationProcInfo_x002eOperationStepInfoStates *, const char*, const char*);

inline int soap_write_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, enum ns3__OperationProcInfo_x002eOperationStepInfoStates const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p, "ns3:OperationProcInfo.OperationStepInfoStates", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, const char *URL, enum ns3__OperationProcInfo_x002eOperationStepInfoStates const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p, "ns3:OperationProcInfo.OperationStepInfoStates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, const char *URL, enum ns3__OperationProcInfo_x002eOperationStepInfoStates const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p, "ns3:OperationProcInfo.OperationStepInfoStates", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, const char *URL, enum ns3__OperationProcInfo_x002eOperationStepInfoStates const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p, "ns3:OperationProcInfo.OperationStepInfoStates", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__OperationProcInfo_x002eOperationStepInfoStates * SOAP_FMAC4 soap_get_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *, const char*, const char*);

inline int soap_read_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, const char *URL, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__OperationProcInfo_x002eOperationStepInfoStates(struct soap *soap, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *p)
{
	if (::soap_read_ns3__OperationProcInfo_x002eOperationStepInfoStates(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__EEvent_DEFINED
#define SOAP_TYPE_ns10__EEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__EEvent(struct soap*, const char*, int, const ns10__EEvent *, const char*);
SOAP_FMAC3 ns10__EEvent * SOAP_FMAC4 soap_in_ns10__EEvent(struct soap*, const char*, ns10__EEvent *, const char*);
SOAP_FMAC1 ns10__EEvent * SOAP_FMAC2 soap_instantiate_ns10__EEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns10__EEvent * soap_new_ns10__EEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns10__EEvent(soap, n, NULL, NULL, NULL);
}

inline ns10__EEvent * soap_new_req_ns10__EEvent(
	struct soap *soap)
{
	ns10__EEvent *_p = ::soap_new_ns10__EEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns10__EEvent * soap_new_set_ns10__EEvent(
	struct soap *soap,
	bool *Confirmed,
	std::string *Description,
	time_t *EventDateTime,
	enum ns10__EEventTypes *EventType,
	int *Id,
	std::string *Title)
{
	ns10__EEvent *_p = ::soap_new_ns10__EEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns10__EEvent::Confirmed = Confirmed;
		_p->ns10__EEvent::Description = Description;
		_p->ns10__EEvent::EventDateTime = EventDateTime;
		_p->ns10__EEvent::EventType = EventType;
		_p->ns10__EEvent::Id = Id;
		_p->ns10__EEvent::Title = Title;
	}
	return _p;
}

inline int soap_write_ns10__EEvent(struct soap *soap, ns10__EEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EEvent", p->soap_type() == SOAP_TYPE_ns10__EEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns10__EEvent(struct soap *soap, const char *URL, ns10__EEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EEvent", p->soap_type() == SOAP_TYPE_ns10__EEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__EEvent(struct soap *soap, const char *URL, ns10__EEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EEvent", p->soap_type() == SOAP_TYPE_ns10__EEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__EEvent(struct soap *soap, const char *URL, ns10__EEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EEvent", p->soap_type() == SOAP_TYPE_ns10__EEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns10__EEvent * SOAP_FMAC4 soap_get_ns10__EEvent(struct soap*, ns10__EEvent *, const char*, const char*);

inline int soap_read_ns10__EEvent(struct soap *soap, ns10__EEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns10__EEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__EEvent(struct soap *soap, const char *URL, ns10__EEvent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__EEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__EEvent(struct soap *soap, ns10__EEvent *p)
{
	if (::soap_read_ns10__EEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__ArrayOfEEvent_DEFINED
#define SOAP_TYPE_ns10__ArrayOfEEvent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__ArrayOfEEvent(struct soap*, const char*, int, const ns10__ArrayOfEEvent *, const char*);
SOAP_FMAC3 ns10__ArrayOfEEvent * SOAP_FMAC4 soap_in_ns10__ArrayOfEEvent(struct soap*, const char*, ns10__ArrayOfEEvent *, const char*);
SOAP_FMAC1 ns10__ArrayOfEEvent * SOAP_FMAC2 soap_instantiate_ns10__ArrayOfEEvent(struct soap*, int, const char*, const char*, size_t*);

inline ns10__ArrayOfEEvent * soap_new_ns10__ArrayOfEEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns10__ArrayOfEEvent(soap, n, NULL, NULL, NULL);
}

inline ns10__ArrayOfEEvent * soap_new_req_ns10__ArrayOfEEvent(
	struct soap *soap)
{
	ns10__ArrayOfEEvent *_p = ::soap_new_ns10__ArrayOfEEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns10__ArrayOfEEvent * soap_new_set_ns10__ArrayOfEEvent(
	struct soap *soap,
	const std::vector<ns10__EEvent *> & EEvent)
{
	ns10__ArrayOfEEvent *_p = ::soap_new_ns10__ArrayOfEEvent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns10__ArrayOfEEvent::EEvent = EEvent;
	}
	return _p;
}

inline int soap_write_ns10__ArrayOfEEvent(struct soap *soap, ns10__ArrayOfEEvent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEEvent", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEEvent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns10__ArrayOfEEvent(struct soap *soap, const char *URL, ns10__ArrayOfEEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEEvent", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__ArrayOfEEvent(struct soap *soap, const char *URL, ns10__ArrayOfEEvent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEEvent", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEEvent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__ArrayOfEEvent(struct soap *soap, const char *URL, ns10__ArrayOfEEvent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEEvent", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEEvent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns10__ArrayOfEEvent * SOAP_FMAC4 soap_get_ns10__ArrayOfEEvent(struct soap*, ns10__ArrayOfEEvent *, const char*, const char*);

inline int soap_read_ns10__ArrayOfEEvent(struct soap *soap, ns10__ArrayOfEEvent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns10__ArrayOfEEvent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__ArrayOfEEvent(struct soap *soap, const char *URL, ns10__ArrayOfEEvent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__ArrayOfEEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__ArrayOfEEvent(struct soap *soap, ns10__ArrayOfEEvent *p)
{
	if (::soap_read_ns10__ArrayOfEEvent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__EResult_DEFINED
#define SOAP_TYPE_ns10__EResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__EResult(struct soap*, const char*, int, const ns10__EResult *, const char*);
SOAP_FMAC3 ns10__EResult * SOAP_FMAC4 soap_in_ns10__EResult(struct soap*, const char*, ns10__EResult *, const char*);
SOAP_FMAC1 ns10__EResult * SOAP_FMAC2 soap_instantiate_ns10__EResult(struct soap*, int, const char*, const char*, size_t*);

inline ns10__EResult * soap_new_ns10__EResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns10__EResult(soap, n, NULL, NULL, NULL);
}

inline ns10__EResult * soap_new_req_ns10__EResult(
	struct soap *soap)
{
	ns10__EResult *_p = ::soap_new_ns10__EResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns10__EResult * soap_new_set_ns10__EResult(
	struct soap *soap,
	enum ns10__EResultStatus *AccuracyStatus,
	std::string *AccuracyStatusInfo,
	int *ComponentCode,
	std::string *ComponentName,
	int *Id,
	std::string *IntervalValueBorder,
	enum ns10__EResultStatus *PeriodicityStatus,
	std::string *PeriodicityStatusInfo,
	std::string *ResultDetails,
	ns10__ESample *Sample,
	std::string *UnitsName,
	std::string *Value,
	int *ValueDigAfterPoint,
	enum ns10__EResultValueStatus *ValueStatus)
{
	ns10__EResult *_p = ::soap_new_ns10__EResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns10__EResult::AccuracyStatus = AccuracyStatus;
		_p->ns10__EResult::AccuracyStatusInfo = AccuracyStatusInfo;
		_p->ns10__EResult::ComponentCode = ComponentCode;
		_p->ns10__EResult::ComponentName = ComponentName;
		_p->ns10__EResult::Id = Id;
		_p->ns10__EResult::IntervalValueBorder = IntervalValueBorder;
		_p->ns10__EResult::PeriodicityStatus = PeriodicityStatus;
		_p->ns10__EResult::PeriodicityStatusInfo = PeriodicityStatusInfo;
		_p->ns10__EResult::ResultDetails = ResultDetails;
		_p->ns10__EResult::Sample = Sample;
		_p->ns10__EResult::UnitsName = UnitsName;
		_p->ns10__EResult::Value = Value;
		_p->ns10__EResult::ValueDigAfterPoint = ValueDigAfterPoint;
		_p->ns10__EResult::ValueStatus = ValueStatus;
	}
	return _p;
}

inline int soap_write_ns10__EResult(struct soap *soap, ns10__EResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EResult", p->soap_type() == SOAP_TYPE_ns10__EResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns10__EResult(struct soap *soap, const char *URL, ns10__EResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EResult", p->soap_type() == SOAP_TYPE_ns10__EResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__EResult(struct soap *soap, const char *URL, ns10__EResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EResult", p->soap_type() == SOAP_TYPE_ns10__EResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__EResult(struct soap *soap, const char *URL, ns10__EResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:EResult", p->soap_type() == SOAP_TYPE_ns10__EResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns10__EResult * SOAP_FMAC4 soap_get_ns10__EResult(struct soap*, ns10__EResult *, const char*, const char*);

inline int soap_read_ns10__EResult(struct soap *soap, ns10__EResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns10__EResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__EResult(struct soap *soap, const char *URL, ns10__EResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__EResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__EResult(struct soap *soap, ns10__EResult *p)
{
	if (::soap_read_ns10__EResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__ArrayOfEResult_DEFINED
#define SOAP_TYPE_ns10__ArrayOfEResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__ArrayOfEResult(struct soap*, const char*, int, const ns10__ArrayOfEResult *, const char*);
SOAP_FMAC3 ns10__ArrayOfEResult * SOAP_FMAC4 soap_in_ns10__ArrayOfEResult(struct soap*, const char*, ns10__ArrayOfEResult *, const char*);
SOAP_FMAC1 ns10__ArrayOfEResult * SOAP_FMAC2 soap_instantiate_ns10__ArrayOfEResult(struct soap*, int, const char*, const char*, size_t*);

inline ns10__ArrayOfEResult * soap_new_ns10__ArrayOfEResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns10__ArrayOfEResult(soap, n, NULL, NULL, NULL);
}

inline ns10__ArrayOfEResult * soap_new_req_ns10__ArrayOfEResult(
	struct soap *soap)
{
	ns10__ArrayOfEResult *_p = ::soap_new_ns10__ArrayOfEResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns10__ArrayOfEResult * soap_new_set_ns10__ArrayOfEResult(
	struct soap *soap,
	const std::vector<ns10__EResult *> & EResult)
{
	ns10__ArrayOfEResult *_p = ::soap_new_ns10__ArrayOfEResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns10__ArrayOfEResult::EResult = EResult;
	}
	return _p;
}

inline int soap_write_ns10__ArrayOfEResult(struct soap *soap, ns10__ArrayOfEResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEResult", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns10__ArrayOfEResult(struct soap *soap, const char *URL, ns10__ArrayOfEResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEResult", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__ArrayOfEResult(struct soap *soap, const char *URL, ns10__ArrayOfEResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEResult", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__ArrayOfEResult(struct soap *soap, const char *URL, ns10__ArrayOfEResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfEResult", p->soap_type() == SOAP_TYPE_ns10__ArrayOfEResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns10__ArrayOfEResult * SOAP_FMAC4 soap_get_ns10__ArrayOfEResult(struct soap*, ns10__ArrayOfEResult *, const char*, const char*);

inline int soap_read_ns10__ArrayOfEResult(struct soap *soap, ns10__ArrayOfEResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns10__ArrayOfEResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__ArrayOfEResult(struct soap *soap, const char *URL, ns10__ArrayOfEResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__ArrayOfEResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__ArrayOfEResult(struct soap *soap, ns10__ArrayOfEResult *p)
{
	if (::soap_read_ns10__ArrayOfEResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__ESample_DEFINED
#define SOAP_TYPE_ns10__ESample_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__ESample(struct soap*, const char*, int, const ns10__ESample *, const char*);
SOAP_FMAC3 ns10__ESample * SOAP_FMAC4 soap_in_ns10__ESample(struct soap*, const char*, ns10__ESample *, const char*);
SOAP_FMAC1 ns10__ESample * SOAP_FMAC2 soap_instantiate_ns10__ESample(struct soap*, int, const char*, const char*, size_t*);

inline ns10__ESample * soap_new_ns10__ESample(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns10__ESample(soap, n, NULL, NULL, NULL);
}

inline ns10__ESample * soap_new_req_ns10__ESample(
	struct soap *soap)
{
	ns10__ESample *_p = ::soap_new_ns10__ESample(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns10__ESample * soap_new_set_ns10__ESample(
	struct soap *soap,
	time_t *BeginAnalyzingDateTime,
	time_t *BeginSamplingDateTime,
	std::string *ChromNumber,
	time_t *EndAnalyzingDateTime,
	time_t *EndSamplingDateTime,
	int *Id,
	ns10__ArrayOfEResult *Results,
	enum ns10__ESampleTypes *SampleType)
{
	ns10__ESample *_p = ::soap_new_ns10__ESample(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns10__ESample::BeginAnalyzingDateTime = BeginAnalyzingDateTime;
		_p->ns10__ESample::BeginSamplingDateTime = BeginSamplingDateTime;
		_p->ns10__ESample::ChromNumber = ChromNumber;
		_p->ns10__ESample::EndAnalyzingDateTime = EndAnalyzingDateTime;
		_p->ns10__ESample::EndSamplingDateTime = EndSamplingDateTime;
		_p->ns10__ESample::Id = Id;
		_p->ns10__ESample::Results = Results;
		_p->ns10__ESample::SampleType = SampleType;
	}
	return _p;
}

inline int soap_write_ns10__ESample(struct soap *soap, ns10__ESample const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ESample", p->soap_type() == SOAP_TYPE_ns10__ESample ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns10__ESample(struct soap *soap, const char *URL, ns10__ESample const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ESample", p->soap_type() == SOAP_TYPE_ns10__ESample ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__ESample(struct soap *soap, const char *URL, ns10__ESample const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ESample", p->soap_type() == SOAP_TYPE_ns10__ESample ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__ESample(struct soap *soap, const char *URL, ns10__ESample const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ESample", p->soap_type() == SOAP_TYPE_ns10__ESample ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns10__ESample * SOAP_FMAC4 soap_get_ns10__ESample(struct soap*, ns10__ESample *, const char*, const char*);

inline int soap_read_ns10__ESample(struct soap *soap, ns10__ESample *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns10__ESample(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__ESample(struct soap *soap, const char *URL, ns10__ESample *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__ESample(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__ESample(struct soap *soap, ns10__ESample *p)
{
	if (::soap_read_ns10__ESample(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns10__ArrayOfESample_DEFINED
#define SOAP_TYPE_ns10__ArrayOfESample_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns10__ArrayOfESample(struct soap*, const char*, int, const ns10__ArrayOfESample *, const char*);
SOAP_FMAC3 ns10__ArrayOfESample * SOAP_FMAC4 soap_in_ns10__ArrayOfESample(struct soap*, const char*, ns10__ArrayOfESample *, const char*);
SOAP_FMAC1 ns10__ArrayOfESample * SOAP_FMAC2 soap_instantiate_ns10__ArrayOfESample(struct soap*, int, const char*, const char*, size_t*);

inline ns10__ArrayOfESample * soap_new_ns10__ArrayOfESample(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns10__ArrayOfESample(soap, n, NULL, NULL, NULL);
}

inline ns10__ArrayOfESample * soap_new_req_ns10__ArrayOfESample(
	struct soap *soap)
{
	ns10__ArrayOfESample *_p = ::soap_new_ns10__ArrayOfESample(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns10__ArrayOfESample * soap_new_set_ns10__ArrayOfESample(
	struct soap *soap,
	const std::vector<ns10__ESample *> & ESample)
{
	ns10__ArrayOfESample *_p = ::soap_new_ns10__ArrayOfESample(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns10__ArrayOfESample::ESample = ESample;
	}
	return _p;
}

inline int soap_write_ns10__ArrayOfESample(struct soap *soap, ns10__ArrayOfESample const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfESample", p->soap_type() == SOAP_TYPE_ns10__ArrayOfESample ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns10__ArrayOfESample(struct soap *soap, const char *URL, ns10__ArrayOfESample const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfESample", p->soap_type() == SOAP_TYPE_ns10__ArrayOfESample ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns10__ArrayOfESample(struct soap *soap, const char *URL, ns10__ArrayOfESample const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfESample", p->soap_type() == SOAP_TYPE_ns10__ArrayOfESample ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns10__ArrayOfESample(struct soap *soap, const char *URL, ns10__ArrayOfESample const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns10:ArrayOfESample", p->soap_type() == SOAP_TYPE_ns10__ArrayOfESample ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns10__ArrayOfESample * SOAP_FMAC4 soap_get_ns10__ArrayOfESample(struct soap*, ns10__ArrayOfESample *, const char*, const char*);

inline int soap_read_ns10__ArrayOfESample(struct soap *soap, ns10__ArrayOfESample *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns10__ArrayOfESample(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns10__ArrayOfESample(struct soap *soap, const char *URL, ns10__ArrayOfESample *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns10__ArrayOfESample(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns10__ArrayOfESample(struct soap *soap, ns10__ArrayOfESample *p)
{
	if (::soap_read_ns10__ArrayOfESample(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns7__AuxDeviceState_DEFINED
#define SOAP_TYPE_ns7__AuxDeviceState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__AuxDeviceState(struct soap*, const char*, int, const ns7__AuxDeviceState *, const char*);
SOAP_FMAC3 ns7__AuxDeviceState * SOAP_FMAC4 soap_in_ns7__AuxDeviceState(struct soap*, const char*, ns7__AuxDeviceState *, const char*);
SOAP_FMAC1 ns7__AuxDeviceState * SOAP_FMAC2 soap_instantiate_ns7__AuxDeviceState(struct soap*, int, const char*, const char*, size_t*);

inline ns7__AuxDeviceState * soap_new_ns7__AuxDeviceState(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__AuxDeviceState(soap, n, NULL, NULL, NULL);
}

inline ns7__AuxDeviceState * soap_new_req_ns7__AuxDeviceState(
	struct soap *soap)
{
	ns7__AuxDeviceState *_p = ::soap_new_ns7__AuxDeviceState(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__AuxDeviceState * soap_new_set_ns7__AuxDeviceState(
	struct soap *soap,
	std::string *BitCommand,
	std::string *BitMask,
	std::string *BitStatus,
	std::string *Caption,
	unsigned char *Id,
	bool *IsDefault,
	int *StateChangeDelay)
{
	ns7__AuxDeviceState *_p = ::soap_new_ns7__AuxDeviceState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__AuxDeviceState::BitCommand = BitCommand;
		_p->ns7__AuxDeviceState::BitMask = BitMask;
		_p->ns7__AuxDeviceState::BitStatus = BitStatus;
		_p->ns7__AuxDeviceState::Caption = Caption;
		_p->ns7__AuxDeviceState::Id = Id;
		_p->ns7__AuxDeviceState::IsDefault = IsDefault;
		_p->ns7__AuxDeviceState::StateChangeDelay = StateChangeDelay;
	}
	return _p;
}

inline int soap_write_ns7__AuxDeviceState(struct soap *soap, ns7__AuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__AuxDeviceState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__AuxDeviceState(struct soap *soap, const char *URL, ns7__AuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__AuxDeviceState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns7__AuxDeviceState(struct soap *soap, const char *URL, ns7__AuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__AuxDeviceState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns7__AuxDeviceState(struct soap *soap, const char *URL, ns7__AuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__AuxDeviceState ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns7__AuxDeviceState * SOAP_FMAC4 soap_get_ns7__AuxDeviceState(struct soap*, ns7__AuxDeviceState *, const char*, const char*);

inline int soap_read_ns7__AuxDeviceState(struct soap *soap, ns7__AuxDeviceState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns7__AuxDeviceState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__AuxDeviceState(struct soap *soap, const char *URL, ns7__AuxDeviceState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns7__AuxDeviceState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns7__AuxDeviceState(struct soap *soap, ns7__AuxDeviceState *p)
{
	if (::soap_read_ns7__AuxDeviceState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns7__ArrayOfAuxDeviceState_DEFINED
#define SOAP_TYPE_ns7__ArrayOfAuxDeviceState_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__ArrayOfAuxDeviceState(struct soap*, const char*, int, const ns7__ArrayOfAuxDeviceState *, const char*);
SOAP_FMAC3 ns7__ArrayOfAuxDeviceState * SOAP_FMAC4 soap_in_ns7__ArrayOfAuxDeviceState(struct soap*, const char*, ns7__ArrayOfAuxDeviceState *, const char*);
SOAP_FMAC1 ns7__ArrayOfAuxDeviceState * SOAP_FMAC2 soap_instantiate_ns7__ArrayOfAuxDeviceState(struct soap*, int, const char*, const char*, size_t*);

inline ns7__ArrayOfAuxDeviceState * soap_new_ns7__ArrayOfAuxDeviceState(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__ArrayOfAuxDeviceState(soap, n, NULL, NULL, NULL);
}

inline ns7__ArrayOfAuxDeviceState * soap_new_req_ns7__ArrayOfAuxDeviceState(
	struct soap *soap)
{
	ns7__ArrayOfAuxDeviceState *_p = ::soap_new_ns7__ArrayOfAuxDeviceState(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__ArrayOfAuxDeviceState * soap_new_set_ns7__ArrayOfAuxDeviceState(
	struct soap *soap,
	const std::vector<ns7__AuxDeviceState *> & AuxDeviceState)
{
	ns7__ArrayOfAuxDeviceState *_p = ::soap_new_ns7__ArrayOfAuxDeviceState(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__ArrayOfAuxDeviceState::AuxDeviceState = AuxDeviceState;
	}
	return _p;
}

inline int soap_write_ns7__ArrayOfAuxDeviceState(struct soap *soap, ns7__ArrayOfAuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDeviceState ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__ArrayOfAuxDeviceState(struct soap *soap, const char *URL, ns7__ArrayOfAuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDeviceState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns7__ArrayOfAuxDeviceState(struct soap *soap, const char *URL, ns7__ArrayOfAuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDeviceState ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns7__ArrayOfAuxDeviceState(struct soap *soap, const char *URL, ns7__ArrayOfAuxDeviceState const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDeviceState", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDeviceState ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns7__ArrayOfAuxDeviceState * SOAP_FMAC4 soap_get_ns7__ArrayOfAuxDeviceState(struct soap*, ns7__ArrayOfAuxDeviceState *, const char*, const char*);

inline int soap_read_ns7__ArrayOfAuxDeviceState(struct soap *soap, ns7__ArrayOfAuxDeviceState *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns7__ArrayOfAuxDeviceState(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__ArrayOfAuxDeviceState(struct soap *soap, const char *URL, ns7__ArrayOfAuxDeviceState *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns7__ArrayOfAuxDeviceState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns7__ArrayOfAuxDeviceState(struct soap *soap, ns7__ArrayOfAuxDeviceState *p)
{
	if (::soap_read_ns7__ArrayOfAuxDeviceState(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns7__AuxDevice_DEFINED
#define SOAP_TYPE_ns7__AuxDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__AuxDevice(struct soap*, const char*, int, const ns7__AuxDevice *, const char*);
SOAP_FMAC3 ns7__AuxDevice * SOAP_FMAC4 soap_in_ns7__AuxDevice(struct soap*, const char*, ns7__AuxDevice *, const char*);
SOAP_FMAC1 ns7__AuxDevice * SOAP_FMAC2 soap_instantiate_ns7__AuxDevice(struct soap*, int, const char*, const char*, size_t*);

inline ns7__AuxDevice * soap_new_ns7__AuxDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__AuxDevice(soap, n, NULL, NULL, NULL);
}

inline ns7__AuxDevice * soap_new_req_ns7__AuxDevice(
	struct soap *soap)
{
	ns7__AuxDevice *_p = ::soap_new_ns7__AuxDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__AuxDevice * soap_new_set_ns7__AuxDevice(
	struct soap *soap,
	std::string *Caption,
	unsigned char *Id,
	ns7__ArrayOfAuxDeviceState *States)
{
	ns7__AuxDevice *_p = ::soap_new_ns7__AuxDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__AuxDevice::Caption = Caption;
		_p->ns7__AuxDevice::Id = Id;
		_p->ns7__AuxDevice::States = States;
	}
	return _p;
}

inline int soap_write_ns7__AuxDevice(struct soap *soap, ns7__AuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDevice", p->soap_type() == SOAP_TYPE_ns7__AuxDevice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__AuxDevice(struct soap *soap, const char *URL, ns7__AuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDevice", p->soap_type() == SOAP_TYPE_ns7__AuxDevice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns7__AuxDevice(struct soap *soap, const char *URL, ns7__AuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDevice", p->soap_type() == SOAP_TYPE_ns7__AuxDevice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns7__AuxDevice(struct soap *soap, const char *URL, ns7__AuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxDevice", p->soap_type() == SOAP_TYPE_ns7__AuxDevice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns7__AuxDevice * SOAP_FMAC4 soap_get_ns7__AuxDevice(struct soap*, ns7__AuxDevice *, const char*, const char*);

inline int soap_read_ns7__AuxDevice(struct soap *soap, ns7__AuxDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns7__AuxDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__AuxDevice(struct soap *soap, const char *URL, ns7__AuxDevice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns7__AuxDevice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns7__AuxDevice(struct soap *soap, ns7__AuxDevice *p)
{
	if (::soap_read_ns7__AuxDevice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns7__ArrayOfAuxDevice_DEFINED
#define SOAP_TYPE_ns7__ArrayOfAuxDevice_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__ArrayOfAuxDevice(struct soap*, const char*, int, const ns7__ArrayOfAuxDevice *, const char*);
SOAP_FMAC3 ns7__ArrayOfAuxDevice * SOAP_FMAC4 soap_in_ns7__ArrayOfAuxDevice(struct soap*, const char*, ns7__ArrayOfAuxDevice *, const char*);
SOAP_FMAC1 ns7__ArrayOfAuxDevice * SOAP_FMAC2 soap_instantiate_ns7__ArrayOfAuxDevice(struct soap*, int, const char*, const char*, size_t*);

inline ns7__ArrayOfAuxDevice * soap_new_ns7__ArrayOfAuxDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__ArrayOfAuxDevice(soap, n, NULL, NULL, NULL);
}

inline ns7__ArrayOfAuxDevice * soap_new_req_ns7__ArrayOfAuxDevice(
	struct soap *soap)
{
	ns7__ArrayOfAuxDevice *_p = ::soap_new_ns7__ArrayOfAuxDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__ArrayOfAuxDevice * soap_new_set_ns7__ArrayOfAuxDevice(
	struct soap *soap,
	const std::vector<ns7__AuxDevice *> & AuxDevice)
{
	ns7__ArrayOfAuxDevice *_p = ::soap_new_ns7__ArrayOfAuxDevice(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__ArrayOfAuxDevice::AuxDevice = AuxDevice;
	}
	return _p;
}

inline int soap_write_ns7__ArrayOfAuxDevice(struct soap *soap, ns7__ArrayOfAuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDevice", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDevice ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__ArrayOfAuxDevice(struct soap *soap, const char *URL, ns7__ArrayOfAuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDevice", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDevice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns7__ArrayOfAuxDevice(struct soap *soap, const char *URL, ns7__ArrayOfAuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDevice", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDevice ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns7__ArrayOfAuxDevice(struct soap *soap, const char *URL, ns7__ArrayOfAuxDevice const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:ArrayOfAuxDevice", p->soap_type() == SOAP_TYPE_ns7__ArrayOfAuxDevice ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns7__ArrayOfAuxDevice * SOAP_FMAC4 soap_get_ns7__ArrayOfAuxDevice(struct soap*, ns7__ArrayOfAuxDevice *, const char*, const char*);

inline int soap_read_ns7__ArrayOfAuxDevice(struct soap *soap, ns7__ArrayOfAuxDevice *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns7__ArrayOfAuxDevice(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__ArrayOfAuxDevice(struct soap *soap, const char *URL, ns7__ArrayOfAuxDevice *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns7__ArrayOfAuxDevice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns7__ArrayOfAuxDevice(struct soap *soap, ns7__ArrayOfAuxDevice *p)
{
	if (::soap_read_ns7__ArrayOfAuxDevice(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns7__AuxControllerConfiguration_DEFINED
#define SOAP_TYPE_ns7__AuxControllerConfiguration_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns7__AuxControllerConfiguration(struct soap*, const char*, int, const ns7__AuxControllerConfiguration *, const char*);
SOAP_FMAC3 ns7__AuxControllerConfiguration * SOAP_FMAC4 soap_in_ns7__AuxControllerConfiguration(struct soap*, const char*, ns7__AuxControllerConfiguration *, const char*);
SOAP_FMAC1 ns7__AuxControllerConfiguration * SOAP_FMAC2 soap_instantiate_ns7__AuxControllerConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline ns7__AuxControllerConfiguration * soap_new_ns7__AuxControllerConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns7__AuxControllerConfiguration(soap, n, NULL, NULL, NULL);
}

inline ns7__AuxControllerConfiguration * soap_new_req_ns7__AuxControllerConfiguration(
	struct soap *soap)
{
	ns7__AuxControllerConfiguration *_p = ::soap_new_ns7__AuxControllerConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns7__AuxControllerConfiguration * soap_new_set_ns7__AuxControllerConfiguration(
	struct soap *soap,
	int *CommandExecuteRetries,
	int *CommandExecuteRetriesDelay,
	ns7__ArrayOfAuxDevice *Devices,
	std::string *PortNumber)
{
	ns7__AuxControllerConfiguration *_p = ::soap_new_ns7__AuxControllerConfiguration(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns7__AuxControllerConfiguration::CommandExecuteRetries = CommandExecuteRetries;
		_p->ns7__AuxControllerConfiguration::CommandExecuteRetriesDelay = CommandExecuteRetriesDelay;
		_p->ns7__AuxControllerConfiguration::Devices = Devices;
		_p->ns7__AuxControllerConfiguration::PortNumber = PortNumber;
	}
	return _p;
}

inline int soap_write_ns7__AuxControllerConfiguration(struct soap *soap, ns7__AuxControllerConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxControllerConfiguration", p->soap_type() == SOAP_TYPE_ns7__AuxControllerConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns7__AuxControllerConfiguration(struct soap *soap, const char *URL, ns7__AuxControllerConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxControllerConfiguration", p->soap_type() == SOAP_TYPE_ns7__AuxControllerConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns7__AuxControllerConfiguration(struct soap *soap, const char *URL, ns7__AuxControllerConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxControllerConfiguration", p->soap_type() == SOAP_TYPE_ns7__AuxControllerConfiguration ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns7__AuxControllerConfiguration(struct soap *soap, const char *URL, ns7__AuxControllerConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns7:AuxControllerConfiguration", p->soap_type() == SOAP_TYPE_ns7__AuxControllerConfiguration ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns7__AuxControllerConfiguration * SOAP_FMAC4 soap_get_ns7__AuxControllerConfiguration(struct soap*, ns7__AuxControllerConfiguration *, const char*, const char*);

inline int soap_read_ns7__AuxControllerConfiguration(struct soap *soap, ns7__AuxControllerConfiguration *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns7__AuxControllerConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns7__AuxControllerConfiguration(struct soap *soap, const char *URL, ns7__AuxControllerConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns7__AuxControllerConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns7__AuxControllerConfiguration(struct soap *soap, ns7__AuxControllerConfiguration *p)
{
	if (::soap_read_ns7__AuxControllerConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns6__Aux2Config_DEFINED
#define SOAP_TYPE_ns6__Aux2Config_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__Aux2Config(struct soap*, const char*, int, const ns6__Aux2Config *, const char*);
SOAP_FMAC3 ns6__Aux2Config * SOAP_FMAC4 soap_in_ns6__Aux2Config(struct soap*, const char*, ns6__Aux2Config *, const char*);
SOAP_FMAC1 ns6__Aux2Config * SOAP_FMAC2 soap_instantiate_ns6__Aux2Config(struct soap*, int, const char*, const char*, size_t*);

inline ns6__Aux2Config * soap_new_ns6__Aux2Config(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns6__Aux2Config(soap, n, NULL, NULL, NULL);
}

inline ns6__Aux2Config * soap_new_req_ns6__Aux2Config(
	struct soap *soap)
{
	ns6__Aux2Config *_p = ::soap_new_ns6__Aux2Config(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns6__Aux2Config * soap_new_set_ns6__Aux2Config(
	struct soap *soap,
	std::string *PortNumber)
{
	ns6__Aux2Config *_p = ::soap_new_ns6__Aux2Config(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns6__Aux2Config::PortNumber = PortNumber;
	}
	return _p;
}

inline int soap_write_ns6__Aux2Config(struct soap *soap, ns6__Aux2Config const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:Aux2Config", p->soap_type() == SOAP_TYPE_ns6__Aux2Config ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns6__Aux2Config(struct soap *soap, const char *URL, ns6__Aux2Config const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:Aux2Config", p->soap_type() == SOAP_TYPE_ns6__Aux2Config ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns6__Aux2Config(struct soap *soap, const char *URL, ns6__Aux2Config const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:Aux2Config", p->soap_type() == SOAP_TYPE_ns6__Aux2Config ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns6__Aux2Config(struct soap *soap, const char *URL, ns6__Aux2Config const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns6:Aux2Config", p->soap_type() == SOAP_TYPE_ns6__Aux2Config ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns6__Aux2Config * SOAP_FMAC4 soap_get_ns6__Aux2Config(struct soap*, ns6__Aux2Config *, const char*, const char*);

inline int soap_read_ns6__Aux2Config(struct soap *soap, ns6__Aux2Config *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns6__Aux2Config(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns6__Aux2Config(struct soap *soap, const char *URL, ns6__Aux2Config *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns6__Aux2Config(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns6__Aux2Config(struct soap *soap, ns6__Aux2Config *p)
{
	if (::soap_read_ns6__Aux2Config(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns5__SystemConfigurations_DEFINED
#define SOAP_TYPE_ns5__SystemConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SystemConfigurations(struct soap*, const char*, int, const ns5__SystemConfigurations *, const char*);
SOAP_FMAC3 ns5__SystemConfigurations * SOAP_FMAC4 soap_in_ns5__SystemConfigurations(struct soap*, const char*, ns5__SystemConfigurations *, const char*);
SOAP_FMAC1 ns5__SystemConfigurations * SOAP_FMAC2 soap_instantiate_ns5__SystemConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SystemConfigurations * soap_new_ns5__SystemConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns5__SystemConfigurations(soap, n, NULL, NULL, NULL);
}

inline ns5__SystemConfigurations * soap_new_req_ns5__SystemConfigurations(
	struct soap *soap)
{
	ns5__SystemConfigurations *_p = ::soap_new_ns5__SystemConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns5__SystemConfigurations * soap_new_set_ns5__SystemConfigurations(
	struct soap *soap,
	ns4__ArrayOfAutoPlanItem *AutoPlanItems,
	bool *Aux2Device_USCOREActive,
	ns6__Aux2Config *Aux2Device_USCOREConfiguration,
	bool *AuxDevice_USCOREActive,
	ns7__AuxControllerConfiguration *AuxDevice_USCOREConfiguration,
	unsigned char *ChromatecDirectAnalyticSlaveAddress,
	unsigned char *ChromatecDirectPanelSlaveAddress,
	std::string *ChromatecMODBUSServiceAddress,
	bool *Clearing_USCOREUseCriticalZone,
	bool *Clearing_USCOREUseWaitTime,
	int *Clearing_USCOREWaitTimeSeconds,
	std::string *Common_USCOREConfiguratorPasswordHash,
	std::string *Common_USCOREConfiguratorPasswordSalt,
	enum ns8__Logger_x002eLogLevel *Common_USCORELogLevel,
	std::string *Common_USCOREServiceName,
	std::string *Common_USCOREWCFServicePrefix,
	std::string *Common_USCOREWindowTitle,
	ns4__ArrayOfControlledParametr *ControlledParametrs,
	ns4__ArrayOfMeasuringComponent *MeasuringComponents,
	ns4__ArrayOfOperation *Operations,
	bool *StopAutoPlanOnOperationError)
{
	ns5__SystemConfigurations *_p = ::soap_new_ns5__SystemConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns5__SystemConfigurations::AutoPlanItems = AutoPlanItems;
		_p->ns5__SystemConfigurations::Aux2Device_USCOREActive = Aux2Device_USCOREActive;
		_p->ns5__SystemConfigurations::Aux2Device_USCOREConfiguration = Aux2Device_USCOREConfiguration;
		_p->ns5__SystemConfigurations::AuxDevice_USCOREActive = AuxDevice_USCOREActive;
		_p->ns5__SystemConfigurations::AuxDevice_USCOREConfiguration = AuxDevice_USCOREConfiguration;
		_p->ns5__SystemConfigurations::ChromatecDirectAnalyticSlaveAddress = ChromatecDirectAnalyticSlaveAddress;
		_p->ns5__SystemConfigurations::ChromatecDirectPanelSlaveAddress = ChromatecDirectPanelSlaveAddress;
		_p->ns5__SystemConfigurations::ChromatecMODBUSServiceAddress = ChromatecMODBUSServiceAddress;
		_p->ns5__SystemConfigurations::Clearing_USCOREUseCriticalZone = Clearing_USCOREUseCriticalZone;
		_p->ns5__SystemConfigurations::Clearing_USCOREUseWaitTime = Clearing_USCOREUseWaitTime;
		_p->ns5__SystemConfigurations::Clearing_USCOREWaitTimeSeconds = Clearing_USCOREWaitTimeSeconds;
		_p->ns5__SystemConfigurations::Common_USCOREConfiguratorPasswordHash = Common_USCOREConfiguratorPasswordHash;
		_p->ns5__SystemConfigurations::Common_USCOREConfiguratorPasswordSalt = Common_USCOREConfiguratorPasswordSalt;
		_p->ns5__SystemConfigurations::Common_USCORELogLevel = Common_USCORELogLevel;
		_p->ns5__SystemConfigurations::Common_USCOREServiceName = Common_USCOREServiceName;
		_p->ns5__SystemConfigurations::Common_USCOREWCFServicePrefix = Common_USCOREWCFServicePrefix;
		_p->ns5__SystemConfigurations::Common_USCOREWindowTitle = Common_USCOREWindowTitle;
		_p->ns5__SystemConfigurations::ControlledParametrs = ControlledParametrs;
		_p->ns5__SystemConfigurations::MeasuringComponents = MeasuringComponents;
		_p->ns5__SystemConfigurations::Operations = Operations;
		_p->ns5__SystemConfigurations::StopAutoPlanOnOperationError = StopAutoPlanOnOperationError;
	}
	return _p;
}

inline int soap_write_ns5__SystemConfigurations(struct soap *soap, ns5__SystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SystemConfigurations", p->soap_type() == SOAP_TYPE_ns5__SystemConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns5__SystemConfigurations(struct soap *soap, const char *URL, ns5__SystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SystemConfigurations", p->soap_type() == SOAP_TYPE_ns5__SystemConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns5__SystemConfigurations(struct soap *soap, const char *URL, ns5__SystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SystemConfigurations", p->soap_type() == SOAP_TYPE_ns5__SystemConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns5__SystemConfigurations(struct soap *soap, const char *URL, ns5__SystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns5:SystemConfigurations", p->soap_type() == SOAP_TYPE_ns5__SystemConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns5__SystemConfigurations * SOAP_FMAC4 soap_get_ns5__SystemConfigurations(struct soap*, ns5__SystemConfigurations *, const char*, const char*);

inline int soap_read_ns5__SystemConfigurations(struct soap *soap, ns5__SystemConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns5__SystemConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns5__SystemConfigurations(struct soap *soap, const char *URL, ns5__SystemConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns5__SystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns5__SystemConfigurations(struct soap *soap, ns5__SystemConfigurations *p)
{
	if (::soap_read_ns5__SystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_arr__ArrayOfboolean_DEFINED
#define SOAP_TYPE_arr__ArrayOfboolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfboolean(struct soap*, const char*, int, const arr__ArrayOfboolean *, const char*);
SOAP_FMAC3 arr__ArrayOfboolean * SOAP_FMAC4 soap_in_arr__ArrayOfboolean(struct soap*, const char*, arr__ArrayOfboolean *, const char*);
SOAP_FMAC1 arr__ArrayOfboolean * SOAP_FMAC2 soap_instantiate_arr__ArrayOfboolean(struct soap*, int, const char*, const char*, size_t*);

inline arr__ArrayOfboolean * soap_new_arr__ArrayOfboolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_arr__ArrayOfboolean(soap, n, NULL, NULL, NULL);
}

inline arr__ArrayOfboolean * soap_new_req_arr__ArrayOfboolean(
	struct soap *soap)
{
	arr__ArrayOfboolean *_p = ::soap_new_arr__ArrayOfboolean(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline arr__ArrayOfboolean * soap_new_set_arr__ArrayOfboolean(
	struct soap *soap,
	const std::vector<bool> & boolean)
{
	arr__ArrayOfboolean *_p = ::soap_new_arr__ArrayOfboolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->arr__ArrayOfboolean::boolean = boolean;
	}
	return _p;
}

inline int soap_write_arr__ArrayOfboolean(struct soap *soap, arr__ArrayOfboolean const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfboolean", p->soap_type() == SOAP_TYPE_arr__ArrayOfboolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_arr__ArrayOfboolean(struct soap *soap, const char *URL, arr__ArrayOfboolean const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfboolean", p->soap_type() == SOAP_TYPE_arr__ArrayOfboolean ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_arr__ArrayOfboolean(struct soap *soap, const char *URL, arr__ArrayOfboolean const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfboolean", p->soap_type() == SOAP_TYPE_arr__ArrayOfboolean ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_arr__ArrayOfboolean(struct soap *soap, const char *URL, arr__ArrayOfboolean const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfboolean", p->soap_type() == SOAP_TYPE_arr__ArrayOfboolean ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 arr__ArrayOfboolean * SOAP_FMAC4 soap_get_arr__ArrayOfboolean(struct soap*, arr__ArrayOfboolean *, const char*, const char*);

inline int soap_read_arr__ArrayOfboolean(struct soap *soap, arr__ArrayOfboolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_arr__ArrayOfboolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_arr__ArrayOfboolean(struct soap *soap, const char *URL, arr__ArrayOfboolean *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_arr__ArrayOfboolean(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_arr__ArrayOfboolean(struct soap *soap, arr__ArrayOfboolean *p)
{
	if (::soap_read_arr__ArrayOfboolean(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_arr__ArrayOfstring_DEFINED
#define SOAP_TYPE_arr__ArrayOfstring_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_arr__ArrayOfstring(struct soap*, const char*, int, const arr__ArrayOfstring *, const char*);
SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_in_arr__ArrayOfstring(struct soap*, const char*, arr__ArrayOfstring *, const char*);
SOAP_FMAC1 arr__ArrayOfstring * SOAP_FMAC2 soap_instantiate_arr__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline arr__ArrayOfstring * soap_new_arr__ArrayOfstring(struct soap *soap, int n = -1)
{
	return soap_instantiate_arr__ArrayOfstring(soap, n, NULL, NULL, NULL);
}

inline arr__ArrayOfstring * soap_new_req_arr__ArrayOfstring(
	struct soap *soap)
{
	arr__ArrayOfstring *_p = ::soap_new_arr__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline arr__ArrayOfstring * soap_new_set_arr__ArrayOfstring(
	struct soap *soap,
	const std::vector<std::string> & string)
{
	arr__ArrayOfstring *_p = ::soap_new_arr__ArrayOfstring(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->arr__ArrayOfstring::string = string;
	}
	return _p;
}

inline int soap_write_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "arr:ArrayOfstring", p->soap_type() == SOAP_TYPE_arr__ArrayOfstring ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 arr__ArrayOfstring * SOAP_FMAC4 soap_get_arr__ArrayOfstring(struct soap*, arr__ArrayOfstring *, const char*, const char*);

inline int soap_read_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_arr__ArrayOfstring(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_arr__ArrayOfstring(struct soap *soap, const char *URL, arr__ArrayOfstring *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_arr__ArrayOfstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_arr__ArrayOfstring(struct soap *soap, arr__ArrayOfstring *p)
{
	if (::soap_read_arr__ArrayOfstring(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__OperationStep_x002eUsingControlledParametr_DEFINED
#define SOAP_TYPE_ns4__OperationStep_x002eUsingControlledParametr_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__OperationStep_x002eUsingControlledParametr(struct soap*, const char*, int, const ns4__OperationStep_x002eUsingControlledParametr *, const char*);
SOAP_FMAC3 ns4__OperationStep_x002eUsingControlledParametr * SOAP_FMAC4 soap_in_ns4__OperationStep_x002eUsingControlledParametr(struct soap*, const char*, ns4__OperationStep_x002eUsingControlledParametr *, const char*);
SOAP_FMAC1 ns4__OperationStep_x002eUsingControlledParametr * SOAP_FMAC2 soap_instantiate_ns4__OperationStep_x002eUsingControlledParametr(struct soap*, int, const char*, const char*, size_t*);

inline ns4__OperationStep_x002eUsingControlledParametr * soap_new_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__OperationStep_x002eUsingControlledParametr(soap, n, NULL, NULL, NULL);
}

inline ns4__OperationStep_x002eUsingControlledParametr * soap_new_req_ns4__OperationStep_x002eUsingControlledParametr(
	struct soap *soap)
{
	ns4__OperationStep_x002eUsingControlledParametr *_p = ::soap_new_ns4__OperationStep_x002eUsingControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__OperationStep_x002eUsingControlledParametr * soap_new_set_ns4__OperationStep_x002eUsingControlledParametr(
	struct soap *soap,
	bool *Active,
	std::string *ParamName)
{
	ns4__OperationStep_x002eUsingControlledParametr *_p = ::soap_new_ns4__OperationStep_x002eUsingControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__OperationStep_x002eUsingControlledParametr::Active = Active;
		_p->ns4__OperationStep_x002eUsingControlledParametr::ParamName = ParamName;
	}
	return _p;
}

inline int soap_write_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, ns4__OperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__OperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__OperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__OperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__OperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__OperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__OperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__OperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__OperationStep_x002eUsingControlledParametr * SOAP_FMAC4 soap_get_ns4__OperationStep_x002eUsingControlledParametr(struct soap*, ns4__OperationStep_x002eUsingControlledParametr *, const char*, const char*);

inline int soap_read_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, ns4__OperationStep_x002eUsingControlledParametr *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__OperationStep_x002eUsingControlledParametr(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__OperationStep_x002eUsingControlledParametr *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__OperationStep_x002eUsingControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__OperationStep_x002eUsingControlledParametr(struct soap *soap, ns4__OperationStep_x002eUsingControlledParametr *p)
{
	if (::soap_read_ns4__OperationStep_x002eUsingControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfOperationStep_x002eUsingControlledParametr_DEFINED
#define SOAP_TYPE_ns4__ArrayOfOperationStep_x002eUsingControlledParametr_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, const char*, int, const ns4__ArrayOfOperationStep_x002eUsingControlledParametr *, const char*);
SOAP_FMAC3 ns4__ArrayOfOperationStep_x002eUsingControlledParametr * SOAP_FMAC4 soap_in_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, const char*, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *, const char*);
SOAP_FMAC1 ns4__ArrayOfOperationStep_x002eUsingControlledParametr * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfOperationStep_x002eUsingControlledParametr * soap_new_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfOperationStep_x002eUsingControlledParametr * soap_new_req_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(
	struct soap *soap)
{
	ns4__ArrayOfOperationStep_x002eUsingControlledParametr *_p = ::soap_new_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfOperationStep_x002eUsingControlledParametr * soap_new_set_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(
	struct soap *soap,
	const std::vector<ns4__OperationStep_x002eUsingControlledParametr *> & OperationStep_x002eUsingControlledParametr)
{
	ns4__ArrayOfOperationStep_x002eUsingControlledParametr *_p = ::soap_new_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfOperationStep_x002eUsingControlledParametr::OperationStep_x002eUsingControlledParametr = OperationStep_x002eUsingControlledParametr;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, ns4__ArrayOfOperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep_x002eUsingControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep.UsingControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep_x002eUsingControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfOperationStep_x002eUsingControlledParametr * SOAP_FMAC4 soap_get_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *, const char*, const char*);

inline int soap_read_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap *soap, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *p)
{
	if (::soap_read_ns4__ArrayOfOperationStep_x002eUsingControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__OperationStep_DEFINED
#define SOAP_TYPE_ns4__OperationStep_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__OperationStep(struct soap*, const char*, int, const ns4__OperationStep *, const char*);
SOAP_FMAC3 ns4__OperationStep * SOAP_FMAC4 soap_in_ns4__OperationStep(struct soap*, const char*, ns4__OperationStep *, const char*);
SOAP_FMAC1 ns4__OperationStep * SOAP_FMAC2 soap_instantiate_ns4__OperationStep(struct soap*, int, const char*, const char*, size_t*);

inline ns4__OperationStep * soap_new_ns4__OperationStep(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__OperationStep(soap, n, NULL, NULL, NULL);
}

inline ns4__OperationStep * soap_new_req_ns4__OperationStep(
	struct soap *soap,
	int xsd__duration)
{
	ns4__OperationStep *_p = ::soap_new_ns4__OperationStep(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__OperationStep::xsd__duration = xsd__duration;
	}
	return _p;
}

inline ns4__OperationStep * soap_new_set_ns4__OperationStep(
	struct soap *soap,
	bool *Active,
	ns4__ArrayOfOperationStep_x002eUsingControlledParametr *ControlParams,
	int *Number,
	std::string *Params,
	enum ns9__ChromatographMode *RequiredChromMode,
	enum ns4__OperationStepTypes *StepType,
	std::string *Title,
	int xsd__duration,
	int *WaitBefore,
	LONG64 *WaitBeforeXml)
{
	ns4__OperationStep *_p = ::soap_new_ns4__OperationStep(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__OperationStep::Active = Active;
		_p->ns4__OperationStep::ControlParams = ControlParams;
		_p->ns4__OperationStep::Number = Number;
		_p->ns4__OperationStep::Params = Params;
		_p->ns4__OperationStep::RequiredChromMode = RequiredChromMode;
		_p->ns4__OperationStep::StepType = StepType;
		_p->ns4__OperationStep::Title = Title;
		_p->ns4__OperationStep::xsd__duration = xsd__duration;
		_p->ns4__OperationStep::WaitBefore = WaitBefore;
		_p->ns4__OperationStep::WaitBeforeXml = WaitBeforeXml;
	}
	return _p;
}

inline int soap_write_ns4__OperationStep(struct soap *soap, ns4__OperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep", p->soap_type() == SOAP_TYPE_ns4__OperationStep ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__OperationStep(struct soap *soap, const char *URL, ns4__OperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep", p->soap_type() == SOAP_TYPE_ns4__OperationStep ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__OperationStep(struct soap *soap, const char *URL, ns4__OperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep", p->soap_type() == SOAP_TYPE_ns4__OperationStep ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__OperationStep(struct soap *soap, const char *URL, ns4__OperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:OperationStep", p->soap_type() == SOAP_TYPE_ns4__OperationStep ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__OperationStep * SOAP_FMAC4 soap_get_ns4__OperationStep(struct soap*, ns4__OperationStep *, const char*, const char*);

inline int soap_read_ns4__OperationStep(struct soap *soap, ns4__OperationStep *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__OperationStep(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__OperationStep(struct soap *soap, const char *URL, ns4__OperationStep *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__OperationStep(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__OperationStep(struct soap *soap, ns4__OperationStep *p)
{
	if (::soap_read_ns4__OperationStep(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfOperationStep_DEFINED
#define SOAP_TYPE_ns4__ArrayOfOperationStep_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfOperationStep(struct soap*, const char*, int, const ns4__ArrayOfOperationStep *, const char*);
SOAP_FMAC3 ns4__ArrayOfOperationStep * SOAP_FMAC4 soap_in_ns4__ArrayOfOperationStep(struct soap*, const char*, ns4__ArrayOfOperationStep *, const char*);
SOAP_FMAC1 ns4__ArrayOfOperationStep * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfOperationStep(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfOperationStep * soap_new_ns4__ArrayOfOperationStep(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfOperationStep(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfOperationStep * soap_new_req_ns4__ArrayOfOperationStep(
	struct soap *soap)
{
	ns4__ArrayOfOperationStep *_p = ::soap_new_ns4__ArrayOfOperationStep(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfOperationStep * soap_new_set_ns4__ArrayOfOperationStep(
	struct soap *soap,
	const std::vector<ns4__OperationStep *> & OperationStep)
{
	ns4__ArrayOfOperationStep *_p = ::soap_new_ns4__ArrayOfOperationStep(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfOperationStep::OperationStep = OperationStep;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfOperationStep(struct soap *soap, ns4__ArrayOfOperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfOperationStep(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfOperationStep(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfOperationStep(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperationStep", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperationStep ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfOperationStep * SOAP_FMAC4 soap_get_ns4__ArrayOfOperationStep(struct soap*, ns4__ArrayOfOperationStep *, const char*, const char*);

inline int soap_read_ns4__ArrayOfOperationStep(struct soap *soap, ns4__ArrayOfOperationStep *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfOperationStep(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfOperationStep(struct soap *soap, const char *URL, ns4__ArrayOfOperationStep *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfOperationStep(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfOperationStep(struct soap *soap, ns4__ArrayOfOperationStep *p)
{
	if (::soap_read_ns4__ArrayOfOperationStep(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__Operation_DEFINED
#define SOAP_TYPE_ns4__Operation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Operation(struct soap*, const char*, int, const ns4__Operation *, const char*);
SOAP_FMAC3 ns4__Operation * SOAP_FMAC4 soap_in_ns4__Operation(struct soap*, const char*, ns4__Operation *, const char*);
SOAP_FMAC1 ns4__Operation * SOAP_FMAC2 soap_instantiate_ns4__Operation(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Operation * soap_new_ns4__Operation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Operation(soap, n, NULL, NULL, NULL);
}

inline ns4__Operation * soap_new_req_ns4__Operation(
	struct soap *soap)
{
	ns4__Operation *_p = ::soap_new_ns4__Operation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__Operation * soap_new_set_ns4__Operation(
	struct soap *soap,
	std::string *Name,
	ns4__ArrayOfOperationStep *OperationSteps,
	enum ns4__OperationTypes *OperationType,
	std::string *Title,
	bool *UserVisible)
{
	ns4__Operation *_p = ::soap_new_ns4__Operation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Operation::Name = Name;
		_p->ns4__Operation::OperationSteps = OperationSteps;
		_p->ns4__Operation::OperationType = OperationType;
		_p->ns4__Operation::Title = Title;
		_p->ns4__Operation::UserVisible = UserVisible;
	}
	return _p;
}

inline int soap_write_ns4__Operation(struct soap *soap, ns4__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Operation", p->soap_type() == SOAP_TYPE_ns4__Operation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__Operation(struct soap *soap, const char *URL, ns4__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Operation", p->soap_type() == SOAP_TYPE_ns4__Operation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__Operation(struct soap *soap, const char *URL, ns4__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Operation", p->soap_type() == SOAP_TYPE_ns4__Operation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__Operation(struct soap *soap, const char *URL, ns4__Operation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Operation", p->soap_type() == SOAP_TYPE_ns4__Operation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Operation * SOAP_FMAC4 soap_get_ns4__Operation(struct soap*, ns4__Operation *, const char*, const char*);

inline int soap_read_ns4__Operation(struct soap *soap, ns4__Operation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__Operation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__Operation(struct soap *soap, const char *URL, ns4__Operation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__Operation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__Operation(struct soap *soap, ns4__Operation *p)
{
	if (::soap_read_ns4__Operation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfOperation_DEFINED
#define SOAP_TYPE_ns4__ArrayOfOperation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfOperation(struct soap*, const char*, int, const ns4__ArrayOfOperation *, const char*);
SOAP_FMAC3 ns4__ArrayOfOperation * SOAP_FMAC4 soap_in_ns4__ArrayOfOperation(struct soap*, const char*, ns4__ArrayOfOperation *, const char*);
SOAP_FMAC1 ns4__ArrayOfOperation * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfOperation(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfOperation * soap_new_ns4__ArrayOfOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfOperation(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfOperation * soap_new_req_ns4__ArrayOfOperation(
	struct soap *soap)
{
	ns4__ArrayOfOperation *_p = ::soap_new_ns4__ArrayOfOperation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfOperation * soap_new_set_ns4__ArrayOfOperation(
	struct soap *soap,
	const std::vector<ns4__Operation *> & Operation)
{
	ns4__ArrayOfOperation *_p = ::soap_new_ns4__ArrayOfOperation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfOperation::Operation = Operation;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfOperation(struct soap *soap, ns4__ArrayOfOperation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperation", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfOperation(struct soap *soap, const char *URL, ns4__ArrayOfOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperation", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfOperation(struct soap *soap, const char *URL, ns4__ArrayOfOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperation", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfOperation(struct soap *soap, const char *URL, ns4__ArrayOfOperation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfOperation", p->soap_type() == SOAP_TYPE_ns4__ArrayOfOperation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfOperation * SOAP_FMAC4 soap_get_ns4__ArrayOfOperation(struct soap*, ns4__ArrayOfOperation *, const char*, const char*);

inline int soap_read_ns4__ArrayOfOperation(struct soap *soap, ns4__ArrayOfOperation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfOperation(struct soap *soap, const char *URL, ns4__ArrayOfOperation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfOperation(struct soap *soap, ns4__ArrayOfOperation *p)
{
	if (::soap_read_ns4__ArrayOfOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__MeasuringComponent_DEFINED
#define SOAP_TYPE_ns4__MeasuringComponent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__MeasuringComponent(struct soap*, const char*, int, const ns4__MeasuringComponent *, const char*);
SOAP_FMAC3 ns4__MeasuringComponent * SOAP_FMAC4 soap_in_ns4__MeasuringComponent(struct soap*, const char*, ns4__MeasuringComponent *, const char*);
SOAP_FMAC1 ns4__MeasuringComponent * SOAP_FMAC2 soap_instantiate_ns4__MeasuringComponent(struct soap*, int, const char*, const char*, size_t*);

inline ns4__MeasuringComponent * soap_new_ns4__MeasuringComponent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__MeasuringComponent(soap, n, NULL, NULL, NULL);
}

inline ns4__MeasuringComponent * soap_new_req_ns4__MeasuringComponent(
	struct soap *soap)
{
	ns4__MeasuringComponent *_p = ::soap_new_ns4__MeasuringComponent(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__MeasuringComponent * soap_new_set_ns4__MeasuringComponent(
	struct soap *soap,
	std::string *CASCode,
	int *Code,
	std::string *Control_USCOREAccuracy,
	std::string *Control_USCOREAccuracyStandardValue,
	std::string *Control_USCOREPeriodicity,
	std::string *Formula,
	std::string *Name,
	std::string *Register,
	std::string *UnitsName,
	unsigned char *ValueDigAfterPoint)
{
	ns4__MeasuringComponent *_p = ::soap_new_ns4__MeasuringComponent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__MeasuringComponent::CASCode = CASCode;
		_p->ns4__MeasuringComponent::Code = Code;
		_p->ns4__MeasuringComponent::Control_USCOREAccuracy = Control_USCOREAccuracy;
		_p->ns4__MeasuringComponent::Control_USCOREAccuracyStandardValue = Control_USCOREAccuracyStandardValue;
		_p->ns4__MeasuringComponent::Control_USCOREPeriodicity = Control_USCOREPeriodicity;
		_p->ns4__MeasuringComponent::Formula = Formula;
		_p->ns4__MeasuringComponent::Name = Name;
		_p->ns4__MeasuringComponent::Register = Register;
		_p->ns4__MeasuringComponent::UnitsName = UnitsName;
		_p->ns4__MeasuringComponent::ValueDigAfterPoint = ValueDigAfterPoint;
	}
	return _p;
}

inline int soap_write_ns4__MeasuringComponent(struct soap *soap, ns4__MeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:MeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__MeasuringComponent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__MeasuringComponent(struct soap *soap, const char *URL, ns4__MeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:MeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__MeasuringComponent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__MeasuringComponent(struct soap *soap, const char *URL, ns4__MeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:MeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__MeasuringComponent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__MeasuringComponent(struct soap *soap, const char *URL, ns4__MeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:MeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__MeasuringComponent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__MeasuringComponent * SOAP_FMAC4 soap_get_ns4__MeasuringComponent(struct soap*, ns4__MeasuringComponent *, const char*, const char*);

inline int soap_read_ns4__MeasuringComponent(struct soap *soap, ns4__MeasuringComponent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__MeasuringComponent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__MeasuringComponent(struct soap *soap, const char *URL, ns4__MeasuringComponent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__MeasuringComponent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__MeasuringComponent(struct soap *soap, ns4__MeasuringComponent *p)
{
	if (::soap_read_ns4__MeasuringComponent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfMeasuringComponent_DEFINED
#define SOAP_TYPE_ns4__ArrayOfMeasuringComponent_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfMeasuringComponent(struct soap*, const char*, int, const ns4__ArrayOfMeasuringComponent *, const char*);
SOAP_FMAC3 ns4__ArrayOfMeasuringComponent * SOAP_FMAC4 soap_in_ns4__ArrayOfMeasuringComponent(struct soap*, const char*, ns4__ArrayOfMeasuringComponent *, const char*);
SOAP_FMAC1 ns4__ArrayOfMeasuringComponent * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfMeasuringComponent(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfMeasuringComponent * soap_new_ns4__ArrayOfMeasuringComponent(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfMeasuringComponent(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfMeasuringComponent * soap_new_req_ns4__ArrayOfMeasuringComponent(
	struct soap *soap)
{
	ns4__ArrayOfMeasuringComponent *_p = ::soap_new_ns4__ArrayOfMeasuringComponent(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfMeasuringComponent * soap_new_set_ns4__ArrayOfMeasuringComponent(
	struct soap *soap,
	const std::vector<ns4__MeasuringComponent *> & MeasuringComponent)
{
	ns4__ArrayOfMeasuringComponent *_p = ::soap_new_ns4__ArrayOfMeasuringComponent(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfMeasuringComponent::MeasuringComponent = MeasuringComponent;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfMeasuringComponent(struct soap *soap, ns4__ArrayOfMeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfMeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__ArrayOfMeasuringComponent ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfMeasuringComponent(struct soap *soap, const char *URL, ns4__ArrayOfMeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfMeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__ArrayOfMeasuringComponent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfMeasuringComponent(struct soap *soap, const char *URL, ns4__ArrayOfMeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfMeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__ArrayOfMeasuringComponent ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfMeasuringComponent(struct soap *soap, const char *URL, ns4__ArrayOfMeasuringComponent const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfMeasuringComponent", p->soap_type() == SOAP_TYPE_ns4__ArrayOfMeasuringComponent ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfMeasuringComponent * SOAP_FMAC4 soap_get_ns4__ArrayOfMeasuringComponent(struct soap*, ns4__ArrayOfMeasuringComponent *, const char*, const char*);

inline int soap_read_ns4__ArrayOfMeasuringComponent(struct soap *soap, ns4__ArrayOfMeasuringComponent *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfMeasuringComponent(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfMeasuringComponent(struct soap *soap, const char *URL, ns4__ArrayOfMeasuringComponent *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfMeasuringComponent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfMeasuringComponent(struct soap *soap, ns4__ArrayOfMeasuringComponent *p)
{
	if (::soap_read_ns4__ArrayOfMeasuringComponent(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ControlledParametr_DEFINED
#define SOAP_TYPE_ns4__ControlledParametr_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ControlledParametr(struct soap*, const char*, int, const ns4__ControlledParametr *, const char*);
SOAP_FMAC3 ns4__ControlledParametr * SOAP_FMAC4 soap_in_ns4__ControlledParametr(struct soap*, const char*, ns4__ControlledParametr *, const char*);
SOAP_FMAC1 ns4__ControlledParametr * SOAP_FMAC2 soap_instantiate_ns4__ControlledParametr(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ControlledParametr * soap_new_ns4__ControlledParametr(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ControlledParametr(soap, n, NULL, NULL, NULL);
}

inline ns4__ControlledParametr * soap_new_req_ns4__ControlledParametr(
	struct soap *soap)
{
	ns4__ControlledParametr *_p = ::soap_new_ns4__ControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ControlledParametr * soap_new_set_ns4__ControlledParametr(
	struct soap *soap,
	std::string *ActionMessage,
	enum ns4__ControlledParametr_x002eControlActionType *ActionType,
	bool *Active,
	std::string *Condition,
	std::string *Formula,
	std::string *Name,
	bool *ShowUser,
	std::string *Title,
	std::string *UnitsName,
	unsigned char *ValueDigAfterPoint)
{
	ns4__ControlledParametr *_p = ::soap_new_ns4__ControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ControlledParametr::ActionMessage = ActionMessage;
		_p->ns4__ControlledParametr::ActionType = ActionType;
		_p->ns4__ControlledParametr::Active = Active;
		_p->ns4__ControlledParametr::Condition = Condition;
		_p->ns4__ControlledParametr::Formula = Formula;
		_p->ns4__ControlledParametr::Name = Name;
		_p->ns4__ControlledParametr::ShowUser = ShowUser;
		_p->ns4__ControlledParametr::Title = Title;
		_p->ns4__ControlledParametr::UnitsName = UnitsName;
		_p->ns4__ControlledParametr::ValueDigAfterPoint = ValueDigAfterPoint;
	}
	return _p;
}

inline int soap_write_ns4__ControlledParametr(struct soap *soap, ns4__ControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ControlledParametr(struct soap *soap, const char *URL, ns4__ControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ControlledParametr(struct soap *soap, const char *URL, ns4__ControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ControlledParametr(struct soap *soap, const char *URL, ns4__ControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ControlledParametr * SOAP_FMAC4 soap_get_ns4__ControlledParametr(struct soap*, ns4__ControlledParametr *, const char*, const char*);

inline int soap_read_ns4__ControlledParametr(struct soap *soap, ns4__ControlledParametr *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ControlledParametr(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ControlledParametr(struct soap *soap, const char *URL, ns4__ControlledParametr *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ControlledParametr(struct soap *soap, ns4__ControlledParametr *p)
{
	if (::soap_read_ns4__ControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfControlledParametr_DEFINED
#define SOAP_TYPE_ns4__ArrayOfControlledParametr_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfControlledParametr(struct soap*, const char*, int, const ns4__ArrayOfControlledParametr *, const char*);
SOAP_FMAC3 ns4__ArrayOfControlledParametr * SOAP_FMAC4 soap_in_ns4__ArrayOfControlledParametr(struct soap*, const char*, ns4__ArrayOfControlledParametr *, const char*);
SOAP_FMAC1 ns4__ArrayOfControlledParametr * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfControlledParametr(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfControlledParametr * soap_new_ns4__ArrayOfControlledParametr(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfControlledParametr(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfControlledParametr * soap_new_req_ns4__ArrayOfControlledParametr(
	struct soap *soap)
{
	ns4__ArrayOfControlledParametr *_p = ::soap_new_ns4__ArrayOfControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfControlledParametr * soap_new_set_ns4__ArrayOfControlledParametr(
	struct soap *soap,
	const std::vector<ns4__ControlledParametr *> & ControlledParametr)
{
	ns4__ArrayOfControlledParametr *_p = ::soap_new_ns4__ArrayOfControlledParametr(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfControlledParametr::ControlledParametr = ControlledParametr;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfControlledParametr(struct soap *soap, ns4__ArrayOfControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfControlledParametr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfControlledParametr const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfControlledParametr", p->soap_type() == SOAP_TYPE_ns4__ArrayOfControlledParametr ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfControlledParametr * SOAP_FMAC4 soap_get_ns4__ArrayOfControlledParametr(struct soap*, ns4__ArrayOfControlledParametr *, const char*, const char*);

inline int soap_read_ns4__ArrayOfControlledParametr(struct soap *soap, ns4__ArrayOfControlledParametr *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfControlledParametr(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfControlledParametr(struct soap *soap, const char *URL, ns4__ArrayOfControlledParametr *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfControlledParametr(struct soap *soap, ns4__ArrayOfControlledParametr *p)
{
	if (::soap_read_ns4__ArrayOfControlledParametr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__Periodicity_x002eTime_DEFINED
#define SOAP_TYPE_ns4__Periodicity_x002eTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Periodicity_x002eTime(struct soap*, const char*, int, const ns4__Periodicity_x002eTime *, const char*);
SOAP_FMAC3 ns4__Periodicity_x002eTime * SOAP_FMAC4 soap_in_ns4__Periodicity_x002eTime(struct soap*, const char*, ns4__Periodicity_x002eTime *, const char*);
SOAP_FMAC1 ns4__Periodicity_x002eTime * SOAP_FMAC2 soap_instantiate_ns4__Periodicity_x002eTime(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Periodicity_x002eTime * soap_new_ns4__Periodicity_x002eTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Periodicity_x002eTime(soap, n, NULL, NULL, NULL);
}

inline ns4__Periodicity_x002eTime * soap_new_req_ns4__Periodicity_x002eTime(
	struct soap *soap)
{
	ns4__Periodicity_x002eTime *_p = ::soap_new_ns4__Periodicity_x002eTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__Periodicity_x002eTime * soap_new_set_ns4__Periodicity_x002eTime(
	struct soap *soap,
	time_t *Value)
{
	ns4__Periodicity_x002eTime *_p = ::soap_new_ns4__Periodicity_x002eTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Periodicity_x002eTime::Value = Value;
	}
	return _p;
}

inline int soap_write_ns4__Periodicity_x002eTime(struct soap *soap, ns4__Periodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity.Time", p->soap_type() == SOAP_TYPE_ns4__Periodicity_x002eTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__Periodicity_x002eTime(struct soap *soap, const char *URL, ns4__Periodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity.Time", p->soap_type() == SOAP_TYPE_ns4__Periodicity_x002eTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__Periodicity_x002eTime(struct soap *soap, const char *URL, ns4__Periodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity.Time", p->soap_type() == SOAP_TYPE_ns4__Periodicity_x002eTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__Periodicity_x002eTime(struct soap *soap, const char *URL, ns4__Periodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity.Time", p->soap_type() == SOAP_TYPE_ns4__Periodicity_x002eTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Periodicity_x002eTime * SOAP_FMAC4 soap_get_ns4__Periodicity_x002eTime(struct soap*, ns4__Periodicity_x002eTime *, const char*, const char*);

inline int soap_read_ns4__Periodicity_x002eTime(struct soap *soap, ns4__Periodicity_x002eTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__Periodicity_x002eTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__Periodicity_x002eTime(struct soap *soap, const char *URL, ns4__Periodicity_x002eTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__Periodicity_x002eTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__Periodicity_x002eTime(struct soap *soap, ns4__Periodicity_x002eTime *p)
{
	if (::soap_read_ns4__Periodicity_x002eTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfPeriodicity_x002eTime_DEFINED
#define SOAP_TYPE_ns4__ArrayOfPeriodicity_x002eTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfPeriodicity_x002eTime(struct soap*, const char*, int, const ns4__ArrayOfPeriodicity_x002eTime *, const char*);
SOAP_FMAC3 ns4__ArrayOfPeriodicity_x002eTime * SOAP_FMAC4 soap_in_ns4__ArrayOfPeriodicity_x002eTime(struct soap*, const char*, ns4__ArrayOfPeriodicity_x002eTime *, const char*);
SOAP_FMAC1 ns4__ArrayOfPeriodicity_x002eTime * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfPeriodicity_x002eTime(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfPeriodicity_x002eTime * soap_new_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfPeriodicity_x002eTime(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfPeriodicity_x002eTime * soap_new_req_ns4__ArrayOfPeriodicity_x002eTime(
	struct soap *soap)
{
	ns4__ArrayOfPeriodicity_x002eTime *_p = ::soap_new_ns4__ArrayOfPeriodicity_x002eTime(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfPeriodicity_x002eTime * soap_new_set_ns4__ArrayOfPeriodicity_x002eTime(
	struct soap *soap,
	const std::vector<ns4__Periodicity_x002eTime *> & Periodicity_x002eTime)
{
	ns4__ArrayOfPeriodicity_x002eTime *_p = ::soap_new_ns4__ArrayOfPeriodicity_x002eTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfPeriodicity_x002eTime::Periodicity_x002eTime = Periodicity_x002eTime;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, ns4__ArrayOfPeriodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfPeriodicity.Time", p->soap_type() == SOAP_TYPE_ns4__ArrayOfPeriodicity_x002eTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, const char *URL, ns4__ArrayOfPeriodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfPeriodicity.Time", p->soap_type() == SOAP_TYPE_ns4__ArrayOfPeriodicity_x002eTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, const char *URL, ns4__ArrayOfPeriodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfPeriodicity.Time", p->soap_type() == SOAP_TYPE_ns4__ArrayOfPeriodicity_x002eTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, const char *URL, ns4__ArrayOfPeriodicity_x002eTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfPeriodicity.Time", p->soap_type() == SOAP_TYPE_ns4__ArrayOfPeriodicity_x002eTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfPeriodicity_x002eTime * SOAP_FMAC4 soap_get_ns4__ArrayOfPeriodicity_x002eTime(struct soap*, ns4__ArrayOfPeriodicity_x002eTime *, const char*, const char*);

inline int soap_read_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, ns4__ArrayOfPeriodicity_x002eTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfPeriodicity_x002eTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, const char *URL, ns4__ArrayOfPeriodicity_x002eTime *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfPeriodicity_x002eTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfPeriodicity_x002eTime(struct soap *soap, ns4__ArrayOfPeriodicity_x002eTime *p)
{
	if (::soap_read_ns4__ArrayOfPeriodicity_x002eTime(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__Periodicity_DEFINED
#define SOAP_TYPE_ns4__Periodicity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Periodicity(struct soap*, const char*, int, const ns4__Periodicity *, const char*);
SOAP_FMAC3 ns4__Periodicity * SOAP_FMAC4 soap_in_ns4__Periodicity(struct soap*, const char*, ns4__Periodicity *, const char*);
SOAP_FMAC1 ns4__Periodicity * SOAP_FMAC2 soap_instantiate_ns4__Periodicity(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Periodicity * soap_new_ns4__Periodicity(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Periodicity(soap, n, NULL, NULL, NULL);
}

inline ns4__Periodicity * soap_new_req_ns4__Periodicity(
	struct soap *soap)
{
	ns4__Periodicity *_p = ::soap_new_ns4__Periodicity(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__Periodicity * soap_new_set_ns4__Periodicity(
	struct soap *soap,
	arr__ArrayOfboolean *Months,
	ns4__ArrayOfPeriodicity_x002eTime *Times,
	arr__ArrayOfboolean *WeekDays,
	arr__ArrayOfboolean *Weeks)
{
	ns4__Periodicity *_p = ::soap_new_ns4__Periodicity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__Periodicity::Months = Months;
		_p->ns4__Periodicity::Times = Times;
		_p->ns4__Periodicity::WeekDays = WeekDays;
		_p->ns4__Periodicity::Weeks = Weeks;
	}
	return _p;
}

inline int soap_write_ns4__Periodicity(struct soap *soap, ns4__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity", p->soap_type() == SOAP_TYPE_ns4__Periodicity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__Periodicity(struct soap *soap, const char *URL, ns4__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity", p->soap_type() == SOAP_TYPE_ns4__Periodicity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__Periodicity(struct soap *soap, const char *URL, ns4__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity", p->soap_type() == SOAP_TYPE_ns4__Periodicity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__Periodicity(struct soap *soap, const char *URL, ns4__Periodicity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:Periodicity", p->soap_type() == SOAP_TYPE_ns4__Periodicity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__Periodicity * SOAP_FMAC4 soap_get_ns4__Periodicity(struct soap*, ns4__Periodicity *, const char*, const char*);

inline int soap_read_ns4__Periodicity(struct soap *soap, ns4__Periodicity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__Periodicity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__Periodicity(struct soap *soap, const char *URL, ns4__Periodicity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__Periodicity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__Periodicity(struct soap *soap, ns4__Periodicity *p)
{
	if (::soap_read_ns4__Periodicity(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__AutoPlanItem_DEFINED
#define SOAP_TYPE_ns4__AutoPlanItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__AutoPlanItem(struct soap*, const char*, int, const ns4__AutoPlanItem *, const char*);
SOAP_FMAC3 ns4__AutoPlanItem * SOAP_FMAC4 soap_in_ns4__AutoPlanItem(struct soap*, const char*, ns4__AutoPlanItem *, const char*);
SOAP_FMAC1 ns4__AutoPlanItem * SOAP_FMAC2 soap_instantiate_ns4__AutoPlanItem(struct soap*, int, const char*, const char*, size_t*);

inline ns4__AutoPlanItem * soap_new_ns4__AutoPlanItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__AutoPlanItem(soap, n, NULL, NULL, NULL);
}

inline ns4__AutoPlanItem * soap_new_req_ns4__AutoPlanItem(
	struct soap *soap)
{
	ns4__AutoPlanItem *_p = ::soap_new_ns4__AutoPlanItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__AutoPlanItem * soap_new_set_ns4__AutoPlanItem(
	struct soap *soap,
	bool *Active,
	ns4__Periodicity *ItemPeriodicity,
	std::string *OperationName)
{
	ns4__AutoPlanItem *_p = ::soap_new_ns4__AutoPlanItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__AutoPlanItem::Active = Active;
		_p->ns4__AutoPlanItem::ItemPeriodicity = ItemPeriodicity;
		_p->ns4__AutoPlanItem::OperationName = OperationName;
	}
	return _p;
}

inline int soap_write_ns4__AutoPlanItem(struct soap *soap, ns4__AutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:AutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__AutoPlanItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__AutoPlanItem(struct soap *soap, const char *URL, ns4__AutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:AutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__AutoPlanItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__AutoPlanItem(struct soap *soap, const char *URL, ns4__AutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:AutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__AutoPlanItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__AutoPlanItem(struct soap *soap, const char *URL, ns4__AutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:AutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__AutoPlanItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__AutoPlanItem * SOAP_FMAC4 soap_get_ns4__AutoPlanItem(struct soap*, ns4__AutoPlanItem *, const char*, const char*);

inline int soap_read_ns4__AutoPlanItem(struct soap *soap, ns4__AutoPlanItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__AutoPlanItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__AutoPlanItem(struct soap *soap, const char *URL, ns4__AutoPlanItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__AutoPlanItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__AutoPlanItem(struct soap *soap, ns4__AutoPlanItem *p)
{
	if (::soap_read_ns4__AutoPlanItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ArrayOfAutoPlanItem_DEFINED
#define SOAP_TYPE_ns4__ArrayOfAutoPlanItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfAutoPlanItem(struct soap*, const char*, int, const ns4__ArrayOfAutoPlanItem *, const char*);
SOAP_FMAC3 ns4__ArrayOfAutoPlanItem * SOAP_FMAC4 soap_in_ns4__ArrayOfAutoPlanItem(struct soap*, const char*, ns4__ArrayOfAutoPlanItem *, const char*);
SOAP_FMAC1 ns4__ArrayOfAutoPlanItem * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfAutoPlanItem(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfAutoPlanItem * soap_new_ns4__ArrayOfAutoPlanItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ArrayOfAutoPlanItem(soap, n, NULL, NULL, NULL);
}

inline ns4__ArrayOfAutoPlanItem * soap_new_req_ns4__ArrayOfAutoPlanItem(
	struct soap *soap)
{
	ns4__ArrayOfAutoPlanItem *_p = ::soap_new_ns4__ArrayOfAutoPlanItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns4__ArrayOfAutoPlanItem * soap_new_set_ns4__ArrayOfAutoPlanItem(
	struct soap *soap,
	const std::vector<ns4__AutoPlanItem *> & AutoPlanItem)
{
	ns4__ArrayOfAutoPlanItem *_p = ::soap_new_ns4__ArrayOfAutoPlanItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns4__ArrayOfAutoPlanItem::AutoPlanItem = AutoPlanItem;
	}
	return _p;
}

inline int soap_write_ns4__ArrayOfAutoPlanItem(struct soap *soap, ns4__ArrayOfAutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfAutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__ArrayOfAutoPlanItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ArrayOfAutoPlanItem(struct soap *soap, const char *URL, ns4__ArrayOfAutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfAutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__ArrayOfAutoPlanItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ArrayOfAutoPlanItem(struct soap *soap, const char *URL, ns4__ArrayOfAutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfAutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__ArrayOfAutoPlanItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ArrayOfAutoPlanItem(struct soap *soap, const char *URL, ns4__ArrayOfAutoPlanItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns4:ArrayOfAutoPlanItem", p->soap_type() == SOAP_TYPE_ns4__ArrayOfAutoPlanItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns4__ArrayOfAutoPlanItem * SOAP_FMAC4 soap_get_ns4__ArrayOfAutoPlanItem(struct soap*, ns4__ArrayOfAutoPlanItem *, const char*, const char*);

inline int soap_read_ns4__ArrayOfAutoPlanItem(struct soap *soap, ns4__ArrayOfAutoPlanItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ArrayOfAutoPlanItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ArrayOfAutoPlanItem(struct soap *soap, const char *URL, ns4__ArrayOfAutoPlanItem *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ArrayOfAutoPlanItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ArrayOfAutoPlanItem(struct soap *soap, ns4__ArrayOfAutoPlanItem *p)
{
	if (::soap_read_ns4__ArrayOfAutoPlanItem(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfo_DEFINED
#define SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, int, const ns3__OperationProcInfo_x002eOperationStepInfo *, const char*);
SOAP_FMAC3 ns3__OperationProcInfo_x002eOperationStepInfo * SOAP_FMAC4 soap_in_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, ns3__OperationProcInfo_x002eOperationStepInfo *, const char*);
SOAP_FMAC1 ns3__OperationProcInfo_x002eOperationStepInfo * SOAP_FMAC2 soap_instantiate_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OperationProcInfo_x002eOperationStepInfo * soap_new_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OperationProcInfo_x002eOperationStepInfo(soap, n, NULL, NULL, NULL);
}

inline ns3__OperationProcInfo_x002eOperationStepInfo * soap_new_req_ns3__OperationProcInfo_x002eOperationStepInfo(
	struct soap *soap)
{
	ns3__OperationProcInfo_x002eOperationStepInfo *_p = ::soap_new_ns3__OperationProcInfo_x002eOperationStepInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OperationProcInfo_x002eOperationStepInfo * soap_new_set_ns3__OperationProcInfo_x002eOperationStepInfo(
	struct soap *soap,
	time_t *BeginDateTime,
	std::string *Description,
	double *ElapsedMilliseconds,
	time_t *EndDateTime,
	enum ns3__OperationProcInfo_x002eOperationStepInfoStates *State,
	enum ns4__OperationStepTypes *StepType,
	std::string *SysTitle,
	std::string *Title)
{
	ns3__OperationProcInfo_x002eOperationStepInfo *_p = ::soap_new_ns3__OperationProcInfo_x002eOperationStepInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::BeginDateTime = BeginDateTime;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::Description = Description;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::ElapsedMilliseconds = ElapsedMilliseconds;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::EndDateTime = EndDateTime;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::State = State;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::StepType = StepType;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::SysTitle = SysTitle;
		_p->ns3__OperationProcInfo_x002eOperationStepInfo::Title = Title;
	}
	return _p;
}

inline int soap_write_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, ns3__OperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OperationProcInfo_x002eOperationStepInfo * SOAP_FMAC4 soap_get_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__OperationProcInfo_x002eOperationStepInfo *, const char*, const char*);

inline int soap_read_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, ns3__OperationProcInfo_x002eOperationStepInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__OperationProcInfo_x002eOperationStepInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eOperationStepInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__OperationProcInfo_x002eOperationStepInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, ns3__OperationProcInfo_x002eOperationStepInfo *p)
{
	if (::soap_read_ns3__OperationProcInfo_x002eOperationStepInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo_DEFINED
#define SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, int, const ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *, const char*);
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo * SOAP_FMAC4 soap_in_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *, const char*);
SOAP_FMAC1 ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo * soap_new_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo * soap_new_req_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(
	struct soap *soap)
{
	ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *_p = ::soap_new_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo * soap_new_set_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(
	struct soap *soap,
	const std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *> & OperationProcInfo_x002eOperationStepInfo)
{
	ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *_p = ::soap_new_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo::OperationProcInfo_x002eOperationStepInfo = OperationProcInfo_x002eOperationStepInfo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.OperationStepInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo * SOAP_FMAC4 soap_get_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap *soap, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *p)
{
	if (::soap_read_ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__OperationProcInfo_x002eControlParamInfo_DEFINED
#define SOAP_TYPE_ns3__OperationProcInfo_x002eControlParamInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OperationProcInfo_x002eControlParamInfo(struct soap*, const char*, int, const ns3__OperationProcInfo_x002eControlParamInfo *, const char*);
SOAP_FMAC3 ns3__OperationProcInfo_x002eControlParamInfo * SOAP_FMAC4 soap_in_ns3__OperationProcInfo_x002eControlParamInfo(struct soap*, const char*, ns3__OperationProcInfo_x002eControlParamInfo *, const char*);
SOAP_FMAC1 ns3__OperationProcInfo_x002eControlParamInfo * SOAP_FMAC2 soap_instantiate_ns3__OperationProcInfo_x002eControlParamInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OperationProcInfo_x002eControlParamInfo * soap_new_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OperationProcInfo_x002eControlParamInfo(soap, n, NULL, NULL, NULL);
}

inline ns3__OperationProcInfo_x002eControlParamInfo * soap_new_req_ns3__OperationProcInfo_x002eControlParamInfo(
	struct soap *soap)
{
	ns3__OperationProcInfo_x002eControlParamInfo *_p = ::soap_new_ns3__OperationProcInfo_x002eControlParamInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OperationProcInfo_x002eControlParamInfo * soap_new_set_ns3__OperationProcInfo_x002eControlParamInfo(
	struct soap *soap,
	std::string *Condition,
	bool *Ok,
	std::string *Title,
	std::string *Value)
{
	ns3__OperationProcInfo_x002eControlParamInfo *_p = ::soap_new_ns3__OperationProcInfo_x002eControlParamInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OperationProcInfo_x002eControlParamInfo::Condition = Condition;
		_p->ns3__OperationProcInfo_x002eControlParamInfo::Ok = Ok;
		_p->ns3__OperationProcInfo_x002eControlParamInfo::Title = Title;
		_p->ns3__OperationProcInfo_x002eControlParamInfo::Value = Value;
	}
	return _p;
}

inline int soap_write_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, ns3__OperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OperationProcInfo_x002eControlParamInfo * SOAP_FMAC4 soap_get_ns3__OperationProcInfo_x002eControlParamInfo(struct soap*, ns3__OperationProcInfo_x002eControlParamInfo *, const char*, const char*);

inline int soap_read_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, ns3__OperationProcInfo_x002eControlParamInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__OperationProcInfo_x002eControlParamInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo_x002eControlParamInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__OperationProcInfo_x002eControlParamInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, ns3__OperationProcInfo_x002eControlParamInfo *p)
{
	if (::soap_read_ns3__OperationProcInfo_x002eControlParamInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo_DEFINED
#define SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, const char*, int, const ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *, const char*);
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eControlParamInfo * SOAP_FMAC4 soap_in_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, const char*, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *, const char*);
SOAP_FMAC1 ns3__ArrayOfOperationProcInfo_x002eControlParamInfo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfOperationProcInfo_x002eControlParamInfo * soap_new_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfOperationProcInfo_x002eControlParamInfo * soap_new_req_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(
	struct soap *soap)
{
	ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *_p = ::soap_new_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfOperationProcInfo_x002eControlParamInfo * soap_new_set_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(
	struct soap *soap,
	const std::vector<ns3__OperationProcInfo_x002eControlParamInfo *> & OperationProcInfo_x002eControlParamInfo)
{
	ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *_p = ::soap_new_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfOperationProcInfo_x002eControlParamInfo::OperationProcInfo_x002eControlParamInfo = OperationProcInfo_x002eControlParamInfo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOperationProcInfo.ControlParamInfo", p->soap_type() == SOAP_TYPE_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eControlParamInfo * SOAP_FMAC4 soap_get_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, const char *URL, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap *soap, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *p)
{
	if (::soap_read_ns3__ArrayOfOperationProcInfo_x002eControlParamInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__OperationProcInfo_DEFINED
#define SOAP_TYPE_ns3__OperationProcInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OperationProcInfo(struct soap*, const char*, int, const ns3__OperationProcInfo *, const char*);
SOAP_FMAC3 ns3__OperationProcInfo * SOAP_FMAC4 soap_in_ns3__OperationProcInfo(struct soap*, const char*, ns3__OperationProcInfo *, const char*);
SOAP_FMAC1 ns3__OperationProcInfo * SOAP_FMAC2 soap_instantiate_ns3__OperationProcInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OperationProcInfo * soap_new_ns3__OperationProcInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OperationProcInfo(soap, n, NULL, NULL, NULL);
}

inline ns3__OperationProcInfo * soap_new_req_ns3__OperationProcInfo(
	struct soap *soap)
{
	ns3__OperationProcInfo *_p = ::soap_new_ns3__OperationProcInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OperationProcInfo * soap_new_set_ns3__OperationProcInfo(
	struct soap *soap,
	std::string *AuxDevicesStatus,
	time_t *BeginDateTime,
	ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *ControlParams,
	time_t *EndDateTime,
	ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *OperationStepsInfo,
	std::string *OperationTitle,
	arr__ArrayOfstring *PanelErrors,
	std::string *PanelMode,
	std::string *PanelStatus)
{
	ns3__OperationProcInfo *_p = ::soap_new_ns3__OperationProcInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OperationProcInfo::AuxDevicesStatus = AuxDevicesStatus;
		_p->ns3__OperationProcInfo::BeginDateTime = BeginDateTime;
		_p->ns3__OperationProcInfo::ControlParams = ControlParams;
		_p->ns3__OperationProcInfo::EndDateTime = EndDateTime;
		_p->ns3__OperationProcInfo::OperationStepsInfo = OperationStepsInfo;
		_p->ns3__OperationProcInfo::OperationTitle = OperationTitle;
		_p->ns3__OperationProcInfo::PanelErrors = PanelErrors;
		_p->ns3__OperationProcInfo::PanelMode = PanelMode;
		_p->ns3__OperationProcInfo::PanelStatus = PanelStatus;
	}
	return _p;
}

inline int soap_write_ns3__OperationProcInfo(struct soap *soap, ns3__OperationProcInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OperationProcInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__OperationProcInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OperationProcInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OperationProcInfo", p->soap_type() == SOAP_TYPE_ns3__OperationProcInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OperationProcInfo * SOAP_FMAC4 soap_get_ns3__OperationProcInfo(struct soap*, ns3__OperationProcInfo *, const char*, const char*);

inline int soap_read_ns3__OperationProcInfo(struct soap *soap, ns3__OperationProcInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__OperationProcInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OperationProcInfo(struct soap *soap, const char *URL, ns3__OperationProcInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__OperationProcInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__OperationProcInfo(struct soap *soap, ns3__OperationProcInfo *p)
{
	if (::soap_read_ns3__OperationProcInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__ProcessingInfo_DEFINED
#define SOAP_TYPE_ns3__ProcessingInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ProcessingInfo(struct soap*, const char*, int, const ns3__ProcessingInfo *, const char*);
SOAP_FMAC3 ns3__ProcessingInfo * SOAP_FMAC4 soap_in_ns3__ProcessingInfo(struct soap*, const char*, ns3__ProcessingInfo *, const char*);
SOAP_FMAC1 ns3__ProcessingInfo * SOAP_FMAC2 soap_instantiate_ns3__ProcessingInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ProcessingInfo * soap_new_ns3__ProcessingInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ProcessingInfo(soap, n, NULL, NULL, NULL);
}

inline ns3__ProcessingInfo * soap_new_req_ns3__ProcessingInfo(
	struct soap *soap)
{
	ns3__ProcessingInfo *_p = ::soap_new_ns3__ProcessingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ProcessingInfo * soap_new_set_ns3__ProcessingInfo(
	struct soap *soap,
	time_t *CurrentDateTime,
	bool *IgnoreClearing,
	ns3__OperationProcInfo *OperationInfo,
	enum ns3__ProcessingModes *ProcessingMode)
{
	ns3__ProcessingInfo *_p = ::soap_new_ns3__ProcessingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ProcessingInfo::CurrentDateTime = CurrentDateTime;
		_p->ns3__ProcessingInfo::IgnoreClearing = IgnoreClearing;
		_p->ns3__ProcessingInfo::OperationInfo = OperationInfo;
		_p->ns3__ProcessingInfo::ProcessingMode = ProcessingMode;
	}
	return _p;
}

inline int soap_write_ns3__ProcessingInfo(struct soap *soap, ns3__ProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ProcessingInfo", p->soap_type() == SOAP_TYPE_ns3__ProcessingInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ProcessingInfo(struct soap *soap, const char *URL, ns3__ProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ProcessingInfo", p->soap_type() == SOAP_TYPE_ns3__ProcessingInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ProcessingInfo(struct soap *soap, const char *URL, ns3__ProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ProcessingInfo", p->soap_type() == SOAP_TYPE_ns3__ProcessingInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ProcessingInfo(struct soap *soap, const char *URL, ns3__ProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ProcessingInfo", p->soap_type() == SOAP_TYPE_ns3__ProcessingInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ProcessingInfo * SOAP_FMAC4 soap_get_ns3__ProcessingInfo(struct soap*, ns3__ProcessingInfo *, const char*, const char*);

inline int soap_read_ns3__ProcessingInfo(struct soap *soap, ns3__ProcessingInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__ProcessingInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ProcessingInfo(struct soap *soap, const char *URL, ns3__ProcessingInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__ProcessingInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ProcessingInfo(struct soap *soap, ns3__ProcessingInfo *p)
{
	if (::soap_read_ns3__ProcessingInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetEventsSinceIdResponse_DEFINED
#define SOAP_TYPE__ns2__GetEventsSinceIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetEventsSinceIdResponse(struct soap*, const char*, int, const _ns2__GetEventsSinceIdResponse *, const char*);
SOAP_FMAC3 _ns2__GetEventsSinceIdResponse * SOAP_FMAC4 soap_in__ns2__GetEventsSinceIdResponse(struct soap*, const char*, _ns2__GetEventsSinceIdResponse *, const char*);
SOAP_FMAC1 _ns2__GetEventsSinceIdResponse * SOAP_FMAC2 soap_instantiate__ns2__GetEventsSinceIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetEventsSinceIdResponse * soap_new__ns2__GetEventsSinceIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetEventsSinceIdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetEventsSinceIdResponse * soap_new_req__ns2__GetEventsSinceIdResponse(
	struct soap *soap)
{
	_ns2__GetEventsSinceIdResponse *_p = ::soap_new__ns2__GetEventsSinceIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetEventsSinceIdResponse * soap_new_set__ns2__GetEventsSinceIdResponse(
	struct soap *soap,
	ns10__ArrayOfEEvent *GetEventsSinceIdResult)
{
	_ns2__GetEventsSinceIdResponse *_p = ::soap_new__ns2__GetEventsSinceIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetEventsSinceIdResponse::GetEventsSinceIdResult = GetEventsSinceIdResult;
	}
	return _p;
}

inline int soap_write__ns2__GetEventsSinceIdResponse(struct soap *soap, _ns2__GetEventsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetEventsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetEventsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetEventsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetEventsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetEventsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetEventsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetEventsSinceIdResponse * SOAP_FMAC4 soap_get__ns2__GetEventsSinceIdResponse(struct soap*, _ns2__GetEventsSinceIdResponse *, const char*, const char*);

inline int soap_read__ns2__GetEventsSinceIdResponse(struct soap *soap, _ns2__GetEventsSinceIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetEventsSinceIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetEventsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetEventsSinceIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetEventsSinceIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetEventsSinceIdResponse(struct soap *soap, _ns2__GetEventsSinceIdResponse *p)
{
	if (::soap_read__ns2__GetEventsSinceIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetEventsSinceId_DEFINED
#define SOAP_TYPE__ns2__GetEventsSinceId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetEventsSinceId(struct soap*, const char*, int, const _ns2__GetEventsSinceId *, const char*);
SOAP_FMAC3 _ns2__GetEventsSinceId * SOAP_FMAC4 soap_in__ns2__GetEventsSinceId(struct soap*, const char*, _ns2__GetEventsSinceId *, const char*);
SOAP_FMAC1 _ns2__GetEventsSinceId * SOAP_FMAC2 soap_instantiate__ns2__GetEventsSinceId(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetEventsSinceId * soap_new__ns2__GetEventsSinceId(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetEventsSinceId(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetEventsSinceId * soap_new_req__ns2__GetEventsSinceId(
	struct soap *soap)
{
	_ns2__GetEventsSinceId *_p = ::soap_new__ns2__GetEventsSinceId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetEventsSinceId * soap_new_set__ns2__GetEventsSinceId(
	struct soap *soap,
	int *lastId)
{
	_ns2__GetEventsSinceId *_p = ::soap_new__ns2__GetEventsSinceId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetEventsSinceId::lastId = lastId;
	}
	return _p;
}

inline int soap_write__ns2__GetEventsSinceId(struct soap *soap, _ns2__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetEventsSinceId(struct soap *soap, const char *URL, _ns2__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetEventsSinceId(struct soap *soap, const char *URL, _ns2__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetEventsSinceId(struct soap *soap, const char *URL, _ns2__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetEventsSinceId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetEventsSinceId * SOAP_FMAC4 soap_get__ns2__GetEventsSinceId(struct soap*, _ns2__GetEventsSinceId *, const char*, const char*);

inline int soap_read__ns2__GetEventsSinceId(struct soap *soap, _ns2__GetEventsSinceId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetEventsSinceId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetEventsSinceId(struct soap *soap, const char *URL, _ns2__GetEventsSinceId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetEventsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetEventsSinceId(struct soap *soap, _ns2__GetEventsSinceId *p)
{
	if (::soap_read__ns2__GetEventsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetLastEventIdResponse_DEFINED
#define SOAP_TYPE__ns2__GetLastEventIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetLastEventIdResponse(struct soap*, const char*, int, const _ns2__GetLastEventIdResponse *, const char*);
SOAP_FMAC3 _ns2__GetLastEventIdResponse * SOAP_FMAC4 soap_in__ns2__GetLastEventIdResponse(struct soap*, const char*, _ns2__GetLastEventIdResponse *, const char*);
SOAP_FMAC1 _ns2__GetLastEventIdResponse * SOAP_FMAC2 soap_instantiate__ns2__GetLastEventIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetLastEventIdResponse * soap_new__ns2__GetLastEventIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetLastEventIdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetLastEventIdResponse * soap_new_req__ns2__GetLastEventIdResponse(
	struct soap *soap)
{
	_ns2__GetLastEventIdResponse *_p = ::soap_new__ns2__GetLastEventIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetLastEventIdResponse * soap_new_set__ns2__GetLastEventIdResponse(
	struct soap *soap,
	int *GetLastEventIdResult)
{
	_ns2__GetLastEventIdResponse *_p = ::soap_new__ns2__GetLastEventIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetLastEventIdResponse::GetLastEventIdResult = GetLastEventIdResult;
	}
	return _p;
}

inline int soap_write__ns2__GetLastEventIdResponse(struct soap *soap, _ns2__GetLastEventIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastEventIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetLastEventIdResponse(struct soap *soap, const char *URL, _ns2__GetLastEventIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastEventIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetLastEventIdResponse(struct soap *soap, const char *URL, _ns2__GetLastEventIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastEventIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetLastEventIdResponse(struct soap *soap, const char *URL, _ns2__GetLastEventIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastEventIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetLastEventIdResponse * SOAP_FMAC4 soap_get__ns2__GetLastEventIdResponse(struct soap*, _ns2__GetLastEventIdResponse *, const char*, const char*);

inline int soap_read__ns2__GetLastEventIdResponse(struct soap *soap, _ns2__GetLastEventIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetLastEventIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetLastEventIdResponse(struct soap *soap, const char *URL, _ns2__GetLastEventIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetLastEventIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetLastEventIdResponse(struct soap *soap, _ns2__GetLastEventIdResponse *p)
{
	if (::soap_read__ns2__GetLastEventIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetLastEventId_DEFINED
#define SOAP_TYPE__ns2__GetLastEventId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetLastEventId(struct soap*, const char*, int, const _ns2__GetLastEventId *, const char*);
SOAP_FMAC3 _ns2__GetLastEventId * SOAP_FMAC4 soap_in__ns2__GetLastEventId(struct soap*, const char*, _ns2__GetLastEventId *, const char*);
SOAP_FMAC1 _ns2__GetLastEventId * SOAP_FMAC2 soap_instantiate__ns2__GetLastEventId(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetLastEventId * soap_new__ns2__GetLastEventId(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetLastEventId(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetLastEventId * soap_new_req__ns2__GetLastEventId(
	struct soap *soap)
{
	_ns2__GetLastEventId *_p = ::soap_new__ns2__GetLastEventId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetLastEventId * soap_new_set__ns2__GetLastEventId(
	struct soap *soap)
{
	_ns2__GetLastEventId *_p = ::soap_new__ns2__GetLastEventId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__GetLastEventId(struct soap *soap, _ns2__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventId", p->soap_type() == SOAP_TYPE__ns2__GetLastEventId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetLastEventId(struct soap *soap, const char *URL, _ns2__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventId", p->soap_type() == SOAP_TYPE__ns2__GetLastEventId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetLastEventId(struct soap *soap, const char *URL, _ns2__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventId", p->soap_type() == SOAP_TYPE__ns2__GetLastEventId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetLastEventId(struct soap *soap, const char *URL, _ns2__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastEventId", p->soap_type() == SOAP_TYPE__ns2__GetLastEventId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetLastEventId * SOAP_FMAC4 soap_get__ns2__GetLastEventId(struct soap*, _ns2__GetLastEventId *, const char*, const char*);

inline int soap_read__ns2__GetLastEventId(struct soap *soap, _ns2__GetLastEventId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetLastEventId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetLastEventId(struct soap *soap, const char *URL, _ns2__GetLastEventId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetLastEventId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetLastEventId(struct soap *soap, _ns2__GetLastEventId *p)
{
	if (::soap_read__ns2__GetLastEventId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetEventsResponse_DEFINED
#define SOAP_TYPE__ns2__GetEventsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetEventsResponse(struct soap*, const char*, int, const _ns2__GetEventsResponse *, const char*);
SOAP_FMAC3 _ns2__GetEventsResponse * SOAP_FMAC4 soap_in__ns2__GetEventsResponse(struct soap*, const char*, _ns2__GetEventsResponse *, const char*);
SOAP_FMAC1 _ns2__GetEventsResponse * SOAP_FMAC2 soap_instantiate__ns2__GetEventsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetEventsResponse * soap_new__ns2__GetEventsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetEventsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetEventsResponse * soap_new_req__ns2__GetEventsResponse(
	struct soap *soap)
{
	_ns2__GetEventsResponse *_p = ::soap_new__ns2__GetEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetEventsResponse * soap_new_set__ns2__GetEventsResponse(
	struct soap *soap,
	ns10__ArrayOfEEvent *GetEventsResult)
{
	_ns2__GetEventsResponse *_p = ::soap_new__ns2__GetEventsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetEventsResponse::GetEventsResult = GetEventsResult;
	}
	return _p;
}

inline int soap_write__ns2__GetEventsResponse(struct soap *soap, _ns2__GetEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetEventsResponse(struct soap *soap, const char *URL, _ns2__GetEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetEventsResponse(struct soap *soap, const char *URL, _ns2__GetEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetEventsResponse(struct soap *soap, const char *URL, _ns2__GetEventsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEventsResponse", p->soap_type() == SOAP_TYPE__ns2__GetEventsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetEventsResponse * SOAP_FMAC4 soap_get__ns2__GetEventsResponse(struct soap*, _ns2__GetEventsResponse *, const char*, const char*);

inline int soap_read__ns2__GetEventsResponse(struct soap *soap, _ns2__GetEventsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetEventsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetEventsResponse(struct soap *soap, const char *URL, _ns2__GetEventsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetEventsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetEventsResponse(struct soap *soap, _ns2__GetEventsResponse *p)
{
	if (::soap_read__ns2__GetEventsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetEvents_DEFINED
#define SOAP_TYPE__ns2__GetEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetEvents(struct soap*, const char*, int, const _ns2__GetEvents *, const char*);
SOAP_FMAC3 _ns2__GetEvents * SOAP_FMAC4 soap_in__ns2__GetEvents(struct soap*, const char*, _ns2__GetEvents *, const char*);
SOAP_FMAC1 _ns2__GetEvents * SOAP_FMAC2 soap_instantiate__ns2__GetEvents(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetEvents * soap_new__ns2__GetEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetEvents(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetEvents * soap_new_req__ns2__GetEvents(
	struct soap *soap)
{
	_ns2__GetEvents *_p = ::soap_new__ns2__GetEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetEvents * soap_new_set__ns2__GetEvents(
	struct soap *soap,
	time_t *beginDateTime,
	time_t *endDateTime)
{
	_ns2__GetEvents *_p = ::soap_new__ns2__GetEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetEvents::beginDateTime = beginDateTime;
		_p->_ns2__GetEvents::endDateTime = endDateTime;
	}
	return _p;
}

inline int soap_write__ns2__GetEvents(struct soap *soap, _ns2__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEvents", p->soap_type() == SOAP_TYPE__ns2__GetEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetEvents(struct soap *soap, const char *URL, _ns2__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEvents", p->soap_type() == SOAP_TYPE__ns2__GetEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetEvents(struct soap *soap, const char *URL, _ns2__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEvents", p->soap_type() == SOAP_TYPE__ns2__GetEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetEvents(struct soap *soap, const char *URL, _ns2__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetEvents", p->soap_type() == SOAP_TYPE__ns2__GetEvents ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetEvents * SOAP_FMAC4 soap_get__ns2__GetEvents(struct soap*, _ns2__GetEvents *, const char*, const char*);

inline int soap_read__ns2__GetEvents(struct soap *soap, _ns2__GetEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetEvents(struct soap *soap, const char *URL, _ns2__GetEvents *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetEvents(struct soap *soap, _ns2__GetEvents *p)
{
	if (::soap_read__ns2__GetEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetResultsSinceIdResponse_DEFINED
#define SOAP_TYPE__ns2__GetResultsSinceIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetResultsSinceIdResponse(struct soap*, const char*, int, const _ns2__GetResultsSinceIdResponse *, const char*);
SOAP_FMAC3 _ns2__GetResultsSinceIdResponse * SOAP_FMAC4 soap_in__ns2__GetResultsSinceIdResponse(struct soap*, const char*, _ns2__GetResultsSinceIdResponse *, const char*);
SOAP_FMAC1 _ns2__GetResultsSinceIdResponse * SOAP_FMAC2 soap_instantiate__ns2__GetResultsSinceIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetResultsSinceIdResponse * soap_new__ns2__GetResultsSinceIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetResultsSinceIdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetResultsSinceIdResponse * soap_new_req__ns2__GetResultsSinceIdResponse(
	struct soap *soap)
{
	_ns2__GetResultsSinceIdResponse *_p = ::soap_new__ns2__GetResultsSinceIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetResultsSinceIdResponse * soap_new_set__ns2__GetResultsSinceIdResponse(
	struct soap *soap,
	ns10__ArrayOfESample *GetResultsSinceIdResult)
{
	_ns2__GetResultsSinceIdResponse *_p = ::soap_new__ns2__GetResultsSinceIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetResultsSinceIdResponse::GetResultsSinceIdResult = GetResultsSinceIdResult;
	}
	return _p;
}

inline int soap_write__ns2__GetResultsSinceIdResponse(struct soap *soap, _ns2__GetResultsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetResultsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetResultsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetResultsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetResultsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetResultsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetResultsSinceIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetResultsSinceIdResponse * SOAP_FMAC4 soap_get__ns2__GetResultsSinceIdResponse(struct soap*, _ns2__GetResultsSinceIdResponse *, const char*, const char*);

inline int soap_read__ns2__GetResultsSinceIdResponse(struct soap *soap, _ns2__GetResultsSinceIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetResultsSinceIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetResultsSinceIdResponse(struct soap *soap, const char *URL, _ns2__GetResultsSinceIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetResultsSinceIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetResultsSinceIdResponse(struct soap *soap, _ns2__GetResultsSinceIdResponse *p)
{
	if (::soap_read__ns2__GetResultsSinceIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetResultsSinceId_DEFINED
#define SOAP_TYPE__ns2__GetResultsSinceId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetResultsSinceId(struct soap*, const char*, int, const _ns2__GetResultsSinceId *, const char*);
SOAP_FMAC3 _ns2__GetResultsSinceId * SOAP_FMAC4 soap_in__ns2__GetResultsSinceId(struct soap*, const char*, _ns2__GetResultsSinceId *, const char*);
SOAP_FMAC1 _ns2__GetResultsSinceId * SOAP_FMAC2 soap_instantiate__ns2__GetResultsSinceId(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetResultsSinceId * soap_new__ns2__GetResultsSinceId(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetResultsSinceId(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetResultsSinceId * soap_new_req__ns2__GetResultsSinceId(
	struct soap *soap)
{
	_ns2__GetResultsSinceId *_p = ::soap_new__ns2__GetResultsSinceId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetResultsSinceId * soap_new_set__ns2__GetResultsSinceId(
	struct soap *soap,
	int *lastId)
{
	_ns2__GetResultsSinceId *_p = ::soap_new__ns2__GetResultsSinceId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetResultsSinceId::lastId = lastId;
	}
	return _p;
}

inline int soap_write__ns2__GetResultsSinceId(struct soap *soap, _ns2__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetResultsSinceId(struct soap *soap, const char *URL, _ns2__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetResultsSinceId(struct soap *soap, const char *URL, _ns2__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetResultsSinceId(struct soap *soap, const char *URL, _ns2__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsSinceId", p->soap_type() == SOAP_TYPE__ns2__GetResultsSinceId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetResultsSinceId * SOAP_FMAC4 soap_get__ns2__GetResultsSinceId(struct soap*, _ns2__GetResultsSinceId *, const char*, const char*);

inline int soap_read__ns2__GetResultsSinceId(struct soap *soap, _ns2__GetResultsSinceId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetResultsSinceId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetResultsSinceId(struct soap *soap, const char *URL, _ns2__GetResultsSinceId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetResultsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetResultsSinceId(struct soap *soap, _ns2__GetResultsSinceId *p)
{
	if (::soap_read__ns2__GetResultsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetLastResultIdResponse_DEFINED
#define SOAP_TYPE__ns2__GetLastResultIdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetLastResultIdResponse(struct soap*, const char*, int, const _ns2__GetLastResultIdResponse *, const char*);
SOAP_FMAC3 _ns2__GetLastResultIdResponse * SOAP_FMAC4 soap_in__ns2__GetLastResultIdResponse(struct soap*, const char*, _ns2__GetLastResultIdResponse *, const char*);
SOAP_FMAC1 _ns2__GetLastResultIdResponse * SOAP_FMAC2 soap_instantiate__ns2__GetLastResultIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetLastResultIdResponse * soap_new__ns2__GetLastResultIdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetLastResultIdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetLastResultIdResponse * soap_new_req__ns2__GetLastResultIdResponse(
	struct soap *soap)
{
	_ns2__GetLastResultIdResponse *_p = ::soap_new__ns2__GetLastResultIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetLastResultIdResponse * soap_new_set__ns2__GetLastResultIdResponse(
	struct soap *soap,
	int *GetLastResultIdResult)
{
	_ns2__GetLastResultIdResponse *_p = ::soap_new__ns2__GetLastResultIdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetLastResultIdResponse::GetLastResultIdResult = GetLastResultIdResult;
	}
	return _p;
}

inline int soap_write__ns2__GetLastResultIdResponse(struct soap *soap, _ns2__GetLastResultIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetLastResultIdResponse(struct soap *soap, const char *URL, _ns2__GetLastResultIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetLastResultIdResponse(struct soap *soap, const char *URL, _ns2__GetLastResultIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultIdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetLastResultIdResponse(struct soap *soap, const char *URL, _ns2__GetLastResultIdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultIdResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultIdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetLastResultIdResponse * SOAP_FMAC4 soap_get__ns2__GetLastResultIdResponse(struct soap*, _ns2__GetLastResultIdResponse *, const char*, const char*);

inline int soap_read__ns2__GetLastResultIdResponse(struct soap *soap, _ns2__GetLastResultIdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetLastResultIdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetLastResultIdResponse(struct soap *soap, const char *URL, _ns2__GetLastResultIdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetLastResultIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetLastResultIdResponse(struct soap *soap, _ns2__GetLastResultIdResponse *p)
{
	if (::soap_read__ns2__GetLastResultIdResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetLastResultId_DEFINED
#define SOAP_TYPE__ns2__GetLastResultId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetLastResultId(struct soap*, const char*, int, const _ns2__GetLastResultId *, const char*);
SOAP_FMAC3 _ns2__GetLastResultId * SOAP_FMAC4 soap_in__ns2__GetLastResultId(struct soap*, const char*, _ns2__GetLastResultId *, const char*);
SOAP_FMAC1 _ns2__GetLastResultId * SOAP_FMAC2 soap_instantiate__ns2__GetLastResultId(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetLastResultId * soap_new__ns2__GetLastResultId(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetLastResultId(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetLastResultId * soap_new_req__ns2__GetLastResultId(
	struct soap *soap)
{
	_ns2__GetLastResultId *_p = ::soap_new__ns2__GetLastResultId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetLastResultId * soap_new_set__ns2__GetLastResultId(
	struct soap *soap)
{
	_ns2__GetLastResultId *_p = ::soap_new__ns2__GetLastResultId(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__GetLastResultId(struct soap *soap, _ns2__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultId", p->soap_type() == SOAP_TYPE__ns2__GetLastResultId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetLastResultId(struct soap *soap, const char *URL, _ns2__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultId", p->soap_type() == SOAP_TYPE__ns2__GetLastResultId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetLastResultId(struct soap *soap, const char *URL, _ns2__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultId", p->soap_type() == SOAP_TYPE__ns2__GetLastResultId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetLastResultId(struct soap *soap, const char *URL, _ns2__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultId", p->soap_type() == SOAP_TYPE__ns2__GetLastResultId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetLastResultId * SOAP_FMAC4 soap_get__ns2__GetLastResultId(struct soap*, _ns2__GetLastResultId *, const char*, const char*);

inline int soap_read__ns2__GetLastResultId(struct soap *soap, _ns2__GetLastResultId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetLastResultId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetLastResultId(struct soap *soap, const char *URL, _ns2__GetLastResultId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetLastResultId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetLastResultId(struct soap *soap, _ns2__GetLastResultId *p)
{
	if (::soap_read__ns2__GetLastResultId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetLastResultResponse_DEFINED
#define SOAP_TYPE__ns2__GetLastResultResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetLastResultResponse(struct soap*, const char*, int, const _ns2__GetLastResultResponse *, const char*);
SOAP_FMAC3 _ns2__GetLastResultResponse * SOAP_FMAC4 soap_in__ns2__GetLastResultResponse(struct soap*, const char*, _ns2__GetLastResultResponse *, const char*);
SOAP_FMAC1 _ns2__GetLastResultResponse * SOAP_FMAC2 soap_instantiate__ns2__GetLastResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetLastResultResponse * soap_new__ns2__GetLastResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetLastResultResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetLastResultResponse * soap_new_req__ns2__GetLastResultResponse(
	struct soap *soap)
{
	_ns2__GetLastResultResponse *_p = ::soap_new__ns2__GetLastResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetLastResultResponse * soap_new_set__ns2__GetLastResultResponse(
	struct soap *soap,
	ns10__ESample *GetLastResultResult)
{
	_ns2__GetLastResultResponse *_p = ::soap_new__ns2__GetLastResultResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetLastResultResponse::GetLastResultResult = GetLastResultResult;
	}
	return _p;
}

inline int soap_write__ns2__GetLastResultResponse(struct soap *soap, _ns2__GetLastResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetLastResultResponse(struct soap *soap, const char *URL, _ns2__GetLastResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetLastResultResponse(struct soap *soap, const char *URL, _ns2__GetLastResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetLastResultResponse(struct soap *soap, const char *URL, _ns2__GetLastResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResultResponse", p->soap_type() == SOAP_TYPE__ns2__GetLastResultResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetLastResultResponse * SOAP_FMAC4 soap_get__ns2__GetLastResultResponse(struct soap*, _ns2__GetLastResultResponse *, const char*, const char*);

inline int soap_read__ns2__GetLastResultResponse(struct soap *soap, _ns2__GetLastResultResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetLastResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetLastResultResponse(struct soap *soap, const char *URL, _ns2__GetLastResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetLastResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetLastResultResponse(struct soap *soap, _ns2__GetLastResultResponse *p)
{
	if (::soap_read__ns2__GetLastResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetLastResult_DEFINED
#define SOAP_TYPE__ns2__GetLastResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetLastResult(struct soap*, const char*, int, const _ns2__GetLastResult *, const char*);
SOAP_FMAC3 _ns2__GetLastResult * SOAP_FMAC4 soap_in__ns2__GetLastResult(struct soap*, const char*, _ns2__GetLastResult *, const char*);
SOAP_FMAC1 _ns2__GetLastResult * SOAP_FMAC2 soap_instantiate__ns2__GetLastResult(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetLastResult * soap_new__ns2__GetLastResult(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetLastResult(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetLastResult * soap_new_req__ns2__GetLastResult(
	struct soap *soap)
{
	_ns2__GetLastResult *_p = ::soap_new__ns2__GetLastResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetLastResult * soap_new_set__ns2__GetLastResult(
	struct soap *soap,
	enum ns10__ESampleTypes *sampleType)
{
	_ns2__GetLastResult *_p = ::soap_new__ns2__GetLastResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetLastResult::sampleType = sampleType;
	}
	return _p;
}

inline int soap_write__ns2__GetLastResult(struct soap *soap, _ns2__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResult", p->soap_type() == SOAP_TYPE__ns2__GetLastResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetLastResult(struct soap *soap, const char *URL, _ns2__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResult", p->soap_type() == SOAP_TYPE__ns2__GetLastResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetLastResult(struct soap *soap, const char *URL, _ns2__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResult", p->soap_type() == SOAP_TYPE__ns2__GetLastResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetLastResult(struct soap *soap, const char *URL, _ns2__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetLastResult", p->soap_type() == SOAP_TYPE__ns2__GetLastResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetLastResult * SOAP_FMAC4 soap_get__ns2__GetLastResult(struct soap*, _ns2__GetLastResult *, const char*, const char*);

inline int soap_read__ns2__GetLastResult(struct soap *soap, _ns2__GetLastResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetLastResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetLastResult(struct soap *soap, const char *URL, _ns2__GetLastResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetLastResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetLastResult(struct soap *soap, _ns2__GetLastResult *p)
{
	if (::soap_read__ns2__GetLastResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetResultsResponse_DEFINED
#define SOAP_TYPE__ns2__GetResultsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetResultsResponse(struct soap*, const char*, int, const _ns2__GetResultsResponse *, const char*);
SOAP_FMAC3 _ns2__GetResultsResponse * SOAP_FMAC4 soap_in__ns2__GetResultsResponse(struct soap*, const char*, _ns2__GetResultsResponse *, const char*);
SOAP_FMAC1 _ns2__GetResultsResponse * SOAP_FMAC2 soap_instantiate__ns2__GetResultsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetResultsResponse * soap_new__ns2__GetResultsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetResultsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetResultsResponse * soap_new_req__ns2__GetResultsResponse(
	struct soap *soap)
{
	_ns2__GetResultsResponse *_p = ::soap_new__ns2__GetResultsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetResultsResponse * soap_new_set__ns2__GetResultsResponse(
	struct soap *soap,
	ns10__ArrayOfESample *GetResultsResult)
{
	_ns2__GetResultsResponse *_p = ::soap_new__ns2__GetResultsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetResultsResponse::GetResultsResult = GetResultsResult;
	}
	return _p;
}

inline int soap_write__ns2__GetResultsResponse(struct soap *soap, _ns2__GetResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetResultsResponse(struct soap *soap, const char *URL, _ns2__GetResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetResultsResponse(struct soap *soap, const char *URL, _ns2__GetResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetResultsResponse(struct soap *soap, const char *URL, _ns2__GetResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResultsResponse", p->soap_type() == SOAP_TYPE__ns2__GetResultsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetResultsResponse * SOAP_FMAC4 soap_get__ns2__GetResultsResponse(struct soap*, _ns2__GetResultsResponse *, const char*, const char*);

inline int soap_read__ns2__GetResultsResponse(struct soap *soap, _ns2__GetResultsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetResultsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetResultsResponse(struct soap *soap, const char *URL, _ns2__GetResultsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetResultsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetResultsResponse(struct soap *soap, _ns2__GetResultsResponse *p)
{
	if (::soap_read__ns2__GetResultsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetResults_DEFINED
#define SOAP_TYPE__ns2__GetResults_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetResults(struct soap*, const char*, int, const _ns2__GetResults *, const char*);
SOAP_FMAC3 _ns2__GetResults * SOAP_FMAC4 soap_in__ns2__GetResults(struct soap*, const char*, _ns2__GetResults *, const char*);
SOAP_FMAC1 _ns2__GetResults * SOAP_FMAC2 soap_instantiate__ns2__GetResults(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetResults * soap_new__ns2__GetResults(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetResults(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetResults * soap_new_req__ns2__GetResults(
	struct soap *soap)
{
	_ns2__GetResults *_p = ::soap_new__ns2__GetResults(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetResults * soap_new_set__ns2__GetResults(
	struct soap *soap,
	time_t *beginDateTime,
	time_t *endDateTime,
	enum ns10__ESampleTypes *sampleType)
{
	_ns2__GetResults *_p = ::soap_new__ns2__GetResults(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetResults::beginDateTime = beginDateTime;
		_p->_ns2__GetResults::endDateTime = endDateTime;
		_p->_ns2__GetResults::sampleType = sampleType;
	}
	return _p;
}

inline int soap_write__ns2__GetResults(struct soap *soap, _ns2__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResults", p->soap_type() == SOAP_TYPE__ns2__GetResults ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetResults(struct soap *soap, const char *URL, _ns2__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResults", p->soap_type() == SOAP_TYPE__ns2__GetResults ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetResults(struct soap *soap, const char *URL, _ns2__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResults", p->soap_type() == SOAP_TYPE__ns2__GetResults ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetResults(struct soap *soap, const char *URL, _ns2__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetResults", p->soap_type() == SOAP_TYPE__ns2__GetResults ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetResults * SOAP_FMAC4 soap_get__ns2__GetResults(struct soap*, _ns2__GetResults *, const char*, const char*);

inline int soap_read__ns2__GetResults(struct soap *soap, _ns2__GetResults *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetResults(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetResults(struct soap *soap, const char *URL, _ns2__GetResults *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetResults(struct soap *soap, _ns2__GetResults *p)
{
	if (::soap_read__ns2__GetResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__SetSystemConfigurationsResponse_DEFINED
#define SOAP_TYPE__ns2__SetSystemConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__SetSystemConfigurationsResponse(struct soap*, const char*, int, const _ns2__SetSystemConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns2__SetSystemConfigurationsResponse * SOAP_FMAC4 soap_in__ns2__SetSystemConfigurationsResponse(struct soap*, const char*, _ns2__SetSystemConfigurationsResponse *, const char*);
SOAP_FMAC1 _ns2__SetSystemConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns2__SetSystemConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__SetSystemConfigurationsResponse * soap_new__ns2__SetSystemConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__SetSystemConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__SetSystemConfigurationsResponse * soap_new_req__ns2__SetSystemConfigurationsResponse(
	struct soap *soap)
{
	_ns2__SetSystemConfigurationsResponse *_p = ::soap_new__ns2__SetSystemConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__SetSystemConfigurationsResponse * soap_new_set__ns2__SetSystemConfigurationsResponse(
	struct soap *soap)
{
	_ns2__SetSystemConfigurationsResponse *_p = ::soap_new__ns2__SetSystemConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__SetSystemConfigurationsResponse(struct soap *soap, _ns2__SetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__SetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__SetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__SetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__SetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__SetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__SetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__SetSystemConfigurationsResponse * SOAP_FMAC4 soap_get__ns2__SetSystemConfigurationsResponse(struct soap*, _ns2__SetSystemConfigurationsResponse *, const char*, const char*);

inline int soap_read__ns2__SetSystemConfigurationsResponse(struct soap *soap, _ns2__SetSystemConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__SetSystemConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__SetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__SetSystemConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__SetSystemConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__SetSystemConfigurationsResponse(struct soap *soap, _ns2__SetSystemConfigurationsResponse *p)
{
	if (::soap_read__ns2__SetSystemConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__SetSystemConfigurations_DEFINED
#define SOAP_TYPE__ns2__SetSystemConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__SetSystemConfigurations(struct soap*, const char*, int, const _ns2__SetSystemConfigurations *, const char*);
SOAP_FMAC3 _ns2__SetSystemConfigurations * SOAP_FMAC4 soap_in__ns2__SetSystemConfigurations(struct soap*, const char*, _ns2__SetSystemConfigurations *, const char*);
SOAP_FMAC1 _ns2__SetSystemConfigurations * SOAP_FMAC2 soap_instantiate__ns2__SetSystemConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__SetSystemConfigurations * soap_new__ns2__SetSystemConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__SetSystemConfigurations(soap, n, NULL, NULL, NULL);
}

inline _ns2__SetSystemConfigurations * soap_new_req__ns2__SetSystemConfigurations(
	struct soap *soap)
{
	_ns2__SetSystemConfigurations *_p = ::soap_new__ns2__SetSystemConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__SetSystemConfigurations * soap_new_set__ns2__SetSystemConfigurations(
	struct soap *soap,
	ns5__SystemConfigurations *systemConfigurations)
{
	_ns2__SetSystemConfigurations *_p = ::soap_new__ns2__SetSystemConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__SetSystemConfigurations::systemConfigurations = systemConfigurations;
	}
	return _p;
}

inline int soap_write__ns2__SetSystemConfigurations(struct soap *soap, _ns2__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__SetSystemConfigurations(struct soap *soap, const char *URL, _ns2__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__SetSystemConfigurations(struct soap *soap, const char *URL, _ns2__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__SetSystemConfigurations(struct soap *soap, const char *URL, _ns2__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__SetSystemConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__SetSystemConfigurations * SOAP_FMAC4 soap_get__ns2__SetSystemConfigurations(struct soap*, _ns2__SetSystemConfigurations *, const char*, const char*);

inline int soap_read__ns2__SetSystemConfigurations(struct soap *soap, _ns2__SetSystemConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__SetSystemConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__SetSystemConfigurations(struct soap *soap, const char *URL, _ns2__SetSystemConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__SetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__SetSystemConfigurations(struct soap *soap, _ns2__SetSystemConfigurations *p)
{
	if (::soap_read__ns2__SetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetSystemConfigurationsResponse_DEFINED
#define SOAP_TYPE__ns2__GetSystemConfigurationsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetSystemConfigurationsResponse(struct soap*, const char*, int, const _ns2__GetSystemConfigurationsResponse *, const char*);
SOAP_FMAC3 _ns2__GetSystemConfigurationsResponse * SOAP_FMAC4 soap_in__ns2__GetSystemConfigurationsResponse(struct soap*, const char*, _ns2__GetSystemConfigurationsResponse *, const char*);
SOAP_FMAC1 _ns2__GetSystemConfigurationsResponse * SOAP_FMAC2 soap_instantiate__ns2__GetSystemConfigurationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetSystemConfigurationsResponse * soap_new__ns2__GetSystemConfigurationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetSystemConfigurationsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetSystemConfigurationsResponse * soap_new_req__ns2__GetSystemConfigurationsResponse(
	struct soap *soap)
{
	_ns2__GetSystemConfigurationsResponse *_p = ::soap_new__ns2__GetSystemConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetSystemConfigurationsResponse * soap_new_set__ns2__GetSystemConfigurationsResponse(
	struct soap *soap,
	ns5__SystemConfigurations *GetSystemConfigurationsResult)
{
	_ns2__GetSystemConfigurationsResponse *_p = ::soap_new__ns2__GetSystemConfigurationsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetSystemConfigurationsResponse::GetSystemConfigurationsResult = GetSystemConfigurationsResult;
	}
	return _p;
}

inline int soap_write__ns2__GetSystemConfigurationsResponse(struct soap *soap, _ns2__GetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__GetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__GetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__GetSystemConfigurationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurationsResponse", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurationsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetSystemConfigurationsResponse * SOAP_FMAC4 soap_get__ns2__GetSystemConfigurationsResponse(struct soap*, _ns2__GetSystemConfigurationsResponse *, const char*, const char*);

inline int soap_read__ns2__GetSystemConfigurationsResponse(struct soap *soap, _ns2__GetSystemConfigurationsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetSystemConfigurationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetSystemConfigurationsResponse(struct soap *soap, const char *URL, _ns2__GetSystemConfigurationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetSystemConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetSystemConfigurationsResponse(struct soap *soap, _ns2__GetSystemConfigurationsResponse *p)
{
	if (::soap_read__ns2__GetSystemConfigurationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetSystemConfigurations_DEFINED
#define SOAP_TYPE__ns2__GetSystemConfigurations_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetSystemConfigurations(struct soap*, const char*, int, const _ns2__GetSystemConfigurations *, const char*);
SOAP_FMAC3 _ns2__GetSystemConfigurations * SOAP_FMAC4 soap_in__ns2__GetSystemConfigurations(struct soap*, const char*, _ns2__GetSystemConfigurations *, const char*);
SOAP_FMAC1 _ns2__GetSystemConfigurations * SOAP_FMAC2 soap_instantiate__ns2__GetSystemConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetSystemConfigurations * soap_new__ns2__GetSystemConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetSystemConfigurations(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetSystemConfigurations * soap_new_req__ns2__GetSystemConfigurations(
	struct soap *soap)
{
	_ns2__GetSystemConfigurations *_p = ::soap_new__ns2__GetSystemConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetSystemConfigurations * soap_new_set__ns2__GetSystemConfigurations(
	struct soap *soap)
{
	_ns2__GetSystemConfigurations *_p = ::soap_new__ns2__GetSystemConfigurations(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__GetSystemConfigurations(struct soap *soap, _ns2__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetSystemConfigurations(struct soap *soap, const char *URL, _ns2__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetSystemConfigurations(struct soap *soap, const char *URL, _ns2__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurations ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetSystemConfigurations(struct soap *soap, const char *URL, _ns2__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetSystemConfigurations", p->soap_type() == SOAP_TYPE__ns2__GetSystemConfigurations ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetSystemConfigurations * SOAP_FMAC4 soap_get__ns2__GetSystemConfigurations(struct soap*, _ns2__GetSystemConfigurations *, const char*, const char*);

inline int soap_read__ns2__GetSystemConfigurations(struct soap *soap, _ns2__GetSystemConfigurations *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetSystemConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetSystemConfigurations(struct soap *soap, const char *URL, _ns2__GetSystemConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetSystemConfigurations(struct soap *soap, _ns2__GetSystemConfigurations *p)
{
	if (::soap_read__ns2__GetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__SetIgnoreClearingResponse_DEFINED
#define SOAP_TYPE__ns2__SetIgnoreClearingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__SetIgnoreClearingResponse(struct soap*, const char*, int, const _ns2__SetIgnoreClearingResponse *, const char*);
SOAP_FMAC3 _ns2__SetIgnoreClearingResponse * SOAP_FMAC4 soap_in__ns2__SetIgnoreClearingResponse(struct soap*, const char*, _ns2__SetIgnoreClearingResponse *, const char*);
SOAP_FMAC1 _ns2__SetIgnoreClearingResponse * SOAP_FMAC2 soap_instantiate__ns2__SetIgnoreClearingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__SetIgnoreClearingResponse * soap_new__ns2__SetIgnoreClearingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__SetIgnoreClearingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__SetIgnoreClearingResponse * soap_new_req__ns2__SetIgnoreClearingResponse(
	struct soap *soap)
{
	_ns2__SetIgnoreClearingResponse *_p = ::soap_new__ns2__SetIgnoreClearingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__SetIgnoreClearingResponse * soap_new_set__ns2__SetIgnoreClearingResponse(
	struct soap *soap)
{
	_ns2__SetIgnoreClearingResponse *_p = ::soap_new__ns2__SetIgnoreClearingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__SetIgnoreClearingResponse(struct soap *soap, _ns2__SetIgnoreClearingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearingResponse", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__SetIgnoreClearingResponse(struct soap *soap, const char *URL, _ns2__SetIgnoreClearingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearingResponse", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__SetIgnoreClearingResponse(struct soap *soap, const char *URL, _ns2__SetIgnoreClearingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearingResponse", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__SetIgnoreClearingResponse(struct soap *soap, const char *URL, _ns2__SetIgnoreClearingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearingResponse", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__SetIgnoreClearingResponse * SOAP_FMAC4 soap_get__ns2__SetIgnoreClearingResponse(struct soap*, _ns2__SetIgnoreClearingResponse *, const char*, const char*);

inline int soap_read__ns2__SetIgnoreClearingResponse(struct soap *soap, _ns2__SetIgnoreClearingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__SetIgnoreClearingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__SetIgnoreClearingResponse(struct soap *soap, const char *URL, _ns2__SetIgnoreClearingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__SetIgnoreClearingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__SetIgnoreClearingResponse(struct soap *soap, _ns2__SetIgnoreClearingResponse *p)
{
	if (::soap_read__ns2__SetIgnoreClearingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__SetIgnoreClearing_DEFINED
#define SOAP_TYPE__ns2__SetIgnoreClearing_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__SetIgnoreClearing(struct soap*, const char*, int, const _ns2__SetIgnoreClearing *, const char*);
SOAP_FMAC3 _ns2__SetIgnoreClearing * SOAP_FMAC4 soap_in__ns2__SetIgnoreClearing(struct soap*, const char*, _ns2__SetIgnoreClearing *, const char*);
SOAP_FMAC1 _ns2__SetIgnoreClearing * SOAP_FMAC2 soap_instantiate__ns2__SetIgnoreClearing(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__SetIgnoreClearing * soap_new__ns2__SetIgnoreClearing(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__SetIgnoreClearing(soap, n, NULL, NULL, NULL);
}

inline _ns2__SetIgnoreClearing * soap_new_req__ns2__SetIgnoreClearing(
	struct soap *soap)
{
	_ns2__SetIgnoreClearing *_p = ::soap_new__ns2__SetIgnoreClearing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__SetIgnoreClearing * soap_new_set__ns2__SetIgnoreClearing(
	struct soap *soap,
	bool *ignoreClearing)
{
	_ns2__SetIgnoreClearing *_p = ::soap_new__ns2__SetIgnoreClearing(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__SetIgnoreClearing::ignoreClearing = ignoreClearing;
	}
	return _p;
}

inline int soap_write__ns2__SetIgnoreClearing(struct soap *soap, _ns2__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearing", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__SetIgnoreClearing(struct soap *soap, const char *URL, _ns2__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearing", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__SetIgnoreClearing(struct soap *soap, const char *URL, _ns2__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearing", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__SetIgnoreClearing(struct soap *soap, const char *URL, _ns2__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:SetIgnoreClearing", p->soap_type() == SOAP_TYPE__ns2__SetIgnoreClearing ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__SetIgnoreClearing * SOAP_FMAC4 soap_get__ns2__SetIgnoreClearing(struct soap*, _ns2__SetIgnoreClearing *, const char*, const char*);

inline int soap_read__ns2__SetIgnoreClearing(struct soap *soap, _ns2__SetIgnoreClearing *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__SetIgnoreClearing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__SetIgnoreClearing(struct soap *soap, const char *URL, _ns2__SetIgnoreClearing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__SetIgnoreClearing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__SetIgnoreClearing(struct soap *soap, _ns2__SetIgnoreClearing *p)
{
	if (::soap_read__ns2__SetIgnoreClearing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetProcessingInfoResponse_DEFINED
#define SOAP_TYPE__ns2__GetProcessingInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetProcessingInfoResponse(struct soap*, const char*, int, const _ns2__GetProcessingInfoResponse *, const char*);
SOAP_FMAC3 _ns2__GetProcessingInfoResponse * SOAP_FMAC4 soap_in__ns2__GetProcessingInfoResponse(struct soap*, const char*, _ns2__GetProcessingInfoResponse *, const char*);
SOAP_FMAC1 _ns2__GetProcessingInfoResponse * SOAP_FMAC2 soap_instantiate__ns2__GetProcessingInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetProcessingInfoResponse * soap_new__ns2__GetProcessingInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetProcessingInfoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetProcessingInfoResponse * soap_new_req__ns2__GetProcessingInfoResponse(
	struct soap *soap)
{
	_ns2__GetProcessingInfoResponse *_p = ::soap_new__ns2__GetProcessingInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetProcessingInfoResponse * soap_new_set__ns2__GetProcessingInfoResponse(
	struct soap *soap,
	ns3__ProcessingInfo *GetProcessingInfoResult)
{
	_ns2__GetProcessingInfoResponse *_p = ::soap_new__ns2__GetProcessingInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__GetProcessingInfoResponse::GetProcessingInfoResult = GetProcessingInfoResult;
	}
	return _p;
}

inline int soap_write__ns2__GetProcessingInfoResponse(struct soap *soap, _ns2__GetProcessingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfoResponse", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetProcessingInfoResponse(struct soap *soap, const char *URL, _ns2__GetProcessingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfoResponse", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetProcessingInfoResponse(struct soap *soap, const char *URL, _ns2__GetProcessingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfoResponse", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetProcessingInfoResponse(struct soap *soap, const char *URL, _ns2__GetProcessingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfoResponse", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetProcessingInfoResponse * SOAP_FMAC4 soap_get__ns2__GetProcessingInfoResponse(struct soap*, _ns2__GetProcessingInfoResponse *, const char*, const char*);

inline int soap_read__ns2__GetProcessingInfoResponse(struct soap *soap, _ns2__GetProcessingInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetProcessingInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetProcessingInfoResponse(struct soap *soap, const char *URL, _ns2__GetProcessingInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetProcessingInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetProcessingInfoResponse(struct soap *soap, _ns2__GetProcessingInfoResponse *p)
{
	if (::soap_read__ns2__GetProcessingInfoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__GetProcessingInfo_DEFINED
#define SOAP_TYPE__ns2__GetProcessingInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__GetProcessingInfo(struct soap*, const char*, int, const _ns2__GetProcessingInfo *, const char*);
SOAP_FMAC3 _ns2__GetProcessingInfo * SOAP_FMAC4 soap_in__ns2__GetProcessingInfo(struct soap*, const char*, _ns2__GetProcessingInfo *, const char*);
SOAP_FMAC1 _ns2__GetProcessingInfo * SOAP_FMAC2 soap_instantiate__ns2__GetProcessingInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__GetProcessingInfo * soap_new__ns2__GetProcessingInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__GetProcessingInfo(soap, n, NULL, NULL, NULL);
}

inline _ns2__GetProcessingInfo * soap_new_req__ns2__GetProcessingInfo(
	struct soap *soap)
{
	_ns2__GetProcessingInfo *_p = ::soap_new__ns2__GetProcessingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__GetProcessingInfo * soap_new_set__ns2__GetProcessingInfo(
	struct soap *soap)
{
	_ns2__GetProcessingInfo *_p = ::soap_new__ns2__GetProcessingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__GetProcessingInfo(struct soap *soap, _ns2__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfo", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__GetProcessingInfo(struct soap *soap, const char *URL, _ns2__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfo", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__GetProcessingInfo(struct soap *soap, const char *URL, _ns2__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfo", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__GetProcessingInfo(struct soap *soap, const char *URL, _ns2__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:GetProcessingInfo", p->soap_type() == SOAP_TYPE__ns2__GetProcessingInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__GetProcessingInfo * SOAP_FMAC4 soap_get__ns2__GetProcessingInfo(struct soap*, _ns2__GetProcessingInfo *, const char*, const char*);

inline int soap_read__ns2__GetProcessingInfo(struct soap *soap, _ns2__GetProcessingInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__GetProcessingInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__GetProcessingInfo(struct soap *soap, const char *URL, _ns2__GetProcessingInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__GetProcessingInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__GetProcessingInfo(struct soap *soap, _ns2__GetProcessingInfo *p)
{
	if (::soap_read__ns2__GetProcessingInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__AbortAnalyzingResponse_DEFINED
#define SOAP_TYPE__ns2__AbortAnalyzingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__AbortAnalyzingResponse(struct soap*, const char*, int, const _ns2__AbortAnalyzingResponse *, const char*);
SOAP_FMAC3 _ns2__AbortAnalyzingResponse * SOAP_FMAC4 soap_in__ns2__AbortAnalyzingResponse(struct soap*, const char*, _ns2__AbortAnalyzingResponse *, const char*);
SOAP_FMAC1 _ns2__AbortAnalyzingResponse * SOAP_FMAC2 soap_instantiate__ns2__AbortAnalyzingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__AbortAnalyzingResponse * soap_new__ns2__AbortAnalyzingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__AbortAnalyzingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__AbortAnalyzingResponse * soap_new_req__ns2__AbortAnalyzingResponse(
	struct soap *soap)
{
	_ns2__AbortAnalyzingResponse *_p = ::soap_new__ns2__AbortAnalyzingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__AbortAnalyzingResponse * soap_new_set__ns2__AbortAnalyzingResponse(
	struct soap *soap)
{
	_ns2__AbortAnalyzingResponse *_p = ::soap_new__ns2__AbortAnalyzingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__AbortAnalyzingResponse(struct soap *soap, _ns2__AbortAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__AbortAnalyzingResponse(struct soap *soap, const char *URL, _ns2__AbortAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__AbortAnalyzingResponse(struct soap *soap, const char *URL, _ns2__AbortAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__AbortAnalyzingResponse(struct soap *soap, const char *URL, _ns2__AbortAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__AbortAnalyzingResponse * SOAP_FMAC4 soap_get__ns2__AbortAnalyzingResponse(struct soap*, _ns2__AbortAnalyzingResponse *, const char*, const char*);

inline int soap_read__ns2__AbortAnalyzingResponse(struct soap *soap, _ns2__AbortAnalyzingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__AbortAnalyzingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__AbortAnalyzingResponse(struct soap *soap, const char *URL, _ns2__AbortAnalyzingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__AbortAnalyzingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__AbortAnalyzingResponse(struct soap *soap, _ns2__AbortAnalyzingResponse *p)
{
	if (::soap_read__ns2__AbortAnalyzingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__AbortAnalyzing_DEFINED
#define SOAP_TYPE__ns2__AbortAnalyzing_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__AbortAnalyzing(struct soap*, const char*, int, const _ns2__AbortAnalyzing *, const char*);
SOAP_FMAC3 _ns2__AbortAnalyzing * SOAP_FMAC4 soap_in__ns2__AbortAnalyzing(struct soap*, const char*, _ns2__AbortAnalyzing *, const char*);
SOAP_FMAC1 _ns2__AbortAnalyzing * SOAP_FMAC2 soap_instantiate__ns2__AbortAnalyzing(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__AbortAnalyzing * soap_new__ns2__AbortAnalyzing(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__AbortAnalyzing(soap, n, NULL, NULL, NULL);
}

inline _ns2__AbortAnalyzing * soap_new_req__ns2__AbortAnalyzing(
	struct soap *soap)
{
	_ns2__AbortAnalyzing *_p = ::soap_new__ns2__AbortAnalyzing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__AbortAnalyzing * soap_new_set__ns2__AbortAnalyzing(
	struct soap *soap)
{
	_ns2__AbortAnalyzing *_p = ::soap_new__ns2__AbortAnalyzing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__AbortAnalyzing(struct soap *soap, _ns2__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzing", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__AbortAnalyzing(struct soap *soap, const char *URL, _ns2__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzing", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__AbortAnalyzing(struct soap *soap, const char *URL, _ns2__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzing", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__AbortAnalyzing(struct soap *soap, const char *URL, _ns2__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:AbortAnalyzing", p->soap_type() == SOAP_TYPE__ns2__AbortAnalyzing ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__AbortAnalyzing * SOAP_FMAC4 soap_get__ns2__AbortAnalyzing(struct soap*, _ns2__AbortAnalyzing *, const char*, const char*);

inline int soap_read__ns2__AbortAnalyzing(struct soap *soap, _ns2__AbortAnalyzing *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__AbortAnalyzing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__AbortAnalyzing(struct soap *soap, const char *URL, _ns2__AbortAnalyzing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__AbortAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__AbortAnalyzing(struct soap *soap, _ns2__AbortAnalyzing *p)
{
	if (::soap_read__ns2__AbortAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__StopAnalyzingResponse_DEFINED
#define SOAP_TYPE__ns2__StopAnalyzingResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StopAnalyzingResponse(struct soap*, const char*, int, const _ns2__StopAnalyzingResponse *, const char*);
SOAP_FMAC3 _ns2__StopAnalyzingResponse * SOAP_FMAC4 soap_in__ns2__StopAnalyzingResponse(struct soap*, const char*, _ns2__StopAnalyzingResponse *, const char*);
SOAP_FMAC1 _ns2__StopAnalyzingResponse * SOAP_FMAC2 soap_instantiate__ns2__StopAnalyzingResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__StopAnalyzingResponse * soap_new__ns2__StopAnalyzingResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__StopAnalyzingResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__StopAnalyzingResponse * soap_new_req__ns2__StopAnalyzingResponse(
	struct soap *soap)
{
	_ns2__StopAnalyzingResponse *_p = ::soap_new__ns2__StopAnalyzingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__StopAnalyzingResponse * soap_new_set__ns2__StopAnalyzingResponse(
	struct soap *soap)
{
	_ns2__StopAnalyzingResponse *_p = ::soap_new__ns2__StopAnalyzingResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__StopAnalyzingResponse(struct soap *soap, _ns2__StopAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzingResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__StopAnalyzingResponse(struct soap *soap, const char *URL, _ns2__StopAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__StopAnalyzingResponse(struct soap *soap, const char *URL, _ns2__StopAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzingResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__StopAnalyzingResponse(struct soap *soap, const char *URL, _ns2__StopAnalyzingResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzingResponse", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzingResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__StopAnalyzingResponse * SOAP_FMAC4 soap_get__ns2__StopAnalyzingResponse(struct soap*, _ns2__StopAnalyzingResponse *, const char*, const char*);

inline int soap_read__ns2__StopAnalyzingResponse(struct soap *soap, _ns2__StopAnalyzingResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__StopAnalyzingResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__StopAnalyzingResponse(struct soap *soap, const char *URL, _ns2__StopAnalyzingResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__StopAnalyzingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__StopAnalyzingResponse(struct soap *soap, _ns2__StopAnalyzingResponse *p)
{
	if (::soap_read__ns2__StopAnalyzingResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__StopAnalyzing_DEFINED
#define SOAP_TYPE__ns2__StopAnalyzing_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StopAnalyzing(struct soap*, const char*, int, const _ns2__StopAnalyzing *, const char*);
SOAP_FMAC3 _ns2__StopAnalyzing * SOAP_FMAC4 soap_in__ns2__StopAnalyzing(struct soap*, const char*, _ns2__StopAnalyzing *, const char*);
SOAP_FMAC1 _ns2__StopAnalyzing * SOAP_FMAC2 soap_instantiate__ns2__StopAnalyzing(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__StopAnalyzing * soap_new__ns2__StopAnalyzing(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__StopAnalyzing(soap, n, NULL, NULL, NULL);
}

inline _ns2__StopAnalyzing * soap_new_req__ns2__StopAnalyzing(
	struct soap *soap)
{
	_ns2__StopAnalyzing *_p = ::soap_new__ns2__StopAnalyzing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__StopAnalyzing * soap_new_set__ns2__StopAnalyzing(
	struct soap *soap)
{
	_ns2__StopAnalyzing *_p = ::soap_new__ns2__StopAnalyzing(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__StopAnalyzing(struct soap *soap, _ns2__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzing", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzing ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__StopAnalyzing(struct soap *soap, const char *URL, _ns2__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzing", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__StopAnalyzing(struct soap *soap, const char *URL, _ns2__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzing", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzing ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__StopAnalyzing(struct soap *soap, const char *URL, _ns2__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StopAnalyzing", p->soap_type() == SOAP_TYPE__ns2__StopAnalyzing ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__StopAnalyzing * SOAP_FMAC4 soap_get__ns2__StopAnalyzing(struct soap*, _ns2__StopAnalyzing *, const char*, const char*);

inline int soap_read__ns2__StopAnalyzing(struct soap *soap, _ns2__StopAnalyzing *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__StopAnalyzing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__StopAnalyzing(struct soap *soap, const char *URL, _ns2__StopAnalyzing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__StopAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__StopAnalyzing(struct soap *soap, _ns2__StopAnalyzing *p)
{
	if (::soap_read__ns2__StopAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__StartOperationResponse_DEFINED
#define SOAP_TYPE__ns2__StartOperationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StartOperationResponse(struct soap*, const char*, int, const _ns2__StartOperationResponse *, const char*);
SOAP_FMAC3 _ns2__StartOperationResponse * SOAP_FMAC4 soap_in__ns2__StartOperationResponse(struct soap*, const char*, _ns2__StartOperationResponse *, const char*);
SOAP_FMAC1 _ns2__StartOperationResponse * SOAP_FMAC2 soap_instantiate__ns2__StartOperationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__StartOperationResponse * soap_new__ns2__StartOperationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__StartOperationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__StartOperationResponse * soap_new_req__ns2__StartOperationResponse(
	struct soap *soap)
{
	_ns2__StartOperationResponse *_p = ::soap_new__ns2__StartOperationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__StartOperationResponse * soap_new_set__ns2__StartOperationResponse(
	struct soap *soap)
{
	_ns2__StartOperationResponse *_p = ::soap_new__ns2__StartOperationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__StartOperationResponse(struct soap *soap, _ns2__StartOperationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperationResponse", p->soap_type() == SOAP_TYPE__ns2__StartOperationResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__StartOperationResponse(struct soap *soap, const char *URL, _ns2__StartOperationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperationResponse", p->soap_type() == SOAP_TYPE__ns2__StartOperationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__StartOperationResponse(struct soap *soap, const char *URL, _ns2__StartOperationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperationResponse", p->soap_type() == SOAP_TYPE__ns2__StartOperationResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__StartOperationResponse(struct soap *soap, const char *URL, _ns2__StartOperationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperationResponse", p->soap_type() == SOAP_TYPE__ns2__StartOperationResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__StartOperationResponse * SOAP_FMAC4 soap_get__ns2__StartOperationResponse(struct soap*, _ns2__StartOperationResponse *, const char*, const char*);

inline int soap_read__ns2__StartOperationResponse(struct soap *soap, _ns2__StartOperationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__StartOperationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__StartOperationResponse(struct soap *soap, const char *URL, _ns2__StartOperationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__StartOperationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__StartOperationResponse(struct soap *soap, _ns2__StartOperationResponse *p)
{
	if (::soap_read__ns2__StartOperationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__StartOperation_DEFINED
#define SOAP_TYPE__ns2__StartOperation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StartOperation(struct soap*, const char*, int, const _ns2__StartOperation *, const char*);
SOAP_FMAC3 _ns2__StartOperation * SOAP_FMAC4 soap_in__ns2__StartOperation(struct soap*, const char*, _ns2__StartOperation *, const char*);
SOAP_FMAC1 _ns2__StartOperation * SOAP_FMAC2 soap_instantiate__ns2__StartOperation(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__StartOperation * soap_new__ns2__StartOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__StartOperation(soap, n, NULL, NULL, NULL);
}

inline _ns2__StartOperation * soap_new_req__ns2__StartOperation(
	struct soap *soap)
{
	_ns2__StartOperation *_p = ::soap_new__ns2__StartOperation(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__StartOperation * soap_new_set__ns2__StartOperation(
	struct soap *soap,
	std::string *operationName)
{
	_ns2__StartOperation *_p = ::soap_new__ns2__StartOperation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns2__StartOperation::operationName = operationName;
	}
	return _p;
}

inline int soap_write__ns2__StartOperation(struct soap *soap, _ns2__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperation", p->soap_type() == SOAP_TYPE__ns2__StartOperation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__StartOperation(struct soap *soap, const char *URL, _ns2__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperation", p->soap_type() == SOAP_TYPE__ns2__StartOperation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__StartOperation(struct soap *soap, const char *URL, _ns2__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperation", p->soap_type() == SOAP_TYPE__ns2__StartOperation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__StartOperation(struct soap *soap, const char *URL, _ns2__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartOperation", p->soap_type() == SOAP_TYPE__ns2__StartOperation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__StartOperation * SOAP_FMAC4 soap_get__ns2__StartOperation(struct soap*, _ns2__StartOperation *, const char*, const char*);

inline int soap_read__ns2__StartOperation(struct soap *soap, _ns2__StartOperation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__StartOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__StartOperation(struct soap *soap, const char *URL, _ns2__StartOperation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__StartOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__StartOperation(struct soap *soap, _ns2__StartOperation *p)
{
	if (::soap_read__ns2__StartOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__StartAutoPlanResponse_DEFINED
#define SOAP_TYPE__ns2__StartAutoPlanResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StartAutoPlanResponse(struct soap*, const char*, int, const _ns2__StartAutoPlanResponse *, const char*);
SOAP_FMAC3 _ns2__StartAutoPlanResponse * SOAP_FMAC4 soap_in__ns2__StartAutoPlanResponse(struct soap*, const char*, _ns2__StartAutoPlanResponse *, const char*);
SOAP_FMAC1 _ns2__StartAutoPlanResponse * SOAP_FMAC2 soap_instantiate__ns2__StartAutoPlanResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__StartAutoPlanResponse * soap_new__ns2__StartAutoPlanResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__StartAutoPlanResponse(soap, n, NULL, NULL, NULL);
}

inline _ns2__StartAutoPlanResponse * soap_new_req__ns2__StartAutoPlanResponse(
	struct soap *soap)
{
	_ns2__StartAutoPlanResponse *_p = ::soap_new__ns2__StartAutoPlanResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__StartAutoPlanResponse * soap_new_set__ns2__StartAutoPlanResponse(
	struct soap *soap)
{
	_ns2__StartAutoPlanResponse *_p = ::soap_new__ns2__StartAutoPlanResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__StartAutoPlanResponse(struct soap *soap, _ns2__StartAutoPlanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlanResponse", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlanResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__StartAutoPlanResponse(struct soap *soap, const char *URL, _ns2__StartAutoPlanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlanResponse", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlanResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__StartAutoPlanResponse(struct soap *soap, const char *URL, _ns2__StartAutoPlanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlanResponse", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlanResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__StartAutoPlanResponse(struct soap *soap, const char *URL, _ns2__StartAutoPlanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlanResponse", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlanResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__StartAutoPlanResponse * SOAP_FMAC4 soap_get__ns2__StartAutoPlanResponse(struct soap*, _ns2__StartAutoPlanResponse *, const char*, const char*);

inline int soap_read__ns2__StartAutoPlanResponse(struct soap *soap, _ns2__StartAutoPlanResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__StartAutoPlanResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__StartAutoPlanResponse(struct soap *soap, const char *URL, _ns2__StartAutoPlanResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__StartAutoPlanResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__StartAutoPlanResponse(struct soap *soap, _ns2__StartAutoPlanResponse *p)
{
	if (::soap_read__ns2__StartAutoPlanResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__ns2__StartAutoPlan_DEFINED
#define SOAP_TYPE__ns2__StartAutoPlan_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns2__StartAutoPlan(struct soap*, const char*, int, const _ns2__StartAutoPlan *, const char*);
SOAP_FMAC3 _ns2__StartAutoPlan * SOAP_FMAC4 soap_in__ns2__StartAutoPlan(struct soap*, const char*, _ns2__StartAutoPlan *, const char*);
SOAP_FMAC1 _ns2__StartAutoPlan * SOAP_FMAC2 soap_instantiate__ns2__StartAutoPlan(struct soap*, int, const char*, const char*, size_t*);

inline _ns2__StartAutoPlan * soap_new__ns2__StartAutoPlan(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns2__StartAutoPlan(soap, n, NULL, NULL, NULL);
}

inline _ns2__StartAutoPlan * soap_new_req__ns2__StartAutoPlan(
	struct soap *soap)
{
	_ns2__StartAutoPlan *_p = ::soap_new__ns2__StartAutoPlan(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns2__StartAutoPlan * soap_new_set__ns2__StartAutoPlan(
	struct soap *soap)
{
	_ns2__StartAutoPlan *_p = ::soap_new__ns2__StartAutoPlan(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns2__StartAutoPlan(struct soap *soap, _ns2__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlan", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns2__StartAutoPlan(struct soap *soap, const char *URL, _ns2__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlan", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns2__StartAutoPlan(struct soap *soap, const char *URL, _ns2__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlan", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns2__StartAutoPlan(struct soap *soap, const char *URL, _ns2__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:StartAutoPlan", p->soap_type() == SOAP_TYPE__ns2__StartAutoPlan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns2__StartAutoPlan * SOAP_FMAC4 soap_get__ns2__StartAutoPlan(struct soap*, _ns2__StartAutoPlan *, const char*, const char*);

inline int soap_read__ns2__StartAutoPlan(struct soap *soap, _ns2__StartAutoPlan *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns2__StartAutoPlan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns2__StartAutoPlan(struct soap *soap, const char *URL, _ns2__StartAutoPlan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns2__StartAutoPlan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns2__StartAutoPlan(struct soap *soap, _ns2__StartAutoPlan *p)
{
	if (::soap_read__ns2__StartAutoPlan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap,
	char *wsa5__MessageID,
	struct wsa5__RelatesToType *wsa5__RelatesTo,
	struct wsa5__EndpointReferenceType *wsa5__From,
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo,
	struct wsa5__EndpointReferenceType *wsa5__FaultTo,
	char *wsa5__To,
	char *wsa5__Action,
	struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
		_p->wsa5__MessageID = wsa5__MessageID;
		_p->wsa5__RelatesTo = wsa5__RelatesTo;
		_p->wsa5__From = wsa5__From;
		_p->wsa5__ReplyTo = wsa5__ReplyTo;
		_p->wsa5__FaultTo = wsa5__FaultTo;
		_p->wsa5__To = wsa5__To;
		_p->wsa5__Action = wsa5__Action;
		_p->chan__ChannelInstance = chan__ChannelInstance;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_chan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_chan__ChannelInstanceType(struct soap*, const char*, int, const struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_in_chan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType *, const char*);
SOAP_FMAC1 struct chan__ChannelInstanceType * SOAP_FMAC2 soap_instantiate_chan__ChannelInstanceType(struct soap*, int, const char*, const char*, size_t*);

inline struct chan__ChannelInstanceType * soap_new_chan__ChannelInstanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_chan__ChannelInstanceType(soap, n, NULL, NULL, NULL);
}

inline struct chan__ChannelInstanceType * soap_new_req_chan__ChannelInstanceType(
	struct soap *soap,
	int __item)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
	}
	return _p;
}

inline struct chan__ChannelInstanceType * soap_new_set_chan__ChannelInstanceType(
	struct soap *soap,
	int __item,
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter)
{
	struct chan__ChannelInstanceType *_p = ::soap_new_chan__ChannelInstanceType(soap);
	if (_p)
	{	::soap_default_chan__ChannelInstanceType(soap, _p);
		_p->__item = __item;
		_p->wsa5__IsReferenceParameter = wsa5__IsReferenceParameter;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_chan__ChannelInstanceType(struct soap*, const struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_write_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_chan__ChannelInstanceType(soap, p), 0) || ::soap_put_chan__ChannelInstanceType(soap, p, "chan:ChannelInstanceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct chan__ChannelInstanceType * SOAP_FMAC4 soap_get_chan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *, const char*, const char*);

inline int soap_read_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (p)
	{	::soap_default_chan__ChannelInstanceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_chan__ChannelInstanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_chan__ChannelInstanceType(struct soap *soap, const char *URL, struct chan__ChannelInstanceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_chan__ChannelInstanceType(struct soap *soap, struct chan__ChannelInstanceType *p)
{
	if (::soap_read_chan__ChannelInstanceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif
/* _wsa5__ProblemAction is a typedef synonym of wsa5__ProblemActionType */

#ifndef SOAP_TYPE__wsa5__ProblemAction_DEFINED
#define SOAP_TYPE__wsa5__ProblemAction_DEFINED

#define soap_default__wsa5__ProblemAction soap_default_wsa5__ProblemActionType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);

#define soap_serialize__wsa5__ProblemAction soap_serialize_wsa5__ProblemActionType


#define soap__wsa5__ProblemAction2s soap_wsa5__ProblemActionType2s


#define soap_out__wsa5__ProblemAction soap_out_wsa5__ProblemActionType


#define soap_s2_wsa5__ProblemAction soap_s2wsa5__ProblemActionType


#define soap_in__wsa5__ProblemAction soap_in_wsa5__ProblemActionType


#define soap_instantiate__wsa5__ProblemAction soap_instantiate_wsa5__ProblemActionType


#define soap_new__wsa5__ProblemAction soap_new_wsa5__ProblemActionType


#define soap_new_req__wsa5__ProblemAction soap_new_req_wsa5__ProblemActionType


#define soap_new_set__wsa5__ProblemAction soap_new_set_wsa5__ProblemActionType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemAction(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write__wsa5__ProblemAction(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemAction(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ProblemAction(soap, p), 0) || ::soap_put__wsa5__ProblemAction(soap, p, "wsa5:ProblemAction", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemAction soap_get_wsa5__ProblemActionType


#define soap_read__wsa5__ProblemAction soap_read_wsa5__ProblemActionType


#define soap_GET__wsa5__ProblemAction soap_GET_wsa5__ProblemActionType


#define soap_POST_recv__wsa5__ProblemAction soap_POST_recv_wsa5__ProblemActionType

#endif
/* _wsa5__FaultTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__FaultTo_DEFINED
#define SOAP_TYPE__wsa5__FaultTo_DEFINED

#define soap_default__wsa5__FaultTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__FaultTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__FaultTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__FaultTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__FaultTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__FaultTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__FaultTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__FaultTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__FaultTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__FaultTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__FaultTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__FaultTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__FaultTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__FaultTo(soap, p), 0) || ::soap_put__wsa5__FaultTo(soap, p, "wsa5:FaultTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__FaultTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__FaultTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__FaultTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__FaultTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__From is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__From_DEFINED
#define SOAP_TYPE__wsa5__From_DEFINED

#define soap_default__wsa5__From soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__From soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__From2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__From soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__From soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__From soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__From soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__From soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__From soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__From soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__From(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__From(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__From(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__From(soap, p), 0) || ::soap_put__wsa5__From(soap, p, "wsa5:From", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__From soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__From soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__From soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__From soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__ReplyTo is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__ReplyTo_DEFINED
#define SOAP_TYPE__wsa5__ReplyTo_DEFINED

#define soap_default__wsa5__ReplyTo soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__ReplyTo soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__ReplyTo2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__ReplyTo soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__ReplyTo soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__ReplyTo soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__ReplyTo soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__ReplyTo soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__ReplyTo soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__ReplyTo soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReplyTo(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__ReplyTo(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReplyTo(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReplyTo(soap, p), 0) || ::soap_put__wsa5__ReplyTo(soap, p, "wsa5:ReplyTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReplyTo soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__ReplyTo soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__ReplyTo soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__ReplyTo soap_POST_recv_wsa5__EndpointReferenceType

#endif
/* _wsa5__RelatesTo is a typedef synonym of wsa5__RelatesToType */

#ifndef SOAP_TYPE__wsa5__RelatesTo_DEFINED
#define SOAP_TYPE__wsa5__RelatesTo_DEFINED

#define soap_default__wsa5__RelatesTo soap_default_wsa5__RelatesToType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);

#define soap_serialize__wsa5__RelatesTo soap_serialize_wsa5__RelatesToType


#define soap__wsa5__RelatesTo2s soap_wsa5__RelatesToType2s


#define soap_out__wsa5__RelatesTo soap_out_wsa5__RelatesToType


#define soap_s2_wsa5__RelatesTo soap_s2wsa5__RelatesToType


#define soap_in__wsa5__RelatesTo soap_in_wsa5__RelatesToType


#define soap_instantiate__wsa5__RelatesTo soap_instantiate_wsa5__RelatesToType


#define soap_new__wsa5__RelatesTo soap_new_wsa5__RelatesToType


#define soap_new_req__wsa5__RelatesTo soap_new_req_wsa5__RelatesToType


#define soap_new_set__wsa5__RelatesTo soap_new_set_wsa5__RelatesToType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__RelatesTo(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write__wsa5__RelatesTo(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__RelatesTo(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__RelatesTo(soap, p), 0) || ::soap_put__wsa5__RelatesTo(soap, p, "wsa5:RelatesTo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__RelatesTo soap_get_wsa5__RelatesToType


#define soap_read__wsa5__RelatesTo soap_read_wsa5__RelatesToType


#define soap_GET__wsa5__RelatesTo soap_GET_wsa5__RelatesToType


#define soap_POST_recv__wsa5__RelatesTo soap_POST_recv_wsa5__RelatesToType

#endif
/* _wsa5__Metadata is a typedef synonym of wsa5__MetadataType */

#ifndef SOAP_TYPE__wsa5__Metadata_DEFINED
#define SOAP_TYPE__wsa5__Metadata_DEFINED

#define soap_default__wsa5__Metadata soap_default_wsa5__MetadataType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);

#define soap_serialize__wsa5__Metadata soap_serialize_wsa5__MetadataType


#define soap__wsa5__Metadata2s soap_wsa5__MetadataType2s


#define soap_out__wsa5__Metadata soap_out_wsa5__MetadataType


#define soap_s2_wsa5__Metadata soap_s2wsa5__MetadataType


#define soap_in__wsa5__Metadata soap_in_wsa5__MetadataType


#define soap_instantiate__wsa5__Metadata soap_instantiate_wsa5__MetadataType


#define soap_new__wsa5__Metadata soap_new_wsa5__MetadataType


#define soap_new_req__wsa5__Metadata soap_new_req_wsa5__MetadataType


#define soap_new_set__wsa5__Metadata soap_new_set_wsa5__MetadataType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Metadata(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write__wsa5__Metadata(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Metadata(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__Metadata(soap, p), 0) || ::soap_put__wsa5__Metadata(soap, p, "wsa5:Metadata", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Metadata soap_get_wsa5__MetadataType


#define soap_read__wsa5__Metadata soap_read_wsa5__MetadataType


#define soap_GET__wsa5__Metadata soap_GET_wsa5__MetadataType


#define soap_POST_recv__wsa5__Metadata soap_POST_recv_wsa5__MetadataType

#endif
/* _wsa5__ReferenceParameters is a typedef synonym of wsa5__ReferenceParametersType */

#ifndef SOAP_TYPE__wsa5__ReferenceParameters_DEFINED
#define SOAP_TYPE__wsa5__ReferenceParameters_DEFINED

#define soap_default__wsa5__ReferenceParameters soap_default_wsa5__ReferenceParametersType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);

#define soap_serialize__wsa5__ReferenceParameters soap_serialize_wsa5__ReferenceParametersType


#define soap__wsa5__ReferenceParameters2s soap_wsa5__ReferenceParametersType2s


#define soap_out__wsa5__ReferenceParameters soap_out_wsa5__ReferenceParametersType


#define soap_s2_wsa5__ReferenceParameters soap_s2wsa5__ReferenceParametersType


#define soap_in__wsa5__ReferenceParameters soap_in_wsa5__ReferenceParametersType


#define soap_instantiate__wsa5__ReferenceParameters soap_instantiate_wsa5__ReferenceParametersType


#define soap_new__wsa5__ReferenceParameters soap_new_wsa5__ReferenceParametersType


#define soap_new_req__wsa5__ReferenceParameters soap_new_req_wsa5__ReferenceParametersType


#define soap_new_set__wsa5__ReferenceParameters soap_new_set_wsa5__ReferenceParametersType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ReferenceParameters(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write__wsa5__ReferenceParameters(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ReferenceParameters(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__ReferenceParameters(soap, p), 0) || ::soap_put__wsa5__ReferenceParameters(soap, p, "wsa5:ReferenceParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ReferenceParameters soap_get_wsa5__ReferenceParametersType


#define soap_read__wsa5__ReferenceParameters soap_read_wsa5__ReferenceParametersType


#define soap_GET__wsa5__ReferenceParameters soap_GET_wsa5__ReferenceParametersType


#define soap_POST_recv__wsa5__ReferenceParameters soap_POST_recv_wsa5__ReferenceParametersType

#endif
/* _wsa5__EndpointReference is a typedef synonym of wsa5__EndpointReferenceType */

#ifndef SOAP_TYPE__wsa5__EndpointReference_DEFINED
#define SOAP_TYPE__wsa5__EndpointReference_DEFINED

#define soap_default__wsa5__EndpointReference soap_default_wsa5__EndpointReferenceType

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);

#define soap_serialize__wsa5__EndpointReference soap_serialize_wsa5__EndpointReferenceType


#define soap__wsa5__EndpointReference2s soap_wsa5__EndpointReferenceType2s


#define soap_out__wsa5__EndpointReference soap_out_wsa5__EndpointReferenceType


#define soap_s2_wsa5__EndpointReference soap_s2wsa5__EndpointReferenceType


#define soap_in__wsa5__EndpointReference soap_in_wsa5__EndpointReferenceType


#define soap_instantiate__wsa5__EndpointReference soap_instantiate_wsa5__EndpointReferenceType


#define soap_new__wsa5__EndpointReference soap_new_wsa5__EndpointReferenceType


#define soap_new_req__wsa5__EndpointReference soap_new_req_wsa5__EndpointReferenceType


#define soap_new_set__wsa5__EndpointReference soap_new_set_wsa5__EndpointReferenceType

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__EndpointReference(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write__wsa5__EndpointReference(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__EndpointReference(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize__wsa5__EndpointReference(soap, p), 0) || ::soap_put__wsa5__EndpointReference(soap, p, "wsa5:EndpointReference", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__EndpointReference soap_get_wsa5__EndpointReferenceType


#define soap_read__wsa5__EndpointReference soap_read_wsa5__EndpointReferenceType


#define soap_GET__wsa5__EndpointReference soap_GET_wsa5__EndpointReferenceType


#define soap_POST_recv__wsa5__EndpointReference soap_POST_recv_wsa5__EndpointReferenceType

#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType_DEFINED
#define SOAP_TYPE_wsa5__ProblemActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ProblemActionType(struct soap*, const char*, int, const struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_in_wsa5__ProblemActionType(struct soap*, const char*, struct wsa5__ProblemActionType *, const char*);
SOAP_FMAC1 struct wsa5__ProblemActionType * SOAP_FMAC2 soap_instantiate_wsa5__ProblemActionType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ProblemActionType * soap_new_wsa5__ProblemActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ProblemActionType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ProblemActionType * soap_new_req_wsa5__ProblemActionType(
	struct soap *soap)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
	}
	return _p;
}

inline struct wsa5__ProblemActionType * soap_new_set_wsa5__ProblemActionType(
	struct soap *soap,
	char *Action,
	char *SoapAction,
	char *__anyAttribute)
{
	struct wsa5__ProblemActionType *_p = ::soap_new_wsa5__ProblemActionType(soap);
	if (_p)
	{	::soap_default_wsa5__ProblemActionType(soap, _p);
		_p->Action = Action;
		_p->SoapAction = SoapAction;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ProblemActionType(struct soap*, const struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_write_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ProblemActionType(soap, p), 0) || ::soap_put_wsa5__ProblemActionType(soap, p, "wsa5:ProblemActionType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ProblemActionType * SOAP_FMAC4 soap_get_wsa5__ProblemActionType(struct soap*, struct wsa5__ProblemActionType *, const char*, const char*);

inline int soap_read_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (p)
	{	::soap_default_wsa5__ProblemActionType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ProblemActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ProblemActionType(struct soap *soap, const char *URL, struct wsa5__ProblemActionType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ProblemActionType(struct soap *soap, struct wsa5__ProblemActionType *p)
{
	if (::soap_read_wsa5__ProblemActionType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType_DEFINED
#define SOAP_TYPE_wsa5__RelatesToType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelatesToType(struct soap*, const char*, int, const struct wsa5__RelatesToType *, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_in_wsa5__RelatesToType(struct soap*, const char*, struct wsa5__RelatesToType *, const char*);
SOAP_FMAC1 struct wsa5__RelatesToType * SOAP_FMAC2 soap_instantiate_wsa5__RelatesToType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__RelatesToType * soap_new_wsa5__RelatesToType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__RelatesToType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__RelatesToType * soap_new_req_wsa5__RelatesToType(
	struct soap *soap)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
	}
	return _p;
}

inline struct wsa5__RelatesToType * soap_new_set_wsa5__RelatesToType(
	struct soap *soap,
	char *__item,
	char *RelationshipType,
	char *__anyAttribute)
{
	struct wsa5__RelatesToType *_p = ::soap_new_wsa5__RelatesToType(soap);
	if (_p)
	{	::soap_default_wsa5__RelatesToType(soap, _p);
		_p->__item = __item;
		_p->RelationshipType = RelationshipType;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelatesToType(struct soap*, const struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_write_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__RelatesToType(soap, p), 0) || ::soap_put_wsa5__RelatesToType(soap, p, "wsa5:RelatesToType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__RelatesToType * SOAP_FMAC4 soap_get_wsa5__RelatesToType(struct soap*, struct wsa5__RelatesToType *, const char*, const char*);

inline int soap_read_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (p)
	{	::soap_default_wsa5__RelatesToType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__RelatesToType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelatesToType(struct soap *soap, const char *URL, struct wsa5__RelatesToType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelatesToType(struct soap *soap, struct wsa5__RelatesToType *p)
{
	if (::soap_read_wsa5__RelatesToType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType_DEFINED
#define SOAP_TYPE_wsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__MetadataType(struct soap*, const char*, int, const struct wsa5__MetadataType *, const char*);
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_in_wsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType *, const char*);
SOAP_FMAC1 struct wsa5__MetadataType * SOAP_FMAC2 soap_instantiate_wsa5__MetadataType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__MetadataType * soap_new_wsa5__MetadataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__MetadataType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__MetadataType * soap_new_req_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__MetadataType * soap_new_set_wsa5__MetadataType(
	struct soap *soap,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__MetadataType *_p = ::soap_new_wsa5__MetadataType(soap);
	if (_p)
	{	::soap_default_wsa5__MetadataType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__MetadataType(struct soap*, const struct wsa5__MetadataType *, const char*, const char*);

inline int soap_write_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__MetadataType(soap, p), 0) || ::soap_put_wsa5__MetadataType(soap, p, "wsa5:MetadataType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__MetadataType * SOAP_FMAC4 soap_get_wsa5__MetadataType(struct soap*, struct wsa5__MetadataType *, const char*, const char*);

inline int soap_read_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (p)
	{	::soap_default_wsa5__MetadataType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__MetadataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__MetadataType(struct soap *soap, const char *URL, struct wsa5__MetadataType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__MetadataType(struct soap *soap, struct wsa5__MetadataType *p)
{
	if (::soap_read_wsa5__MetadataType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_wsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__ReferenceParametersType(struct soap*, const char*, int, const struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_in_wsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType *, const char*);
SOAP_FMAC1 struct wsa5__ReferenceParametersType * SOAP_FMAC2 soap_instantiate_wsa5__ReferenceParametersType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__ReferenceParametersType * soap_new_wsa5__ReferenceParametersType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__ReferenceParametersType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__ReferenceParametersType * soap_new_req_wsa5__ReferenceParametersType(
	struct soap *soap,
	int __size,
	char **__any)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__ReferenceParametersType * soap_new_set_wsa5__ReferenceParametersType(
	struct soap *soap,
	int *chan__ChannelInstance,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__ReferenceParametersType *_p = ::soap_new_wsa5__ReferenceParametersType(soap);
	if (_p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, _p);
		_p->chan__ChannelInstance = chan__ChannelInstance;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__ReferenceParametersType(struct soap*, const struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_write_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__ReferenceParametersType(soap, p), 0) || ::soap_put_wsa5__ReferenceParametersType(soap, p, "wsa5:ReferenceParametersType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__ReferenceParametersType * SOAP_FMAC4 soap_get_wsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *, const char*, const char*);

inline int soap_read_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (p)
	{	::soap_default_wsa5__ReferenceParametersType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__ReferenceParametersType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__ReferenceParametersType(struct soap *soap, const char *URL, struct wsa5__ReferenceParametersType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__ReferenceParametersType(struct soap *soap, struct wsa5__ReferenceParametersType *p)
{
	if (::soap_read_wsa5__ReferenceParametersType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
#define SOAP_TYPE_wsa5__EndpointReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__EndpointReferenceType(struct soap*, const char*, int, const struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_in_wsa5__EndpointReferenceType(struct soap*, const char*, struct wsa5__EndpointReferenceType *, const char*);
SOAP_FMAC1 struct wsa5__EndpointReferenceType * SOAP_FMAC2 soap_instantiate_wsa5__EndpointReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline struct wsa5__EndpointReferenceType * soap_new_wsa5__EndpointReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_wsa5__EndpointReferenceType(soap, n, NULL, NULL, NULL);
}

inline struct wsa5__EndpointReferenceType * soap_new_req_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	int __size,
	char **__any)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->__size = __size;
		_p->__any = __any;
	}
	return _p;
}

inline struct wsa5__EndpointReferenceType * soap_new_set_wsa5__EndpointReferenceType(
	struct soap *soap,
	char *Address,
	struct wsa5__ReferenceParametersType *ReferenceParameters,
	struct wsa5__MetadataType *Metadata,
	int __size,
	char **__any,
	char *__anyAttribute)
{
	struct wsa5__EndpointReferenceType *_p = ::soap_new_wsa5__EndpointReferenceType(soap);
	if (_p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, _p);
		_p->Address = Address;
		_p->ReferenceParameters = ReferenceParameters;
		_p->Metadata = Metadata;
		_p->__size = __size;
		_p->__any = __any;
		_p->__anyAttribute = __anyAttribute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__EndpointReferenceType(struct soap*, const struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_write_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_wsa5__EndpointReferenceType(soap, p), 0) || ::soap_put_wsa5__EndpointReferenceType(soap, p, "wsa5:EndpointReferenceType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct wsa5__EndpointReferenceType * SOAP_FMAC4 soap_get_wsa5__EndpointReferenceType(struct soap*, struct wsa5__EndpointReferenceType *, const char*, const char*);

inline int soap_read_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (p)
	{	::soap_default_wsa5__EndpointReferenceType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_wsa5__EndpointReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__EndpointReferenceType(struct soap *soap, const char *URL, struct wsa5__EndpointReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__EndpointReferenceType(struct soap *soap, struct wsa5__EndpointReferenceType *p)
{
	if (::soap_read_wsa5__EndpointReferenceType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetEventsSinceId_DEFINED
#define SOAP_TYPE___tempuri__GetEventsSinceId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetEventsSinceId(struct soap*, struct __tempuri__GetEventsSinceId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetEventsSinceId(struct soap*, const struct __tempuri__GetEventsSinceId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetEventsSinceId(struct soap*, const char*, int, const struct __tempuri__GetEventsSinceId *, const char*);
SOAP_FMAC3 struct __tempuri__GetEventsSinceId * SOAP_FMAC4 soap_in___tempuri__GetEventsSinceId(struct soap*, const char*, struct __tempuri__GetEventsSinceId *, const char*);
SOAP_FMAC1 struct __tempuri__GetEventsSinceId * SOAP_FMAC2 soap_instantiate___tempuri__GetEventsSinceId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetEventsSinceId * soap_new___tempuri__GetEventsSinceId(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetEventsSinceId(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetEventsSinceId * soap_new_req___tempuri__GetEventsSinceId(
	struct soap *soap)
{
	struct __tempuri__GetEventsSinceId *_p = ::soap_new___tempuri__GetEventsSinceId(soap);
	if (_p)
	{	::soap_default___tempuri__GetEventsSinceId(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetEventsSinceId * soap_new_set___tempuri__GetEventsSinceId(
	struct soap *soap,
	_ns2__GetEventsSinceId *ns2__GetEventsSinceId)
{
	struct __tempuri__GetEventsSinceId *_p = ::soap_new___tempuri__GetEventsSinceId(soap);
	if (_p)
	{	::soap_default___tempuri__GetEventsSinceId(soap, _p);
		_p->ns2__GetEventsSinceId = ns2__GetEventsSinceId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetEventsSinceId(struct soap*, const struct __tempuri__GetEventsSinceId *, const char*, const char*);

inline int soap_write___tempuri__GetEventsSinceId(struct soap *soap, struct __tempuri__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetEventsSinceId(soap, p), 0) || ::soap_put___tempuri__GetEventsSinceId(soap, p, "-tempuri:GetEventsSinceId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetEventsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetEventsSinceId(soap, p), 0) || ::soap_put___tempuri__GetEventsSinceId(soap, p, "-tempuri:GetEventsSinceId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetEventsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetEventsSinceId(soap, p), 0) || ::soap_put___tempuri__GetEventsSinceId(soap, p, "-tempuri:GetEventsSinceId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetEventsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetEventsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetEventsSinceId(soap, p), 0) || ::soap_put___tempuri__GetEventsSinceId(soap, p, "-tempuri:GetEventsSinceId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetEventsSinceId * SOAP_FMAC4 soap_get___tempuri__GetEventsSinceId(struct soap*, struct __tempuri__GetEventsSinceId *, const char*, const char*);

inline int soap_read___tempuri__GetEventsSinceId(struct soap *soap, struct __tempuri__GetEventsSinceId *p)
{
	if (p)
	{	::soap_default___tempuri__GetEventsSinceId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetEventsSinceId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetEventsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetEventsSinceId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetEventsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetEventsSinceId(struct soap *soap, struct __tempuri__GetEventsSinceId *p)
{
	if (::soap_read___tempuri__GetEventsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetLastEventId_DEFINED
#define SOAP_TYPE___tempuri__GetLastEventId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetLastEventId(struct soap*, struct __tempuri__GetLastEventId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetLastEventId(struct soap*, const struct __tempuri__GetLastEventId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetLastEventId(struct soap*, const char*, int, const struct __tempuri__GetLastEventId *, const char*);
SOAP_FMAC3 struct __tempuri__GetLastEventId * SOAP_FMAC4 soap_in___tempuri__GetLastEventId(struct soap*, const char*, struct __tempuri__GetLastEventId *, const char*);
SOAP_FMAC1 struct __tempuri__GetLastEventId * SOAP_FMAC2 soap_instantiate___tempuri__GetLastEventId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetLastEventId * soap_new___tempuri__GetLastEventId(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetLastEventId(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetLastEventId * soap_new_req___tempuri__GetLastEventId(
	struct soap *soap)
{
	struct __tempuri__GetLastEventId *_p = ::soap_new___tempuri__GetLastEventId(soap);
	if (_p)
	{	::soap_default___tempuri__GetLastEventId(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetLastEventId * soap_new_set___tempuri__GetLastEventId(
	struct soap *soap,
	_ns2__GetLastEventId *ns2__GetLastEventId)
{
	struct __tempuri__GetLastEventId *_p = ::soap_new___tempuri__GetLastEventId(soap);
	if (_p)
	{	::soap_default___tempuri__GetLastEventId(soap, _p);
		_p->ns2__GetLastEventId = ns2__GetLastEventId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetLastEventId(struct soap*, const struct __tempuri__GetLastEventId *, const char*, const char*);

inline int soap_write___tempuri__GetLastEventId(struct soap *soap, struct __tempuri__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetLastEventId(soap, p), 0) || ::soap_put___tempuri__GetLastEventId(soap, p, "-tempuri:GetLastEventId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetLastEventId(struct soap *soap, const char *URL, struct __tempuri__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastEventId(soap, p), 0) || ::soap_put___tempuri__GetLastEventId(soap, p, "-tempuri:GetLastEventId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetLastEventId(struct soap *soap, const char *URL, struct __tempuri__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastEventId(soap, p), 0) || ::soap_put___tempuri__GetLastEventId(soap, p, "-tempuri:GetLastEventId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetLastEventId(struct soap *soap, const char *URL, struct __tempuri__GetLastEventId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastEventId(soap, p), 0) || ::soap_put___tempuri__GetLastEventId(soap, p, "-tempuri:GetLastEventId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetLastEventId * SOAP_FMAC4 soap_get___tempuri__GetLastEventId(struct soap*, struct __tempuri__GetLastEventId *, const char*, const char*);

inline int soap_read___tempuri__GetLastEventId(struct soap *soap, struct __tempuri__GetLastEventId *p)
{
	if (p)
	{	::soap_default___tempuri__GetLastEventId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetLastEventId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetLastEventId(struct soap *soap, const char *URL, struct __tempuri__GetLastEventId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetLastEventId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetLastEventId(struct soap *soap, struct __tempuri__GetLastEventId *p)
{
	if (::soap_read___tempuri__GetLastEventId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetEvents_DEFINED
#define SOAP_TYPE___tempuri__GetEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetEvents(struct soap*, struct __tempuri__GetEvents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetEvents(struct soap*, const struct __tempuri__GetEvents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetEvents(struct soap*, const char*, int, const struct __tempuri__GetEvents *, const char*);
SOAP_FMAC3 struct __tempuri__GetEvents * SOAP_FMAC4 soap_in___tempuri__GetEvents(struct soap*, const char*, struct __tempuri__GetEvents *, const char*);
SOAP_FMAC1 struct __tempuri__GetEvents * SOAP_FMAC2 soap_instantiate___tempuri__GetEvents(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetEvents * soap_new___tempuri__GetEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetEvents(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetEvents * soap_new_req___tempuri__GetEvents(
	struct soap *soap)
{
	struct __tempuri__GetEvents *_p = ::soap_new___tempuri__GetEvents(soap);
	if (_p)
	{	::soap_default___tempuri__GetEvents(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetEvents * soap_new_set___tempuri__GetEvents(
	struct soap *soap,
	_ns2__GetEvents *ns2__GetEvents)
{
	struct __tempuri__GetEvents *_p = ::soap_new___tempuri__GetEvents(soap);
	if (_p)
	{	::soap_default___tempuri__GetEvents(soap, _p);
		_p->ns2__GetEvents = ns2__GetEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetEvents(struct soap*, const struct __tempuri__GetEvents *, const char*, const char*);

inline int soap_write___tempuri__GetEvents(struct soap *soap, struct __tempuri__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetEvents(soap, p), 0) || ::soap_put___tempuri__GetEvents(soap, p, "-tempuri:GetEvents", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetEvents(struct soap *soap, const char *URL, struct __tempuri__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetEvents(soap, p), 0) || ::soap_put___tempuri__GetEvents(soap, p, "-tempuri:GetEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetEvents(struct soap *soap, const char *URL, struct __tempuri__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetEvents(soap, p), 0) || ::soap_put___tempuri__GetEvents(soap, p, "-tempuri:GetEvents", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetEvents(struct soap *soap, const char *URL, struct __tempuri__GetEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetEvents(soap, p), 0) || ::soap_put___tempuri__GetEvents(soap, p, "-tempuri:GetEvents", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetEvents * SOAP_FMAC4 soap_get___tempuri__GetEvents(struct soap*, struct __tempuri__GetEvents *, const char*, const char*);

inline int soap_read___tempuri__GetEvents(struct soap *soap, struct __tempuri__GetEvents *p)
{
	if (p)
	{	::soap_default___tempuri__GetEvents(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetEvents(struct soap *soap, const char *URL, struct __tempuri__GetEvents *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetEvents(struct soap *soap, struct __tempuri__GetEvents *p)
{
	if (::soap_read___tempuri__GetEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetResultsSinceId_DEFINED
#define SOAP_TYPE___tempuri__GetResultsSinceId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetResultsSinceId(struct soap*, struct __tempuri__GetResultsSinceId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetResultsSinceId(struct soap*, const struct __tempuri__GetResultsSinceId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetResultsSinceId(struct soap*, const char*, int, const struct __tempuri__GetResultsSinceId *, const char*);
SOAP_FMAC3 struct __tempuri__GetResultsSinceId * SOAP_FMAC4 soap_in___tempuri__GetResultsSinceId(struct soap*, const char*, struct __tempuri__GetResultsSinceId *, const char*);
SOAP_FMAC1 struct __tempuri__GetResultsSinceId * SOAP_FMAC2 soap_instantiate___tempuri__GetResultsSinceId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetResultsSinceId * soap_new___tempuri__GetResultsSinceId(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetResultsSinceId(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetResultsSinceId * soap_new_req___tempuri__GetResultsSinceId(
	struct soap *soap)
{
	struct __tempuri__GetResultsSinceId *_p = ::soap_new___tempuri__GetResultsSinceId(soap);
	if (_p)
	{	::soap_default___tempuri__GetResultsSinceId(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetResultsSinceId * soap_new_set___tempuri__GetResultsSinceId(
	struct soap *soap,
	_ns2__GetResultsSinceId *ns2__GetResultsSinceId)
{
	struct __tempuri__GetResultsSinceId *_p = ::soap_new___tempuri__GetResultsSinceId(soap);
	if (_p)
	{	::soap_default___tempuri__GetResultsSinceId(soap, _p);
		_p->ns2__GetResultsSinceId = ns2__GetResultsSinceId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetResultsSinceId(struct soap*, const struct __tempuri__GetResultsSinceId *, const char*, const char*);

inline int soap_write___tempuri__GetResultsSinceId(struct soap *soap, struct __tempuri__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetResultsSinceId(soap, p), 0) || ::soap_put___tempuri__GetResultsSinceId(soap, p, "-tempuri:GetResultsSinceId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetResultsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetResultsSinceId(soap, p), 0) || ::soap_put___tempuri__GetResultsSinceId(soap, p, "-tempuri:GetResultsSinceId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetResultsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetResultsSinceId(soap, p), 0) || ::soap_put___tempuri__GetResultsSinceId(soap, p, "-tempuri:GetResultsSinceId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetResultsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetResultsSinceId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetResultsSinceId(soap, p), 0) || ::soap_put___tempuri__GetResultsSinceId(soap, p, "-tempuri:GetResultsSinceId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetResultsSinceId * SOAP_FMAC4 soap_get___tempuri__GetResultsSinceId(struct soap*, struct __tempuri__GetResultsSinceId *, const char*, const char*);

inline int soap_read___tempuri__GetResultsSinceId(struct soap *soap, struct __tempuri__GetResultsSinceId *p)
{
	if (p)
	{	::soap_default___tempuri__GetResultsSinceId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetResultsSinceId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetResultsSinceId(struct soap *soap, const char *URL, struct __tempuri__GetResultsSinceId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetResultsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetResultsSinceId(struct soap *soap, struct __tempuri__GetResultsSinceId *p)
{
	if (::soap_read___tempuri__GetResultsSinceId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetLastResultId_DEFINED
#define SOAP_TYPE___tempuri__GetLastResultId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetLastResultId(struct soap*, struct __tempuri__GetLastResultId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetLastResultId(struct soap*, const struct __tempuri__GetLastResultId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetLastResultId(struct soap*, const char*, int, const struct __tempuri__GetLastResultId *, const char*);
SOAP_FMAC3 struct __tempuri__GetLastResultId * SOAP_FMAC4 soap_in___tempuri__GetLastResultId(struct soap*, const char*, struct __tempuri__GetLastResultId *, const char*);
SOAP_FMAC1 struct __tempuri__GetLastResultId * SOAP_FMAC2 soap_instantiate___tempuri__GetLastResultId(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetLastResultId * soap_new___tempuri__GetLastResultId(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetLastResultId(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetLastResultId * soap_new_req___tempuri__GetLastResultId(
	struct soap *soap)
{
	struct __tempuri__GetLastResultId *_p = ::soap_new___tempuri__GetLastResultId(soap);
	if (_p)
	{	::soap_default___tempuri__GetLastResultId(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetLastResultId * soap_new_set___tempuri__GetLastResultId(
	struct soap *soap,
	_ns2__GetLastResultId *ns2__GetLastResultId)
{
	struct __tempuri__GetLastResultId *_p = ::soap_new___tempuri__GetLastResultId(soap);
	if (_p)
	{	::soap_default___tempuri__GetLastResultId(soap, _p);
		_p->ns2__GetLastResultId = ns2__GetLastResultId;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetLastResultId(struct soap*, const struct __tempuri__GetLastResultId *, const char*, const char*);

inline int soap_write___tempuri__GetLastResultId(struct soap *soap, struct __tempuri__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetLastResultId(soap, p), 0) || ::soap_put___tempuri__GetLastResultId(soap, p, "-tempuri:GetLastResultId", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetLastResultId(struct soap *soap, const char *URL, struct __tempuri__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastResultId(soap, p), 0) || ::soap_put___tempuri__GetLastResultId(soap, p, "-tempuri:GetLastResultId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetLastResultId(struct soap *soap, const char *URL, struct __tempuri__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastResultId(soap, p), 0) || ::soap_put___tempuri__GetLastResultId(soap, p, "-tempuri:GetLastResultId", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetLastResultId(struct soap *soap, const char *URL, struct __tempuri__GetLastResultId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastResultId(soap, p), 0) || ::soap_put___tempuri__GetLastResultId(soap, p, "-tempuri:GetLastResultId", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetLastResultId * SOAP_FMAC4 soap_get___tempuri__GetLastResultId(struct soap*, struct __tempuri__GetLastResultId *, const char*, const char*);

inline int soap_read___tempuri__GetLastResultId(struct soap *soap, struct __tempuri__GetLastResultId *p)
{
	if (p)
	{	::soap_default___tempuri__GetLastResultId(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetLastResultId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetLastResultId(struct soap *soap, const char *URL, struct __tempuri__GetLastResultId *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetLastResultId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetLastResultId(struct soap *soap, struct __tempuri__GetLastResultId *p)
{
	if (::soap_read___tempuri__GetLastResultId(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetLastResult_DEFINED
#define SOAP_TYPE___tempuri__GetLastResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetLastResult(struct soap*, struct __tempuri__GetLastResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetLastResult(struct soap*, const struct __tempuri__GetLastResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetLastResult(struct soap*, const char*, int, const struct __tempuri__GetLastResult *, const char*);
SOAP_FMAC3 struct __tempuri__GetLastResult * SOAP_FMAC4 soap_in___tempuri__GetLastResult(struct soap*, const char*, struct __tempuri__GetLastResult *, const char*);
SOAP_FMAC1 struct __tempuri__GetLastResult * SOAP_FMAC2 soap_instantiate___tempuri__GetLastResult(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetLastResult * soap_new___tempuri__GetLastResult(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetLastResult(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetLastResult * soap_new_req___tempuri__GetLastResult(
	struct soap *soap)
{
	struct __tempuri__GetLastResult *_p = ::soap_new___tempuri__GetLastResult(soap);
	if (_p)
	{	::soap_default___tempuri__GetLastResult(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetLastResult * soap_new_set___tempuri__GetLastResult(
	struct soap *soap,
	_ns2__GetLastResult *ns2__GetLastResult)
{
	struct __tempuri__GetLastResult *_p = ::soap_new___tempuri__GetLastResult(soap);
	if (_p)
	{	::soap_default___tempuri__GetLastResult(soap, _p);
		_p->ns2__GetLastResult = ns2__GetLastResult;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetLastResult(struct soap*, const struct __tempuri__GetLastResult *, const char*, const char*);

inline int soap_write___tempuri__GetLastResult(struct soap *soap, struct __tempuri__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetLastResult(soap, p), 0) || ::soap_put___tempuri__GetLastResult(soap, p, "-tempuri:GetLastResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetLastResult(struct soap *soap, const char *URL, struct __tempuri__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastResult(soap, p), 0) || ::soap_put___tempuri__GetLastResult(soap, p, "-tempuri:GetLastResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetLastResult(struct soap *soap, const char *URL, struct __tempuri__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastResult(soap, p), 0) || ::soap_put___tempuri__GetLastResult(soap, p, "-tempuri:GetLastResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetLastResult(struct soap *soap, const char *URL, struct __tempuri__GetLastResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetLastResult(soap, p), 0) || ::soap_put___tempuri__GetLastResult(soap, p, "-tempuri:GetLastResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetLastResult * SOAP_FMAC4 soap_get___tempuri__GetLastResult(struct soap*, struct __tempuri__GetLastResult *, const char*, const char*);

inline int soap_read___tempuri__GetLastResult(struct soap *soap, struct __tempuri__GetLastResult *p)
{
	if (p)
	{	::soap_default___tempuri__GetLastResult(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetLastResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetLastResult(struct soap *soap, const char *URL, struct __tempuri__GetLastResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetLastResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetLastResult(struct soap *soap, struct __tempuri__GetLastResult *p)
{
	if (::soap_read___tempuri__GetLastResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetResults_DEFINED
#define SOAP_TYPE___tempuri__GetResults_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetResults(struct soap*, struct __tempuri__GetResults *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetResults(struct soap*, const struct __tempuri__GetResults *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetResults(struct soap*, const char*, int, const struct __tempuri__GetResults *, const char*);
SOAP_FMAC3 struct __tempuri__GetResults * SOAP_FMAC4 soap_in___tempuri__GetResults(struct soap*, const char*, struct __tempuri__GetResults *, const char*);
SOAP_FMAC1 struct __tempuri__GetResults * SOAP_FMAC2 soap_instantiate___tempuri__GetResults(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetResults * soap_new___tempuri__GetResults(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetResults(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetResults * soap_new_req___tempuri__GetResults(
	struct soap *soap)
{
	struct __tempuri__GetResults *_p = ::soap_new___tempuri__GetResults(soap);
	if (_p)
	{	::soap_default___tempuri__GetResults(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetResults * soap_new_set___tempuri__GetResults(
	struct soap *soap,
	_ns2__GetResults *ns2__GetResults)
{
	struct __tempuri__GetResults *_p = ::soap_new___tempuri__GetResults(soap);
	if (_p)
	{	::soap_default___tempuri__GetResults(soap, _p);
		_p->ns2__GetResults = ns2__GetResults;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetResults(struct soap*, const struct __tempuri__GetResults *, const char*, const char*);

inline int soap_write___tempuri__GetResults(struct soap *soap, struct __tempuri__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetResults(soap, p), 0) || ::soap_put___tempuri__GetResults(soap, p, "-tempuri:GetResults", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetResults(struct soap *soap, const char *URL, struct __tempuri__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetResults(soap, p), 0) || ::soap_put___tempuri__GetResults(soap, p, "-tempuri:GetResults", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetResults(struct soap *soap, const char *URL, struct __tempuri__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetResults(soap, p), 0) || ::soap_put___tempuri__GetResults(soap, p, "-tempuri:GetResults", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetResults(struct soap *soap, const char *URL, struct __tempuri__GetResults const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetResults(soap, p), 0) || ::soap_put___tempuri__GetResults(soap, p, "-tempuri:GetResults", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetResults * SOAP_FMAC4 soap_get___tempuri__GetResults(struct soap*, struct __tempuri__GetResults *, const char*, const char*);

inline int soap_read___tempuri__GetResults(struct soap *soap, struct __tempuri__GetResults *p)
{
	if (p)
	{	::soap_default___tempuri__GetResults(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetResults(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetResults(struct soap *soap, const char *URL, struct __tempuri__GetResults *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetResults(struct soap *soap, struct __tempuri__GetResults *p)
{
	if (::soap_read___tempuri__GetResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__SetSystemConfigurations_DEFINED
#define SOAP_TYPE___tempuri__SetSystemConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetSystemConfigurations(struct soap*, struct __tempuri__SetSystemConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetSystemConfigurations(struct soap*, const struct __tempuri__SetSystemConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetSystemConfigurations(struct soap*, const char*, int, const struct __tempuri__SetSystemConfigurations *, const char*);
SOAP_FMAC3 struct __tempuri__SetSystemConfigurations * SOAP_FMAC4 soap_in___tempuri__SetSystemConfigurations(struct soap*, const char*, struct __tempuri__SetSystemConfigurations *, const char*);
SOAP_FMAC1 struct __tempuri__SetSystemConfigurations * SOAP_FMAC2 soap_instantiate___tempuri__SetSystemConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__SetSystemConfigurations * soap_new___tempuri__SetSystemConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__SetSystemConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__SetSystemConfigurations * soap_new_req___tempuri__SetSystemConfigurations(
	struct soap *soap)
{
	struct __tempuri__SetSystemConfigurations *_p = ::soap_new___tempuri__SetSystemConfigurations(soap);
	if (_p)
	{	::soap_default___tempuri__SetSystemConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tempuri__SetSystemConfigurations * soap_new_set___tempuri__SetSystemConfigurations(
	struct soap *soap,
	_ns2__SetSystemConfigurations *ns2__SetSystemConfigurations)
{
	struct __tempuri__SetSystemConfigurations *_p = ::soap_new___tempuri__SetSystemConfigurations(soap);
	if (_p)
	{	::soap_default___tempuri__SetSystemConfigurations(soap, _p);
		_p->ns2__SetSystemConfigurations = ns2__SetSystemConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetSystemConfigurations(struct soap*, const struct __tempuri__SetSystemConfigurations *, const char*, const char*);

inline int soap_write___tempuri__SetSystemConfigurations(struct soap *soap, struct __tempuri__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__SetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__SetSystemConfigurations(soap, p, "-tempuri:SetSystemConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__SetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__SetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__SetSystemConfigurations(soap, p, "-tempuri:SetSystemConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__SetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__SetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__SetSystemConfigurations(soap, p, "-tempuri:SetSystemConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__SetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__SetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__SetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__SetSystemConfigurations(soap, p, "-tempuri:SetSystemConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__SetSystemConfigurations * SOAP_FMAC4 soap_get___tempuri__SetSystemConfigurations(struct soap*, struct __tempuri__SetSystemConfigurations *, const char*, const char*);

inline int soap_read___tempuri__SetSystemConfigurations(struct soap *soap, struct __tempuri__SetSystemConfigurations *p)
{
	if (p)
	{	::soap_default___tempuri__SetSystemConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__SetSystemConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__SetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__SetSystemConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__SetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__SetSystemConfigurations(struct soap *soap, struct __tempuri__SetSystemConfigurations *p)
{
	if (::soap_read___tempuri__SetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetSystemConfigurations_DEFINED
#define SOAP_TYPE___tempuri__GetSystemConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetSystemConfigurations(struct soap*, struct __tempuri__GetSystemConfigurations *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetSystemConfigurations(struct soap*, const struct __tempuri__GetSystemConfigurations *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetSystemConfigurations(struct soap*, const char*, int, const struct __tempuri__GetSystemConfigurations *, const char*);
SOAP_FMAC3 struct __tempuri__GetSystemConfigurations * SOAP_FMAC4 soap_in___tempuri__GetSystemConfigurations(struct soap*, const char*, struct __tempuri__GetSystemConfigurations *, const char*);
SOAP_FMAC1 struct __tempuri__GetSystemConfigurations * SOAP_FMAC2 soap_instantiate___tempuri__GetSystemConfigurations(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetSystemConfigurations * soap_new___tempuri__GetSystemConfigurations(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetSystemConfigurations(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetSystemConfigurations * soap_new_req___tempuri__GetSystemConfigurations(
	struct soap *soap)
{
	struct __tempuri__GetSystemConfigurations *_p = ::soap_new___tempuri__GetSystemConfigurations(soap);
	if (_p)
	{	::soap_default___tempuri__GetSystemConfigurations(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetSystemConfigurations * soap_new_set___tempuri__GetSystemConfigurations(
	struct soap *soap,
	_ns2__GetSystemConfigurations *ns2__GetSystemConfigurations)
{
	struct __tempuri__GetSystemConfigurations *_p = ::soap_new___tempuri__GetSystemConfigurations(soap);
	if (_p)
	{	::soap_default___tempuri__GetSystemConfigurations(soap, _p);
		_p->ns2__GetSystemConfigurations = ns2__GetSystemConfigurations;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetSystemConfigurations(struct soap*, const struct __tempuri__GetSystemConfigurations *, const char*, const char*);

inline int soap_write___tempuri__GetSystemConfigurations(struct soap *soap, struct __tempuri__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__GetSystemConfigurations(soap, p, "-tempuri:GetSystemConfigurations", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__GetSystemConfigurations(soap, p, "-tempuri:GetSystemConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__GetSystemConfigurations(soap, p, "-tempuri:GetSystemConfigurations", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__GetSystemConfigurations const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetSystemConfigurations(soap, p), 0) || ::soap_put___tempuri__GetSystemConfigurations(soap, p, "-tempuri:GetSystemConfigurations", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetSystemConfigurations * SOAP_FMAC4 soap_get___tempuri__GetSystemConfigurations(struct soap*, struct __tempuri__GetSystemConfigurations *, const char*, const char*);

inline int soap_read___tempuri__GetSystemConfigurations(struct soap *soap, struct __tempuri__GetSystemConfigurations *p)
{
	if (p)
	{	::soap_default___tempuri__GetSystemConfigurations(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetSystemConfigurations(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetSystemConfigurations(struct soap *soap, const char *URL, struct __tempuri__GetSystemConfigurations *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetSystemConfigurations(struct soap *soap, struct __tempuri__GetSystemConfigurations *p)
{
	if (::soap_read___tempuri__GetSystemConfigurations(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__SetIgnoreClearing_DEFINED
#define SOAP_TYPE___tempuri__SetIgnoreClearing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__SetIgnoreClearing(struct soap*, struct __tempuri__SetIgnoreClearing *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__SetIgnoreClearing(struct soap*, const struct __tempuri__SetIgnoreClearing *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__SetIgnoreClearing(struct soap*, const char*, int, const struct __tempuri__SetIgnoreClearing *, const char*);
SOAP_FMAC3 struct __tempuri__SetIgnoreClearing * SOAP_FMAC4 soap_in___tempuri__SetIgnoreClearing(struct soap*, const char*, struct __tempuri__SetIgnoreClearing *, const char*);
SOAP_FMAC1 struct __tempuri__SetIgnoreClearing * SOAP_FMAC2 soap_instantiate___tempuri__SetIgnoreClearing(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__SetIgnoreClearing * soap_new___tempuri__SetIgnoreClearing(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__SetIgnoreClearing(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__SetIgnoreClearing * soap_new_req___tempuri__SetIgnoreClearing(
	struct soap *soap)
{
	struct __tempuri__SetIgnoreClearing *_p = ::soap_new___tempuri__SetIgnoreClearing(soap);
	if (_p)
	{	::soap_default___tempuri__SetIgnoreClearing(soap, _p);
	}
	return _p;
}

inline struct __tempuri__SetIgnoreClearing * soap_new_set___tempuri__SetIgnoreClearing(
	struct soap *soap,
	_ns2__SetIgnoreClearing *ns2__SetIgnoreClearing)
{
	struct __tempuri__SetIgnoreClearing *_p = ::soap_new___tempuri__SetIgnoreClearing(soap);
	if (_p)
	{	::soap_default___tempuri__SetIgnoreClearing(soap, _p);
		_p->ns2__SetIgnoreClearing = ns2__SetIgnoreClearing;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__SetIgnoreClearing(struct soap*, const struct __tempuri__SetIgnoreClearing *, const char*, const char*);

inline int soap_write___tempuri__SetIgnoreClearing(struct soap *soap, struct __tempuri__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__SetIgnoreClearing(soap, p), 0) || ::soap_put___tempuri__SetIgnoreClearing(soap, p, "-tempuri:SetIgnoreClearing", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__SetIgnoreClearing(struct soap *soap, const char *URL, struct __tempuri__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__SetIgnoreClearing(soap, p), 0) || ::soap_put___tempuri__SetIgnoreClearing(soap, p, "-tempuri:SetIgnoreClearing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__SetIgnoreClearing(struct soap *soap, const char *URL, struct __tempuri__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__SetIgnoreClearing(soap, p), 0) || ::soap_put___tempuri__SetIgnoreClearing(soap, p, "-tempuri:SetIgnoreClearing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__SetIgnoreClearing(struct soap *soap, const char *URL, struct __tempuri__SetIgnoreClearing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__SetIgnoreClearing(soap, p), 0) || ::soap_put___tempuri__SetIgnoreClearing(soap, p, "-tempuri:SetIgnoreClearing", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__SetIgnoreClearing * SOAP_FMAC4 soap_get___tempuri__SetIgnoreClearing(struct soap*, struct __tempuri__SetIgnoreClearing *, const char*, const char*);

inline int soap_read___tempuri__SetIgnoreClearing(struct soap *soap, struct __tempuri__SetIgnoreClearing *p)
{
	if (p)
	{	::soap_default___tempuri__SetIgnoreClearing(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__SetIgnoreClearing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__SetIgnoreClearing(struct soap *soap, const char *URL, struct __tempuri__SetIgnoreClearing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__SetIgnoreClearing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__SetIgnoreClearing(struct soap *soap, struct __tempuri__SetIgnoreClearing *p)
{
	if (::soap_read___tempuri__SetIgnoreClearing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__GetProcessingInfo_DEFINED
#define SOAP_TYPE___tempuri__GetProcessingInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__GetProcessingInfo(struct soap*, struct __tempuri__GetProcessingInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__GetProcessingInfo(struct soap*, const struct __tempuri__GetProcessingInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__GetProcessingInfo(struct soap*, const char*, int, const struct __tempuri__GetProcessingInfo *, const char*);
SOAP_FMAC3 struct __tempuri__GetProcessingInfo * SOAP_FMAC4 soap_in___tempuri__GetProcessingInfo(struct soap*, const char*, struct __tempuri__GetProcessingInfo *, const char*);
SOAP_FMAC1 struct __tempuri__GetProcessingInfo * SOAP_FMAC2 soap_instantiate___tempuri__GetProcessingInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__GetProcessingInfo * soap_new___tempuri__GetProcessingInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__GetProcessingInfo(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__GetProcessingInfo * soap_new_req___tempuri__GetProcessingInfo(
	struct soap *soap)
{
	struct __tempuri__GetProcessingInfo *_p = ::soap_new___tempuri__GetProcessingInfo(soap);
	if (_p)
	{	::soap_default___tempuri__GetProcessingInfo(soap, _p);
	}
	return _p;
}

inline struct __tempuri__GetProcessingInfo * soap_new_set___tempuri__GetProcessingInfo(
	struct soap *soap,
	_ns2__GetProcessingInfo *ns2__GetProcessingInfo)
{
	struct __tempuri__GetProcessingInfo *_p = ::soap_new___tempuri__GetProcessingInfo(soap);
	if (_p)
	{	::soap_default___tempuri__GetProcessingInfo(soap, _p);
		_p->ns2__GetProcessingInfo = ns2__GetProcessingInfo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__GetProcessingInfo(struct soap*, const struct __tempuri__GetProcessingInfo *, const char*, const char*);

inline int soap_write___tempuri__GetProcessingInfo(struct soap *soap, struct __tempuri__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__GetProcessingInfo(soap, p), 0) || ::soap_put___tempuri__GetProcessingInfo(soap, p, "-tempuri:GetProcessingInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__GetProcessingInfo(struct soap *soap, const char *URL, struct __tempuri__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetProcessingInfo(soap, p), 0) || ::soap_put___tempuri__GetProcessingInfo(soap, p, "-tempuri:GetProcessingInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__GetProcessingInfo(struct soap *soap, const char *URL, struct __tempuri__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetProcessingInfo(soap, p), 0) || ::soap_put___tempuri__GetProcessingInfo(soap, p, "-tempuri:GetProcessingInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__GetProcessingInfo(struct soap *soap, const char *URL, struct __tempuri__GetProcessingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__GetProcessingInfo(soap, p), 0) || ::soap_put___tempuri__GetProcessingInfo(soap, p, "-tempuri:GetProcessingInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__GetProcessingInfo * SOAP_FMAC4 soap_get___tempuri__GetProcessingInfo(struct soap*, struct __tempuri__GetProcessingInfo *, const char*, const char*);

inline int soap_read___tempuri__GetProcessingInfo(struct soap *soap, struct __tempuri__GetProcessingInfo *p)
{
	if (p)
	{	::soap_default___tempuri__GetProcessingInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__GetProcessingInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__GetProcessingInfo(struct soap *soap, const char *URL, struct __tempuri__GetProcessingInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__GetProcessingInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__GetProcessingInfo(struct soap *soap, struct __tempuri__GetProcessingInfo *p)
{
	if (::soap_read___tempuri__GetProcessingInfo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__AbortAnalyzing_DEFINED
#define SOAP_TYPE___tempuri__AbortAnalyzing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__AbortAnalyzing(struct soap*, struct __tempuri__AbortAnalyzing *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__AbortAnalyzing(struct soap*, const struct __tempuri__AbortAnalyzing *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__AbortAnalyzing(struct soap*, const char*, int, const struct __tempuri__AbortAnalyzing *, const char*);
SOAP_FMAC3 struct __tempuri__AbortAnalyzing * SOAP_FMAC4 soap_in___tempuri__AbortAnalyzing(struct soap*, const char*, struct __tempuri__AbortAnalyzing *, const char*);
SOAP_FMAC1 struct __tempuri__AbortAnalyzing * SOAP_FMAC2 soap_instantiate___tempuri__AbortAnalyzing(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__AbortAnalyzing * soap_new___tempuri__AbortAnalyzing(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__AbortAnalyzing(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__AbortAnalyzing * soap_new_req___tempuri__AbortAnalyzing(
	struct soap *soap)
{
	struct __tempuri__AbortAnalyzing *_p = ::soap_new___tempuri__AbortAnalyzing(soap);
	if (_p)
	{	::soap_default___tempuri__AbortAnalyzing(soap, _p);
	}
	return _p;
}

inline struct __tempuri__AbortAnalyzing * soap_new_set___tempuri__AbortAnalyzing(
	struct soap *soap,
	_ns2__AbortAnalyzing *ns2__AbortAnalyzing)
{
	struct __tempuri__AbortAnalyzing *_p = ::soap_new___tempuri__AbortAnalyzing(soap);
	if (_p)
	{	::soap_default___tempuri__AbortAnalyzing(soap, _p);
		_p->ns2__AbortAnalyzing = ns2__AbortAnalyzing;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__AbortAnalyzing(struct soap*, const struct __tempuri__AbortAnalyzing *, const char*, const char*);

inline int soap_write___tempuri__AbortAnalyzing(struct soap *soap, struct __tempuri__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__AbortAnalyzing(soap, p), 0) || ::soap_put___tempuri__AbortAnalyzing(soap, p, "-tempuri:AbortAnalyzing", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__AbortAnalyzing(struct soap *soap, const char *URL, struct __tempuri__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__AbortAnalyzing(soap, p), 0) || ::soap_put___tempuri__AbortAnalyzing(soap, p, "-tempuri:AbortAnalyzing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__AbortAnalyzing(struct soap *soap, const char *URL, struct __tempuri__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__AbortAnalyzing(soap, p), 0) || ::soap_put___tempuri__AbortAnalyzing(soap, p, "-tempuri:AbortAnalyzing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__AbortAnalyzing(struct soap *soap, const char *URL, struct __tempuri__AbortAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__AbortAnalyzing(soap, p), 0) || ::soap_put___tempuri__AbortAnalyzing(soap, p, "-tempuri:AbortAnalyzing", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__AbortAnalyzing * SOAP_FMAC4 soap_get___tempuri__AbortAnalyzing(struct soap*, struct __tempuri__AbortAnalyzing *, const char*, const char*);

inline int soap_read___tempuri__AbortAnalyzing(struct soap *soap, struct __tempuri__AbortAnalyzing *p)
{
	if (p)
	{	::soap_default___tempuri__AbortAnalyzing(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__AbortAnalyzing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__AbortAnalyzing(struct soap *soap, const char *URL, struct __tempuri__AbortAnalyzing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__AbortAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__AbortAnalyzing(struct soap *soap, struct __tempuri__AbortAnalyzing *p)
{
	if (::soap_read___tempuri__AbortAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__StopAnalyzing_DEFINED
#define SOAP_TYPE___tempuri__StopAnalyzing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__StopAnalyzing(struct soap*, struct __tempuri__StopAnalyzing *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__StopAnalyzing(struct soap*, const struct __tempuri__StopAnalyzing *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__StopAnalyzing(struct soap*, const char*, int, const struct __tempuri__StopAnalyzing *, const char*);
SOAP_FMAC3 struct __tempuri__StopAnalyzing * SOAP_FMAC4 soap_in___tempuri__StopAnalyzing(struct soap*, const char*, struct __tempuri__StopAnalyzing *, const char*);
SOAP_FMAC1 struct __tempuri__StopAnalyzing * SOAP_FMAC2 soap_instantiate___tempuri__StopAnalyzing(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__StopAnalyzing * soap_new___tempuri__StopAnalyzing(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__StopAnalyzing(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__StopAnalyzing * soap_new_req___tempuri__StopAnalyzing(
	struct soap *soap)
{
	struct __tempuri__StopAnalyzing *_p = ::soap_new___tempuri__StopAnalyzing(soap);
	if (_p)
	{	::soap_default___tempuri__StopAnalyzing(soap, _p);
	}
	return _p;
}

inline struct __tempuri__StopAnalyzing * soap_new_set___tempuri__StopAnalyzing(
	struct soap *soap,
	_ns2__StopAnalyzing *ns2__StopAnalyzing)
{
	struct __tempuri__StopAnalyzing *_p = ::soap_new___tempuri__StopAnalyzing(soap);
	if (_p)
	{	::soap_default___tempuri__StopAnalyzing(soap, _p);
		_p->ns2__StopAnalyzing = ns2__StopAnalyzing;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__StopAnalyzing(struct soap*, const struct __tempuri__StopAnalyzing *, const char*, const char*);

inline int soap_write___tempuri__StopAnalyzing(struct soap *soap, struct __tempuri__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__StopAnalyzing(soap, p), 0) || ::soap_put___tempuri__StopAnalyzing(soap, p, "-tempuri:StopAnalyzing", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__StopAnalyzing(struct soap *soap, const char *URL, struct __tempuri__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StopAnalyzing(soap, p), 0) || ::soap_put___tempuri__StopAnalyzing(soap, p, "-tempuri:StopAnalyzing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__StopAnalyzing(struct soap *soap, const char *URL, struct __tempuri__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StopAnalyzing(soap, p), 0) || ::soap_put___tempuri__StopAnalyzing(soap, p, "-tempuri:StopAnalyzing", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__StopAnalyzing(struct soap *soap, const char *URL, struct __tempuri__StopAnalyzing const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StopAnalyzing(soap, p), 0) || ::soap_put___tempuri__StopAnalyzing(soap, p, "-tempuri:StopAnalyzing", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__StopAnalyzing * SOAP_FMAC4 soap_get___tempuri__StopAnalyzing(struct soap*, struct __tempuri__StopAnalyzing *, const char*, const char*);

inline int soap_read___tempuri__StopAnalyzing(struct soap *soap, struct __tempuri__StopAnalyzing *p)
{
	if (p)
	{	::soap_default___tempuri__StopAnalyzing(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__StopAnalyzing(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__StopAnalyzing(struct soap *soap, const char *URL, struct __tempuri__StopAnalyzing *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__StopAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__StopAnalyzing(struct soap *soap, struct __tempuri__StopAnalyzing *p)
{
	if (::soap_read___tempuri__StopAnalyzing(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__StartOperation_DEFINED
#define SOAP_TYPE___tempuri__StartOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__StartOperation(struct soap*, struct __tempuri__StartOperation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__StartOperation(struct soap*, const struct __tempuri__StartOperation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__StartOperation(struct soap*, const char*, int, const struct __tempuri__StartOperation *, const char*);
SOAP_FMAC3 struct __tempuri__StartOperation * SOAP_FMAC4 soap_in___tempuri__StartOperation(struct soap*, const char*, struct __tempuri__StartOperation *, const char*);
SOAP_FMAC1 struct __tempuri__StartOperation * SOAP_FMAC2 soap_instantiate___tempuri__StartOperation(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__StartOperation * soap_new___tempuri__StartOperation(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__StartOperation(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__StartOperation * soap_new_req___tempuri__StartOperation(
	struct soap *soap)
{
	struct __tempuri__StartOperation *_p = ::soap_new___tempuri__StartOperation(soap);
	if (_p)
	{	::soap_default___tempuri__StartOperation(soap, _p);
	}
	return _p;
}

inline struct __tempuri__StartOperation * soap_new_set___tempuri__StartOperation(
	struct soap *soap,
	_ns2__StartOperation *ns2__StartOperation)
{
	struct __tempuri__StartOperation *_p = ::soap_new___tempuri__StartOperation(soap);
	if (_p)
	{	::soap_default___tempuri__StartOperation(soap, _p);
		_p->ns2__StartOperation = ns2__StartOperation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__StartOperation(struct soap*, const struct __tempuri__StartOperation *, const char*, const char*);

inline int soap_write___tempuri__StartOperation(struct soap *soap, struct __tempuri__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__StartOperation(soap, p), 0) || ::soap_put___tempuri__StartOperation(soap, p, "-tempuri:StartOperation", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__StartOperation(struct soap *soap, const char *URL, struct __tempuri__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StartOperation(soap, p), 0) || ::soap_put___tempuri__StartOperation(soap, p, "-tempuri:StartOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__StartOperation(struct soap *soap, const char *URL, struct __tempuri__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StartOperation(soap, p), 0) || ::soap_put___tempuri__StartOperation(soap, p, "-tempuri:StartOperation", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__StartOperation(struct soap *soap, const char *URL, struct __tempuri__StartOperation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StartOperation(soap, p), 0) || ::soap_put___tempuri__StartOperation(soap, p, "-tempuri:StartOperation", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__StartOperation * SOAP_FMAC4 soap_get___tempuri__StartOperation(struct soap*, struct __tempuri__StartOperation *, const char*, const char*);

inline int soap_read___tempuri__StartOperation(struct soap *soap, struct __tempuri__StartOperation *p)
{
	if (p)
	{	::soap_default___tempuri__StartOperation(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__StartOperation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__StartOperation(struct soap *soap, const char *URL, struct __tempuri__StartOperation *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__StartOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__StartOperation(struct soap *soap, struct __tempuri__StartOperation *p)
{
	if (::soap_read___tempuri__StartOperation(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___tempuri__StartAutoPlan_DEFINED
#define SOAP_TYPE___tempuri__StartAutoPlan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___tempuri__StartAutoPlan(struct soap*, struct __tempuri__StartAutoPlan *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___tempuri__StartAutoPlan(struct soap*, const struct __tempuri__StartAutoPlan *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___tempuri__StartAutoPlan(struct soap*, const char*, int, const struct __tempuri__StartAutoPlan *, const char*);
SOAP_FMAC3 struct __tempuri__StartAutoPlan * SOAP_FMAC4 soap_in___tempuri__StartAutoPlan(struct soap*, const char*, struct __tempuri__StartAutoPlan *, const char*);
SOAP_FMAC1 struct __tempuri__StartAutoPlan * SOAP_FMAC2 soap_instantiate___tempuri__StartAutoPlan(struct soap*, int, const char*, const char*, size_t*);

inline struct __tempuri__StartAutoPlan * soap_new___tempuri__StartAutoPlan(struct soap *soap, int n = -1)
{
	return soap_instantiate___tempuri__StartAutoPlan(soap, n, NULL, NULL, NULL);
}

inline struct __tempuri__StartAutoPlan * soap_new_req___tempuri__StartAutoPlan(
	struct soap *soap)
{
	struct __tempuri__StartAutoPlan *_p = ::soap_new___tempuri__StartAutoPlan(soap);
	if (_p)
	{	::soap_default___tempuri__StartAutoPlan(soap, _p);
	}
	return _p;
}

inline struct __tempuri__StartAutoPlan * soap_new_set___tempuri__StartAutoPlan(
	struct soap *soap,
	_ns2__StartAutoPlan *ns2__StartAutoPlan)
{
	struct __tempuri__StartAutoPlan *_p = ::soap_new___tempuri__StartAutoPlan(soap);
	if (_p)
	{	::soap_default___tempuri__StartAutoPlan(soap, _p);
		_p->ns2__StartAutoPlan = ns2__StartAutoPlan;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___tempuri__StartAutoPlan(struct soap*, const struct __tempuri__StartAutoPlan *, const char*, const char*);

inline int soap_write___tempuri__StartAutoPlan(struct soap *soap, struct __tempuri__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___tempuri__StartAutoPlan(soap, p), 0) || ::soap_put___tempuri__StartAutoPlan(soap, p, "-tempuri:StartAutoPlan", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___tempuri__StartAutoPlan(struct soap *soap, const char *URL, struct __tempuri__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StartAutoPlan(soap, p), 0) || ::soap_put___tempuri__StartAutoPlan(soap, p, "-tempuri:StartAutoPlan", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___tempuri__StartAutoPlan(struct soap *soap, const char *URL, struct __tempuri__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StartAutoPlan(soap, p), 0) || ::soap_put___tempuri__StartAutoPlan(soap, p, "-tempuri:StartAutoPlan", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___tempuri__StartAutoPlan(struct soap *soap, const char *URL, struct __tempuri__StartAutoPlan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___tempuri__StartAutoPlan(soap, p), 0) || ::soap_put___tempuri__StartAutoPlan(soap, p, "-tempuri:StartAutoPlan", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __tempuri__StartAutoPlan * SOAP_FMAC4 soap_get___tempuri__StartAutoPlan(struct soap*, struct __tempuri__StartAutoPlan *, const char*, const char*);

inline int soap_read___tempuri__StartAutoPlan(struct soap *soap, struct __tempuri__StartAutoPlan *p)
{
	if (p)
	{	::soap_default___tempuri__StartAutoPlan(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___tempuri__StartAutoPlan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___tempuri__StartAutoPlan(struct soap *soap, const char *URL, struct __tempuri__StartAutoPlan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___tempuri__StartAutoPlan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___tempuri__StartAutoPlan(struct soap *soap, struct __tempuri__StartAutoPlan *p)
{
	if (::soap_read___tempuri__StartAutoPlan(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___ser__anyType_DEFINED
#define SOAP_TYPE___ser__anyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ser__anyType(struct soap*, struct __ser__anyType *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ser__anyType(struct soap*, const struct __ser__anyType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ser__anyType(struct soap*, const char*, int, const struct __ser__anyType *, const char*);
SOAP_FMAC3 struct __ser__anyType * SOAP_FMAC4 soap_in___ser__anyType(struct soap*, const char*, struct __ser__anyType *, const char*);
SOAP_FMAC1 struct __ser__anyType * SOAP_FMAC2 soap_instantiate___ser__anyType(struct soap*, int, const char*, const char*, size_t*);

inline struct __ser__anyType * soap_new___ser__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate___ser__anyType(soap, n, NULL, NULL, NULL);
}

inline struct __ser__anyType * soap_new_req___ser__anyType(
	struct soap *soap,
	int __type,
	void *ser__anyType)
{
	struct __ser__anyType *_p = ::soap_new___ser__anyType(soap);
	if (_p)
	{	::soap_default___ser__anyType(soap, _p);
		_p->__type = __type;
		_p->ser__anyType = ser__anyType;
	}
	return _p;
}

inline struct __ser__anyType * soap_new_set___ser__anyType(
	struct soap *soap,
	int __type,
	void *ser__anyType)
{
	struct __ser__anyType *_p = ::soap_new___ser__anyType(soap);
	if (_p)
	{	::soap_default___ser__anyType(soap, _p);
		_p->__type = __type;
		_p->ser__anyType = ser__anyType;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ser__anyType(struct soap*, const struct __ser__anyType *, const char*, const char*);

inline int soap_write___ser__anyType(struct soap *soap, struct __ser__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ser__anyType(soap, p), 0) || ::soap_put___ser__anyType(soap, p, "-ser:anyType", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ser__anyType(struct soap *soap, const char *URL, struct __ser__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ser__anyType(soap, p), 0) || ::soap_put___ser__anyType(soap, p, "-ser:anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ser__anyType(struct soap *soap, const char *URL, struct __ser__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ser__anyType(soap, p), 0) || ::soap_put___ser__anyType(soap, p, "-ser:anyType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ser__anyType(struct soap *soap, const char *URL, struct __ser__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ser__anyType(soap, p), 0) || ::soap_put___ser__anyType(soap, p, "-ser:anyType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ser__anyType * SOAP_FMAC4 soap_get___ser__anyType(struct soap*, struct __ser__anyType *, const char*, const char*);

inline int soap_read___ser__anyType(struct soap *soap, struct __ser__anyType *p)
{
	if (p)
	{	::soap_default___ser__anyType(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ser__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ser__anyType(struct soap *soap, const char *URL, struct __ser__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ser__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ser__anyType(struct soap *soap, struct __ser__anyType *p)
{
	if (::soap_read___ser__anyType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
#define SOAP_TYPE_PointerTochan__ChannelInstanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTochan__ChannelInstanceType(struct soap*, const char *, int, struct chan__ChannelInstanceType *const*, const char *);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_in_PointerTochan__ChannelInstanceType(struct soap*, const char*, struct chan__ChannelInstanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType *const*, const char*, const char*);
SOAP_FMAC3 struct chan__ChannelInstanceType ** SOAP_FMAC4 soap_get_PointerTochan__ChannelInstanceType(struct soap*, struct chan__ChannelInstanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__FaultTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__FaultTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__FaultTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__FaultTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__ReplyTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__ReplyTo(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__ReplyTo(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__ReplyTo(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__From_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__From_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__From(struct soap*, const char *, int, struct wsa5__EndpointReferenceType *const*, const char *);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__From(struct soap*, const char*, struct wsa5__EndpointReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__EndpointReferenceType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__From(struct soap*, struct wsa5__EndpointReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
#define SOAP_TYPE_PointerTo_wsa5__RelatesTo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_wsa5__RelatesTo(struct soap*, const char *, int, struct wsa5__RelatesToType *const*, const char *);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_in_PointerTo_wsa5__RelatesTo(struct soap*, const char*, struct wsa5__RelatesToType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__RelatesToType ** SOAP_FMAC4 soap_get_PointerTo_wsa5__RelatesTo(struct soap*, struct wsa5__RelatesToType **, const char*, const char*);
#endif
/* _wsa5__ProblemIRI is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__ProblemIRI_DEFINED
#define SOAP_TYPE__wsa5__ProblemIRI_DEFINED

#define soap_default__wsa5__ProblemIRI soap_default_string


#define soap_serialize__wsa5__ProblemIRI soap_serialize_string


#define soap__wsa5__ProblemIRI2s(soap, a) (a)

#define soap_out__wsa5__ProblemIRI soap_out_string


#define soap_s2_wsa5__ProblemIRI(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__ProblemIRI soap_in_string


#define soap_instantiate__wsa5__ProblemIRI soap_instantiate_string


#define soap_new__wsa5__ProblemIRI soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__ProblemIRI(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__ProblemIRI(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__ProblemIRI(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__ProblemIRI(soap, p, "wsa5:ProblemIRI", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__ProblemIRI soap_get_string


#define soap_read__wsa5__ProblemIRI soap_read_string


#define soap_GET__wsa5__ProblemIRI soap_GET_string


#define soap_POST_recv__wsa5__ProblemIRI soap_POST_recv_string

#endif
/* _wsa5__ProblemHeaderQName is a typedef synonym of _QName */

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED
#define SOAP_TYPE__wsa5__ProblemHeaderQName_DEFINED

#define soap_default__wsa5__ProblemHeaderQName soap_default__QName


#define soap_serialize__wsa5__ProblemHeaderQName soap_serialize__QName


#define soap__wsa5__ProblemHeaderQName2s(soap, a) soap_QName2s(soap, (a))

#define soap_out__wsa5__ProblemHeaderQName soap_out__QName


#define soap_s2_wsa5__ProblemHeaderQName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)

#define soap_in__wsa5__ProblemHeaderQName soap_in__QName


#define soap_instantiate__wsa5__ProblemHeaderQName soap_instantiate__QName


#define soap_new__wsa5__ProblemHeaderQName soap_new__QName


#define soap_put__wsa5__ProblemHeaderQName soap_put__QName


#define soap_write__wsa5__ProblemHeaderQName soap_write__QName


#define soap_PUT__wsa5__ProblemHeaderQName soap_PUT__QName


#define soap_PATCH__wsa5__ProblemHeaderQName soap_PATCH__QName


#define soap_POST_send__wsa5__ProblemHeaderQName soap_POST_send__QName


#define soap_get__wsa5__ProblemHeaderQName soap_get__QName


#define soap_read__wsa5__ProblemHeaderQName soap_read__QName


#define soap_GET__wsa5__ProblemHeaderQName soap_GET__QName


#define soap_POST_recv__wsa5__ProblemHeaderQName soap_POST_recv__QName

#endif
/* _wsa5__Action is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__Action_DEFINED
#define SOAP_TYPE__wsa5__Action_DEFINED

#define soap_default__wsa5__Action soap_default_string


#define soap_serialize__wsa5__Action soap_serialize_string


#define soap__wsa5__Action2s(soap, a) (a)

#define soap_out__wsa5__Action soap_out_string


#define soap_s2_wsa5__Action(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__Action soap_in_string


#define soap_instantiate__wsa5__Action soap_instantiate_string


#define soap_new__wsa5__Action soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__Action(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__Action(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__Action(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__Action(soap, p, "wsa5:Action", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__Action soap_get_string


#define soap_read__wsa5__Action soap_read_string


#define soap_GET__wsa5__Action soap_GET_string


#define soap_POST_recv__wsa5__Action soap_POST_recv_string

#endif
/* _wsa5__To is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__To_DEFINED
#define SOAP_TYPE__wsa5__To_DEFINED

#define soap_default__wsa5__To soap_default_string


#define soap_serialize__wsa5__To soap_serialize_string


#define soap__wsa5__To2s(soap, a) (a)

#define soap_out__wsa5__To soap_out_string


#define soap_s2_wsa5__To(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__To soap_in_string


#define soap_instantiate__wsa5__To soap_instantiate_string


#define soap_new__wsa5__To soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__To(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__To(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__To(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__To(soap, p, "wsa5:To", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__To soap_get_string


#define soap_read__wsa5__To soap_read_string


#define soap_GET__wsa5__To soap_GET_string


#define soap_POST_recv__wsa5__To soap_POST_recv_string

#endif
/* _wsa5__MessageID is a typedef synonym of string */

#ifndef SOAP_TYPE__wsa5__MessageID_DEFINED
#define SOAP_TYPE__wsa5__MessageID_DEFINED

#define soap_default__wsa5__MessageID soap_default_string


#define soap_serialize__wsa5__MessageID soap_serialize_string


#define soap__wsa5__MessageID2s(soap, a) (a)

#define soap_out__wsa5__MessageID soap_out_string


#define soap_s2_wsa5__MessageID(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)

#define soap_in__wsa5__MessageID soap_in_string


#define soap_instantiate__wsa5__MessageID soap_instantiate_string


#define soap_new__wsa5__MessageID soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__wsa5__MessageID(struct soap*, char *const*, const char*, const char*);

inline int soap_write__wsa5__MessageID(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__wsa5__MessageID(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__wsa5__MessageID(soap, p, "wsa5:MessageID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

#define soap_get__wsa5__MessageID soap_get_string


#define soap_read__wsa5__MessageID soap_read_string


#define soap_GET__wsa5__MessageID soap_GET_string


#define soap_POST_recv__wsa5__MessageID soap_POST_recv_string

#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
#define SOAP_TYPE_PointerTowsa5__MetadataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__MetadataType(struct soap*, const char *, int, struct wsa5__MetadataType *const*, const char *);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_in_PointerTowsa5__MetadataType(struct soap*, const char*, struct wsa5__MetadataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__MetadataType ** SOAP_FMAC4 soap_get_PointerTowsa5__MetadataType(struct soap*, struct wsa5__MetadataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
#define SOAP_TYPE_PointerTowsa5__ReferenceParametersType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTowsa5__ReferenceParametersType(struct soap*, const char *, int, struct wsa5__ReferenceParametersType *const*, const char *);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_in_PointerTowsa5__ReferenceParametersType(struct soap*, const char*, struct wsa5__ReferenceParametersType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType *const*, const char*, const char*);
SOAP_FMAC3 struct wsa5__ReferenceParametersType ** SOAP_FMAC4 soap_get_PointerTowsa5__ReferenceParametersType(struct soap*, struct wsa5__ReferenceParametersType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType_DEFINED

inline void soap_default_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType
	*a = SOAP_DEFAULT_wsa5__FaultCodesOpenEnumType;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*);

#define soap_wsa5__FaultCodesOpenEnumType2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__FaultCodesOpenEnumType(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__FaultCodesOpenEnumType(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__FaultCodesOpenEnumType soap_instantiate_string


#define soap_new_wsa5__FaultCodesOpenEnumType soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__FaultCodesOpenEnumType(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__FaultCodesOpenEnumType(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__FaultCodesOpenEnumType(soap, p, "wsa5:FaultCodesOpenEnumType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__FaultCodesOpenEnumType(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__FaultCodesOpenEnumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__FaultCodesOpenEnumType(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__FaultCodesOpenEnumType(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__FaultCodesOpenEnumType(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum_DEFINED

inline void soap_default_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum
	*a = SOAP_DEFAULT_wsa5__RelationshipTypeOpenEnum;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*);

#define soap_wsa5__RelationshipTypeOpenEnum2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2wsa5__RelationshipTypeOpenEnum(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_wsa5__RelationshipTypeOpenEnum(struct soap*, const char*, char **, const char*);

#define soap_instantiate_wsa5__RelationshipTypeOpenEnum soap_instantiate_string


#define soap_new_wsa5__RelationshipTypeOpenEnum soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wsa5__RelationshipTypeOpenEnum(struct soap*, char *const*, const char*, const char*);

inline int soap_write_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_wsa5__RelationshipTypeOpenEnum(soap, p, "wsa5:RelationshipTypeOpenEnum", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_wsa5__RelationshipTypeOpenEnum(struct soap*, char **, const char*, const char*);

inline int soap_read_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_wsa5__RelationshipTypeOpenEnum(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_wsa5__RelationshipTypeOpenEnum(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_wsa5__RelationshipTypeOpenEnum(struct soap *soap, char **p)
{
	if (::soap_read_wsa5__RelationshipTypeOpenEnum(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetEventsSinceId_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetEventsSinceId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetEventsSinceId(struct soap*, _ns2__GetEventsSinceId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetEventsSinceId(struct soap*, const char *, int, _ns2__GetEventsSinceId *const*, const char *);
SOAP_FMAC3 _ns2__GetEventsSinceId ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetEventsSinceId(struct soap*, const char*, _ns2__GetEventsSinceId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetEventsSinceId(struct soap*, _ns2__GetEventsSinceId *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetEventsSinceId ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetEventsSinceId(struct soap*, _ns2__GetEventsSinceId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetLastEventId_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetLastEventId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetLastEventId(struct soap*, _ns2__GetLastEventId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetLastEventId(struct soap*, const char *, int, _ns2__GetLastEventId *const*, const char *);
SOAP_FMAC3 _ns2__GetLastEventId ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetLastEventId(struct soap*, const char*, _ns2__GetLastEventId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetLastEventId(struct soap*, _ns2__GetLastEventId *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetLastEventId ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetLastEventId(struct soap*, _ns2__GetLastEventId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetEvents_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetEvents(struct soap*, _ns2__GetEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetEvents(struct soap*, const char *, int, _ns2__GetEvents *const*, const char *);
SOAP_FMAC3 _ns2__GetEvents ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetEvents(struct soap*, const char*, _ns2__GetEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetEvents(struct soap*, _ns2__GetEvents *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetEvents ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetEvents(struct soap*, _ns2__GetEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetResultsSinceId_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetResultsSinceId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetResultsSinceId(struct soap*, _ns2__GetResultsSinceId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetResultsSinceId(struct soap*, const char *, int, _ns2__GetResultsSinceId *const*, const char *);
SOAP_FMAC3 _ns2__GetResultsSinceId ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetResultsSinceId(struct soap*, const char*, _ns2__GetResultsSinceId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetResultsSinceId(struct soap*, _ns2__GetResultsSinceId *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetResultsSinceId ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetResultsSinceId(struct soap*, _ns2__GetResultsSinceId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetLastResultId_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetLastResultId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetLastResultId(struct soap*, _ns2__GetLastResultId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetLastResultId(struct soap*, const char *, int, _ns2__GetLastResultId *const*, const char *);
SOAP_FMAC3 _ns2__GetLastResultId ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetLastResultId(struct soap*, const char*, _ns2__GetLastResultId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetLastResultId(struct soap*, _ns2__GetLastResultId *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetLastResultId ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetLastResultId(struct soap*, _ns2__GetLastResultId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetLastResult_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetLastResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetLastResult(struct soap*, _ns2__GetLastResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetLastResult(struct soap*, const char *, int, _ns2__GetLastResult *const*, const char *);
SOAP_FMAC3 _ns2__GetLastResult ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetLastResult(struct soap*, const char*, _ns2__GetLastResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetLastResult(struct soap*, _ns2__GetLastResult *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetLastResult ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetLastResult(struct soap*, _ns2__GetLastResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetResults_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetResults_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetResults(struct soap*, _ns2__GetResults *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetResults(struct soap*, const char *, int, _ns2__GetResults *const*, const char *);
SOAP_FMAC3 _ns2__GetResults ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetResults(struct soap*, const char*, _ns2__GetResults **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetResults(struct soap*, _ns2__GetResults *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetResults ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetResults(struct soap*, _ns2__GetResults **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__SetSystemConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_ns2__SetSystemConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__SetSystemConfigurations(struct soap*, _ns2__SetSystemConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__SetSystemConfigurations(struct soap*, const char *, int, _ns2__SetSystemConfigurations *const*, const char *);
SOAP_FMAC3 _ns2__SetSystemConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns2__SetSystemConfigurations(struct soap*, const char*, _ns2__SetSystemConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__SetSystemConfigurations(struct soap*, _ns2__SetSystemConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _ns2__SetSystemConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns2__SetSystemConfigurations(struct soap*, _ns2__SetSystemConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetSystemConfigurations_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetSystemConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetSystemConfigurations(struct soap*, _ns2__GetSystemConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetSystemConfigurations(struct soap*, const char *, int, _ns2__GetSystemConfigurations *const*, const char *);
SOAP_FMAC3 _ns2__GetSystemConfigurations ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetSystemConfigurations(struct soap*, const char*, _ns2__GetSystemConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetSystemConfigurations(struct soap*, _ns2__GetSystemConfigurations *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetSystemConfigurations ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetSystemConfigurations(struct soap*, _ns2__GetSystemConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__SetIgnoreClearing_DEFINED
#define SOAP_TYPE_PointerTo_ns2__SetIgnoreClearing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__SetIgnoreClearing(struct soap*, _ns2__SetIgnoreClearing *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__SetIgnoreClearing(struct soap*, const char *, int, _ns2__SetIgnoreClearing *const*, const char *);
SOAP_FMAC3 _ns2__SetIgnoreClearing ** SOAP_FMAC4 soap_in_PointerTo_ns2__SetIgnoreClearing(struct soap*, const char*, _ns2__SetIgnoreClearing **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__SetIgnoreClearing(struct soap*, _ns2__SetIgnoreClearing *const*, const char*, const char*);
SOAP_FMAC3 _ns2__SetIgnoreClearing ** SOAP_FMAC4 soap_get_PointerTo_ns2__SetIgnoreClearing(struct soap*, _ns2__SetIgnoreClearing **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__GetProcessingInfo_DEFINED
#define SOAP_TYPE_PointerTo_ns2__GetProcessingInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__GetProcessingInfo(struct soap*, _ns2__GetProcessingInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__GetProcessingInfo(struct soap*, const char *, int, _ns2__GetProcessingInfo *const*, const char *);
SOAP_FMAC3 _ns2__GetProcessingInfo ** SOAP_FMAC4 soap_in_PointerTo_ns2__GetProcessingInfo(struct soap*, const char*, _ns2__GetProcessingInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__GetProcessingInfo(struct soap*, _ns2__GetProcessingInfo *const*, const char*, const char*);
SOAP_FMAC3 _ns2__GetProcessingInfo ** SOAP_FMAC4 soap_get_PointerTo_ns2__GetProcessingInfo(struct soap*, _ns2__GetProcessingInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__AbortAnalyzing_DEFINED
#define SOAP_TYPE_PointerTo_ns2__AbortAnalyzing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__AbortAnalyzing(struct soap*, _ns2__AbortAnalyzing *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__AbortAnalyzing(struct soap*, const char *, int, _ns2__AbortAnalyzing *const*, const char *);
SOAP_FMAC3 _ns2__AbortAnalyzing ** SOAP_FMAC4 soap_in_PointerTo_ns2__AbortAnalyzing(struct soap*, const char*, _ns2__AbortAnalyzing **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__AbortAnalyzing(struct soap*, _ns2__AbortAnalyzing *const*, const char*, const char*);
SOAP_FMAC3 _ns2__AbortAnalyzing ** SOAP_FMAC4 soap_get_PointerTo_ns2__AbortAnalyzing(struct soap*, _ns2__AbortAnalyzing **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__StopAnalyzing_DEFINED
#define SOAP_TYPE_PointerTo_ns2__StopAnalyzing_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__StopAnalyzing(struct soap*, _ns2__StopAnalyzing *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__StopAnalyzing(struct soap*, const char *, int, _ns2__StopAnalyzing *const*, const char *);
SOAP_FMAC3 _ns2__StopAnalyzing ** SOAP_FMAC4 soap_in_PointerTo_ns2__StopAnalyzing(struct soap*, const char*, _ns2__StopAnalyzing **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__StopAnalyzing(struct soap*, _ns2__StopAnalyzing *const*, const char*, const char*);
SOAP_FMAC3 _ns2__StopAnalyzing ** SOAP_FMAC4 soap_get_PointerTo_ns2__StopAnalyzing(struct soap*, _ns2__StopAnalyzing **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__StartOperation_DEFINED
#define SOAP_TYPE_PointerTo_ns2__StartOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__StartOperation(struct soap*, _ns2__StartOperation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__StartOperation(struct soap*, const char *, int, _ns2__StartOperation *const*, const char *);
SOAP_FMAC3 _ns2__StartOperation ** SOAP_FMAC4 soap_in_PointerTo_ns2__StartOperation(struct soap*, const char*, _ns2__StartOperation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__StartOperation(struct soap*, _ns2__StartOperation *const*, const char*, const char*);
SOAP_FMAC3 _ns2__StartOperation ** SOAP_FMAC4 soap_get_PointerTo_ns2__StartOperation(struct soap*, _ns2__StartOperation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns2__StartAutoPlan_DEFINED
#define SOAP_TYPE_PointerTo_ns2__StartAutoPlan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns2__StartAutoPlan(struct soap*, _ns2__StartAutoPlan *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns2__StartAutoPlan(struct soap*, const char *, int, _ns2__StartAutoPlan *const*, const char *);
SOAP_FMAC3 _ns2__StartAutoPlan ** SOAP_FMAC4 soap_in_PointerTo_ns2__StartAutoPlan(struct soap*, const char*, _ns2__StartAutoPlan **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns2__StartAutoPlan(struct soap*, _ns2__StartAutoPlan *const*, const char*, const char*);
SOAP_FMAC3 _ns2__StartAutoPlan ** SOAP_FMAC4 soap_get_PointerTo_ns2__StartAutoPlan(struct soap*, _ns2__StartAutoPlan **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__EEventTypes_DEFINED
#define SOAP_TYPE_PointerTons10__EEventTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__EEventTypes(struct soap*, enum ns10__EEventTypes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__EEventTypes(struct soap*, const char *, int, enum ns10__EEventTypes *const*, const char *);
SOAP_FMAC3 enum ns10__EEventTypes ** SOAP_FMAC4 soap_in_PointerTons10__EEventTypes(struct soap*, const char*, enum ns10__EEventTypes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__EEventTypes(struct soap*, enum ns10__EEventTypes *const*, const char*, const char*);
SOAP_FMAC3 enum ns10__EEventTypes ** SOAP_FMAC4 soap_get_PointerTons10__EEventTypes(struct soap*, enum ns10__EEventTypes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__EEvent_DEFINED
#define SOAP_TYPE_PointerTons10__EEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__EEvent(struct soap*, ns10__EEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__EEvent(struct soap*, const char *, int, ns10__EEvent *const*, const char *);
SOAP_FMAC3 ns10__EEvent ** SOAP_FMAC4 soap_in_PointerTons10__EEvent(struct soap*, const char*, ns10__EEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__EEvent(struct soap*, ns10__EEvent *const*, const char*, const char*);
SOAP_FMAC3 ns10__EEvent ** SOAP_FMAC4 soap_get_PointerTons10__EEvent(struct soap*, ns10__EEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__EResultValueStatus_DEFINED
#define SOAP_TYPE_PointerTons10__EResultValueStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__EResultValueStatus(struct soap*, enum ns10__EResultValueStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__EResultValueStatus(struct soap*, const char *, int, enum ns10__EResultValueStatus *const*, const char *);
SOAP_FMAC3 enum ns10__EResultValueStatus ** SOAP_FMAC4 soap_in_PointerTons10__EResultValueStatus(struct soap*, const char*, enum ns10__EResultValueStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__EResultValueStatus(struct soap*, enum ns10__EResultValueStatus *const*, const char*, const char*);
SOAP_FMAC3 enum ns10__EResultValueStatus ** SOAP_FMAC4 soap_get_PointerTons10__EResultValueStatus(struct soap*, enum ns10__EResultValueStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__EResultStatus_DEFINED
#define SOAP_TYPE_PointerTons10__EResultStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__EResultStatus(struct soap*, enum ns10__EResultStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__EResultStatus(struct soap*, const char *, int, enum ns10__EResultStatus *const*, const char *);
SOAP_FMAC3 enum ns10__EResultStatus ** SOAP_FMAC4 soap_in_PointerTons10__EResultStatus(struct soap*, const char*, enum ns10__EResultStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__EResultStatus(struct soap*, enum ns10__EResultStatus *const*, const char*, const char*);
SOAP_FMAC3 enum ns10__EResultStatus ** SOAP_FMAC4 soap_get_PointerTons10__EResultStatus(struct soap*, enum ns10__EResultStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__EResult_DEFINED
#define SOAP_TYPE_PointerTons10__EResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__EResult(struct soap*, ns10__EResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__EResult(struct soap*, const char *, int, ns10__EResult *const*, const char *);
SOAP_FMAC3 ns10__EResult ** SOAP_FMAC4 soap_in_PointerTons10__EResult(struct soap*, const char*, ns10__EResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__EResult(struct soap*, ns10__EResult *const*, const char*, const char*);
SOAP_FMAC3 ns10__EResult ** SOAP_FMAC4 soap_get_PointerTons10__EResult(struct soap*, ns10__EResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__ArrayOfEResult_DEFINED
#define SOAP_TYPE_PointerTons10__ArrayOfEResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__ArrayOfEResult(struct soap*, ns10__ArrayOfEResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__ArrayOfEResult(struct soap*, const char *, int, ns10__ArrayOfEResult *const*, const char *);
SOAP_FMAC3 ns10__ArrayOfEResult ** SOAP_FMAC4 soap_in_PointerTons10__ArrayOfEResult(struct soap*, const char*, ns10__ArrayOfEResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__ArrayOfEResult(struct soap*, ns10__ArrayOfEResult *const*, const char*, const char*);
SOAP_FMAC3 ns10__ArrayOfEResult ** SOAP_FMAC4 soap_get_PointerTons10__ArrayOfEResult(struct soap*, ns10__ArrayOfEResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__AuxDeviceState_DEFINED
#define SOAP_TYPE_PointerTons7__AuxDeviceState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__AuxDeviceState(struct soap*, ns7__AuxDeviceState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__AuxDeviceState(struct soap*, const char *, int, ns7__AuxDeviceState *const*, const char *);
SOAP_FMAC3 ns7__AuxDeviceState ** SOAP_FMAC4 soap_in_PointerTons7__AuxDeviceState(struct soap*, const char*, ns7__AuxDeviceState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__AuxDeviceState(struct soap*, ns7__AuxDeviceState *const*, const char*, const char*);
SOAP_FMAC3 ns7__AuxDeviceState ** SOAP_FMAC4 soap_get_PointerTons7__AuxDeviceState(struct soap*, ns7__AuxDeviceState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__ArrayOfAuxDeviceState_DEFINED
#define SOAP_TYPE_PointerTons7__ArrayOfAuxDeviceState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__ArrayOfAuxDeviceState(struct soap*, ns7__ArrayOfAuxDeviceState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__ArrayOfAuxDeviceState(struct soap*, const char *, int, ns7__ArrayOfAuxDeviceState *const*, const char *);
SOAP_FMAC3 ns7__ArrayOfAuxDeviceState ** SOAP_FMAC4 soap_in_PointerTons7__ArrayOfAuxDeviceState(struct soap*, const char*, ns7__ArrayOfAuxDeviceState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__ArrayOfAuxDeviceState(struct soap*, ns7__ArrayOfAuxDeviceState *const*, const char*, const char*);
SOAP_FMAC3 ns7__ArrayOfAuxDeviceState ** SOAP_FMAC4 soap_get_PointerTons7__ArrayOfAuxDeviceState(struct soap*, ns7__ArrayOfAuxDeviceState **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__AuxDevice_DEFINED
#define SOAP_TYPE_PointerTons7__AuxDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__AuxDevice(struct soap*, ns7__AuxDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__AuxDevice(struct soap*, const char *, int, ns7__AuxDevice *const*, const char *);
SOAP_FMAC3 ns7__AuxDevice ** SOAP_FMAC4 soap_in_PointerTons7__AuxDevice(struct soap*, const char*, ns7__AuxDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__AuxDevice(struct soap*, ns7__AuxDevice *const*, const char*, const char*);
SOAP_FMAC3 ns7__AuxDevice ** SOAP_FMAC4 soap_get_PointerTons7__AuxDevice(struct soap*, ns7__AuxDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__ArrayOfAuxDevice_DEFINED
#define SOAP_TYPE_PointerTons7__ArrayOfAuxDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__ArrayOfAuxDevice(struct soap*, ns7__ArrayOfAuxDevice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__ArrayOfAuxDevice(struct soap*, const char *, int, ns7__ArrayOfAuxDevice *const*, const char *);
SOAP_FMAC3 ns7__ArrayOfAuxDevice ** SOAP_FMAC4 soap_in_PointerTons7__ArrayOfAuxDevice(struct soap*, const char*, ns7__ArrayOfAuxDevice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__ArrayOfAuxDevice(struct soap*, ns7__ArrayOfAuxDevice *const*, const char*, const char*);
SOAP_FMAC3 ns7__ArrayOfAuxDevice ** SOAP_FMAC4 soap_get_PointerTons7__ArrayOfAuxDevice(struct soap*, ns7__ArrayOfAuxDevice **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfOperation_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfOperation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfOperation(struct soap*, ns4__ArrayOfOperation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfOperation(struct soap*, const char *, int, ns4__ArrayOfOperation *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfOperation ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfOperation(struct soap*, const char*, ns4__ArrayOfOperation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfOperation(struct soap*, ns4__ArrayOfOperation *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfOperation ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfOperation(struct soap*, ns4__ArrayOfOperation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfMeasuringComponent_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfMeasuringComponent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfMeasuringComponent(struct soap*, ns4__ArrayOfMeasuringComponent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfMeasuringComponent(struct soap*, const char *, int, ns4__ArrayOfMeasuringComponent *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfMeasuringComponent ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfMeasuringComponent(struct soap*, const char*, ns4__ArrayOfMeasuringComponent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfMeasuringComponent(struct soap*, ns4__ArrayOfMeasuringComponent *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfMeasuringComponent ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfMeasuringComponent(struct soap*, ns4__ArrayOfMeasuringComponent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfControlledParametr_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfControlledParametr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfControlledParametr(struct soap*, ns4__ArrayOfControlledParametr *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfControlledParametr(struct soap*, const char *, int, ns4__ArrayOfControlledParametr *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfControlledParametr ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfControlledParametr(struct soap*, const char*, ns4__ArrayOfControlledParametr **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfControlledParametr(struct soap*, ns4__ArrayOfControlledParametr *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfControlledParametr ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfControlledParametr(struct soap*, ns4__ArrayOfControlledParametr **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons8__Logger_x002eLogLevel_DEFINED
#define SOAP_TYPE_PointerTons8__Logger_x002eLogLevel_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons8__Logger_x002eLogLevel(struct soap*, enum ns8__Logger_x002eLogLevel *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons8__Logger_x002eLogLevel(struct soap*, const char *, int, enum ns8__Logger_x002eLogLevel *const*, const char *);
SOAP_FMAC3 enum ns8__Logger_x002eLogLevel ** SOAP_FMAC4 soap_in_PointerTons8__Logger_x002eLogLevel(struct soap*, const char*, enum ns8__Logger_x002eLogLevel **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons8__Logger_x002eLogLevel(struct soap*, enum ns8__Logger_x002eLogLevel *const*, const char*, const char*);
SOAP_FMAC3 enum ns8__Logger_x002eLogLevel ** SOAP_FMAC4 soap_get_PointerTons8__Logger_x002eLogLevel(struct soap*, enum ns8__Logger_x002eLogLevel **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons7__AuxControllerConfiguration_DEFINED
#define SOAP_TYPE_PointerTons7__AuxControllerConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons7__AuxControllerConfiguration(struct soap*, ns7__AuxControllerConfiguration *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons7__AuxControllerConfiguration(struct soap*, const char *, int, ns7__AuxControllerConfiguration *const*, const char *);
SOAP_FMAC3 ns7__AuxControllerConfiguration ** SOAP_FMAC4 soap_in_PointerTons7__AuxControllerConfiguration(struct soap*, const char*, ns7__AuxControllerConfiguration **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons7__AuxControllerConfiguration(struct soap*, ns7__AuxControllerConfiguration *const*, const char*, const char*);
SOAP_FMAC3 ns7__AuxControllerConfiguration ** SOAP_FMAC4 soap_get_PointerTons7__AuxControllerConfiguration(struct soap*, ns7__AuxControllerConfiguration **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons6__Aux2Config_DEFINED
#define SOAP_TYPE_PointerTons6__Aux2Config_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__Aux2Config(struct soap*, ns6__Aux2Config *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__Aux2Config(struct soap*, const char *, int, ns6__Aux2Config *const*, const char *);
SOAP_FMAC3 ns6__Aux2Config ** SOAP_FMAC4 soap_in_PointerTons6__Aux2Config(struct soap*, const char*, ns6__Aux2Config **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__Aux2Config(struct soap*, ns6__Aux2Config *const*, const char*, const char*);
SOAP_FMAC3 ns6__Aux2Config ** SOAP_FMAC4 soap_get_PointerTons6__Aux2Config(struct soap*, ns6__Aux2Config **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfAutoPlanItem_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfAutoPlanItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfAutoPlanItem(struct soap*, ns4__ArrayOfAutoPlanItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfAutoPlanItem(struct soap*, const char *, int, ns4__ArrayOfAutoPlanItem *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfAutoPlanItem ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfAutoPlanItem(struct soap*, const char*, ns4__ArrayOfAutoPlanItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfAutoPlanItem(struct soap*, ns4__ArrayOfAutoPlanItem *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfAutoPlanItem ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfAutoPlanItem(struct soap*, ns4__ArrayOfAutoPlanItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__OperationStep_x002eUsingControlledParametr_DEFINED
#define SOAP_TYPE_PointerTons4__OperationStep_x002eUsingControlledParametr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, ns4__OperationStep_x002eUsingControlledParametr *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, const char *, int, ns4__OperationStep_x002eUsingControlledParametr *const*, const char *);
SOAP_FMAC3 ns4__OperationStep_x002eUsingControlledParametr ** SOAP_FMAC4 soap_in_PointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, const char*, ns4__OperationStep_x002eUsingControlledParametr **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, ns4__OperationStep_x002eUsingControlledParametr *const*, const char*, const char*);
SOAP_FMAC3 ns4__OperationStep_x002eUsingControlledParametr ** SOAP_FMAC4 soap_get_PointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, ns4__OperationStep_x002eUsingControlledParametr **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToLONG64_DEFINED
#define SOAP_TYPE_PointerToLONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons9__ChromatographMode_DEFINED
#define SOAP_TYPE_PointerTons9__ChromatographMode_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons9__ChromatographMode(struct soap*, enum ns9__ChromatographMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons9__ChromatographMode(struct soap*, const char *, int, enum ns9__ChromatographMode *const*, const char *);
SOAP_FMAC3 enum ns9__ChromatographMode ** SOAP_FMAC4 soap_in_PointerTons9__ChromatographMode(struct soap*, const char*, enum ns9__ChromatographMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons9__ChromatographMode(struct soap*, enum ns9__ChromatographMode *const*, const char*, const char*);
SOAP_FMAC3 enum ns9__ChromatographMode ** SOAP_FMAC4 soap_get_PointerTons9__ChromatographMode(struct soap*, enum ns9__ChromatographMode **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, const char *, int, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfOperationStep_x002eUsingControlledParametr ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, const char*, ns4__ArrayOfOperationStep_x002eUsingControlledParametr **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, ns4__ArrayOfOperationStep_x002eUsingControlledParametr *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfOperationStep_x002eUsingControlledParametr ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfOperationStep_x002eUsingControlledParametr(struct soap*, ns4__ArrayOfOperationStep_x002eUsingControlledParametr **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__OperationStep_DEFINED
#define SOAP_TYPE_PointerTons4__OperationStep_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__OperationStep(struct soap*, ns4__OperationStep *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__OperationStep(struct soap*, const char *, int, ns4__OperationStep *const*, const char *);
SOAP_FMAC3 ns4__OperationStep ** SOAP_FMAC4 soap_in_PointerTons4__OperationStep(struct soap*, const char*, ns4__OperationStep **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__OperationStep(struct soap*, ns4__OperationStep *const*, const char*, const char*);
SOAP_FMAC3 ns4__OperationStep ** SOAP_FMAC4 soap_get_PointerTons4__OperationStep(struct soap*, ns4__OperationStep **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__OperationTypes_DEFINED
#define SOAP_TYPE_PointerTons4__OperationTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__OperationTypes(struct soap*, enum ns4__OperationTypes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__OperationTypes(struct soap*, const char *, int, enum ns4__OperationTypes *const*, const char *);
SOAP_FMAC3 enum ns4__OperationTypes ** SOAP_FMAC4 soap_in_PointerTons4__OperationTypes(struct soap*, const char*, enum ns4__OperationTypes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__OperationTypes(struct soap*, enum ns4__OperationTypes *const*, const char*, const char*);
SOAP_FMAC3 enum ns4__OperationTypes ** SOAP_FMAC4 soap_get_PointerTons4__OperationTypes(struct soap*, enum ns4__OperationTypes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfOperationStep_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfOperationStep_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfOperationStep(struct soap*, ns4__ArrayOfOperationStep *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfOperationStep(struct soap*, const char *, int, ns4__ArrayOfOperationStep *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfOperationStep ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfOperationStep(struct soap*, const char*, ns4__ArrayOfOperationStep **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfOperationStep(struct soap*, ns4__ArrayOfOperationStep *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfOperationStep ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfOperationStep(struct soap*, ns4__ArrayOfOperationStep **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Operation_DEFINED
#define SOAP_TYPE_PointerTons4__Operation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Operation(struct soap*, ns4__Operation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Operation(struct soap*, const char *, int, ns4__Operation *const*, const char *);
SOAP_FMAC3 ns4__Operation ** SOAP_FMAC4 soap_in_PointerTons4__Operation(struct soap*, const char*, ns4__Operation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Operation(struct soap*, ns4__Operation *const*, const char*, const char*);
SOAP_FMAC3 ns4__Operation ** SOAP_FMAC4 soap_get_PointerTons4__Operation(struct soap*, ns4__Operation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__decimal_DEFINED
#define SOAP_TYPE_PointerToxsd__decimal_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__decimal(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__decimal(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__decimal(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__decimal(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__decimal(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__MeasuringComponent_DEFINED
#define SOAP_TYPE_PointerTons4__MeasuringComponent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__MeasuringComponent(struct soap*, ns4__MeasuringComponent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__MeasuringComponent(struct soap*, const char *, int, ns4__MeasuringComponent *const*, const char *);
SOAP_FMAC3 ns4__MeasuringComponent ** SOAP_FMAC4 soap_in_PointerTons4__MeasuringComponent(struct soap*, const char*, ns4__MeasuringComponent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__MeasuringComponent(struct soap*, ns4__MeasuringComponent *const*, const char*, const char*);
SOAP_FMAC3 ns4__MeasuringComponent ** SOAP_FMAC4 soap_get_PointerTons4__MeasuringComponent(struct soap*, ns4__MeasuringComponent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__unsignedByte_DEFINED
#define SOAP_TYPE_PointerToxsd__unsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__unsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__unsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerToxsd__unsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__unsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerToxsd__unsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ControlledParametr_x002eControlActionType_DEFINED
#define SOAP_TYPE_PointerTons4__ControlledParametr_x002eControlActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ControlledParametr_x002eControlActionType(struct soap*, enum ns4__ControlledParametr_x002eControlActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ControlledParametr_x002eControlActionType(struct soap*, const char *, int, enum ns4__ControlledParametr_x002eControlActionType *const*, const char *);
SOAP_FMAC3 enum ns4__ControlledParametr_x002eControlActionType ** SOAP_FMAC4 soap_in_PointerTons4__ControlledParametr_x002eControlActionType(struct soap*, const char*, enum ns4__ControlledParametr_x002eControlActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ControlledParametr_x002eControlActionType(struct soap*, enum ns4__ControlledParametr_x002eControlActionType *const*, const char*, const char*);
SOAP_FMAC3 enum ns4__ControlledParametr_x002eControlActionType ** SOAP_FMAC4 soap_get_PointerTons4__ControlledParametr_x002eControlActionType(struct soap*, enum ns4__ControlledParametr_x002eControlActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ControlledParametr_DEFINED
#define SOAP_TYPE_PointerTons4__ControlledParametr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ControlledParametr(struct soap*, ns4__ControlledParametr *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ControlledParametr(struct soap*, const char *, int, ns4__ControlledParametr *const*, const char *);
SOAP_FMAC3 ns4__ControlledParametr ** SOAP_FMAC4 soap_in_PointerTons4__ControlledParametr(struct soap*, const char*, ns4__ControlledParametr **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ControlledParametr(struct soap*, ns4__ControlledParametr *const*, const char*, const char*);
SOAP_FMAC3 ns4__ControlledParametr ** SOAP_FMAC4 soap_get_PointerTons4__ControlledParametr(struct soap*, ns4__ControlledParametr **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Periodicity_x002eTime_DEFINED
#define SOAP_TYPE_PointerTons4__Periodicity_x002eTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Periodicity_x002eTime(struct soap*, ns4__Periodicity_x002eTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Periodicity_x002eTime(struct soap*, const char *, int, ns4__Periodicity_x002eTime *const*, const char *);
SOAP_FMAC3 ns4__Periodicity_x002eTime ** SOAP_FMAC4 soap_in_PointerTons4__Periodicity_x002eTime(struct soap*, const char*, ns4__Periodicity_x002eTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Periodicity_x002eTime(struct soap*, ns4__Periodicity_x002eTime *const*, const char*, const char*);
SOAP_FMAC3 ns4__Periodicity_x002eTime ** SOAP_FMAC4 soap_get_PointerTons4__Periodicity_x002eTime(struct soap*, ns4__Periodicity_x002eTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__ArrayOfPeriodicity_x002eTime_DEFINED
#define SOAP_TYPE_PointerTons4__ArrayOfPeriodicity_x002eTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfPeriodicity_x002eTime(struct soap*, ns4__ArrayOfPeriodicity_x002eTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfPeriodicity_x002eTime(struct soap*, const char *, int, ns4__ArrayOfPeriodicity_x002eTime *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfPeriodicity_x002eTime ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfPeriodicity_x002eTime(struct soap*, const char*, ns4__ArrayOfPeriodicity_x002eTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfPeriodicity_x002eTime(struct soap*, ns4__ArrayOfPeriodicity_x002eTime *const*, const char*, const char*);
SOAP_FMAC3 ns4__ArrayOfPeriodicity_x002eTime ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfPeriodicity_x002eTime(struct soap*, ns4__ArrayOfPeriodicity_x002eTime **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToarr__ArrayOfboolean_DEFINED
#define SOAP_TYPE_PointerToarr__ArrayOfboolean_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfboolean(struct soap*, arr__ArrayOfboolean *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfboolean(struct soap*, const char *, int, arr__ArrayOfboolean *const*, const char *);
SOAP_FMAC3 arr__ArrayOfboolean ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfboolean(struct soap*, const char*, arr__ArrayOfboolean **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfboolean(struct soap*, arr__ArrayOfboolean *const*, const char*, const char*);
SOAP_FMAC3 arr__ArrayOfboolean ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfboolean(struct soap*, arr__ArrayOfboolean **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__Periodicity_DEFINED
#define SOAP_TYPE_PointerTons4__Periodicity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Periodicity(struct soap*, ns4__Periodicity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Periodicity(struct soap*, const char *, int, ns4__Periodicity *const*, const char *);
SOAP_FMAC3 ns4__Periodicity ** SOAP_FMAC4 soap_in_PointerTons4__Periodicity(struct soap*, const char*, ns4__Periodicity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Periodicity(struct soap*, ns4__Periodicity *const*, const char*, const char*);
SOAP_FMAC3 ns4__Periodicity ** SOAP_FMAC4 soap_get_PointerTons4__Periodicity(struct soap*, ns4__Periodicity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__AutoPlanItem_DEFINED
#define SOAP_TYPE_PointerTons4__AutoPlanItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__AutoPlanItem(struct soap*, ns4__AutoPlanItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__AutoPlanItem(struct soap*, const char *, int, ns4__AutoPlanItem *const*, const char *);
SOAP_FMAC3 ns4__AutoPlanItem ** SOAP_FMAC4 soap_in_PointerTons4__AutoPlanItem(struct soap*, const char*, ns4__AutoPlanItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__AutoPlanItem(struct soap*, ns4__AutoPlanItem *const*, const char*, const char*);
SOAP_FMAC3 ns4__AutoPlanItem ** SOAP_FMAC4 soap_get_PointerTons4__AutoPlanItem(struct soap*, ns4__AutoPlanItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons4__OperationStepTypes_DEFINED
#define SOAP_TYPE_PointerTons4__OperationStepTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__OperationStepTypes(struct soap*, enum ns4__OperationStepTypes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__OperationStepTypes(struct soap*, const char *, int, enum ns4__OperationStepTypes *const*, const char *);
SOAP_FMAC3 enum ns4__OperationStepTypes ** SOAP_FMAC4 soap_in_PointerTons4__OperationStepTypes(struct soap*, const char*, enum ns4__OperationStepTypes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__OperationStepTypes(struct soap*, enum ns4__OperationStepTypes *const*, const char*, const char*);
SOAP_FMAC3 enum ns4__OperationStepTypes ** SOAP_FMAC4 soap_get_PointerTons4__OperationStepTypes(struct soap*, enum ns4__OperationStepTypes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates_DEFINED
#define SOAP_TYPE_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, const char *, int, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *const*, const char *);
SOAP_FMAC3 enum ns3__OperationProcInfo_x002eOperationStepInfoStates ** SOAP_FMAC4 soap_in_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, const char*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__OperationProcInfo_x002eOperationStepInfoStates ** SOAP_FMAC4 soap_get_PointerTons3__OperationProcInfo_x002eOperationStepInfoStates(struct soap*, enum ns3__OperationProcInfo_x002eOperationStepInfoStates **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OperationProcInfo_x002eOperationStepInfo_DEFINED
#define SOAP_TYPE_PointerTons3__OperationProcInfo_x002eOperationStepInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__OperationProcInfo_x002eOperationStepInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const char *, int, ns3__OperationProcInfo_x002eOperationStepInfo *const*, const char *);
SOAP_FMAC3 ns3__OperationProcInfo_x002eOperationStepInfo ** SOAP_FMAC4 soap_in_PointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, ns3__OperationProcInfo_x002eOperationStepInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__OperationProcInfo_x002eOperationStepInfo *const*, const char*, const char*);
SOAP_FMAC3 ns3__OperationProcInfo_x002eOperationStepInfo ** SOAP_FMAC4 soap_get_PointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__OperationProcInfo_x002eOperationStepInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OperationProcInfo_x002eControlParamInfo_DEFINED
#define SOAP_TYPE_PointerTons3__OperationProcInfo_x002eControlParamInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, ns3__OperationProcInfo_x002eControlParamInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, const char *, int, ns3__OperationProcInfo_x002eControlParamInfo *const*, const char *);
SOAP_FMAC3 ns3__OperationProcInfo_x002eControlParamInfo ** SOAP_FMAC4 soap_in_PointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, const char*, ns3__OperationProcInfo_x002eControlParamInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, ns3__OperationProcInfo_x002eControlParamInfo *const*, const char*, const char*);
SOAP_FMAC3 ns3__OperationProcInfo_x002eControlParamInfo ** SOAP_FMAC4 soap_get_PointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, ns3__OperationProcInfo_x002eControlParamInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToarr__ArrayOfstring_DEFINED
#define SOAP_TYPE_PointerToarr__ArrayOfstring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToarr__ArrayOfstring(struct soap*, const char *, int, arr__ArrayOfstring *const*, const char *);
SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerToarr__ArrayOfstring(struct soap*, const char*, arr__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring *const*, const char*, const char*);
SOAP_FMAC3 arr__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerToarr__ArrayOfstring(struct soap*, arr__ArrayOfstring **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo_DEFINED
#define SOAP_TYPE_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, const char *, int, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfOperationProcInfo_x002eOperationStepInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eOperationStepInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo_DEFINED
#define SOAP_TYPE_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, const char *, int, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eControlParamInfo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, const char*, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfOperationProcInfo_x002eControlParamInfo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfOperationProcInfo_x002eControlParamInfo(struct soap*, ns3__ArrayOfOperationProcInfo_x002eControlParamInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ProcessingModes_DEFINED
#define SOAP_TYPE_PointerTons3__ProcessingModes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ProcessingModes(struct soap*, enum ns3__ProcessingModes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ProcessingModes(struct soap*, const char *, int, enum ns3__ProcessingModes *const*, const char *);
SOAP_FMAC3 enum ns3__ProcessingModes ** SOAP_FMAC4 soap_in_PointerTons3__ProcessingModes(struct soap*, const char*, enum ns3__ProcessingModes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ProcessingModes(struct soap*, enum ns3__ProcessingModes *const*, const char*, const char*);
SOAP_FMAC3 enum ns3__ProcessingModes ** SOAP_FMAC4 soap_get_PointerTons3__ProcessingModes(struct soap*, enum ns3__ProcessingModes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__OperationProcInfo_DEFINED
#define SOAP_TYPE_PointerTons3__OperationProcInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OperationProcInfo(struct soap*, ns3__OperationProcInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OperationProcInfo(struct soap*, const char *, int, ns3__OperationProcInfo *const*, const char *);
SOAP_FMAC3 ns3__OperationProcInfo ** SOAP_FMAC4 soap_in_PointerTons3__OperationProcInfo(struct soap*, const char*, ns3__OperationProcInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OperationProcInfo(struct soap*, ns3__OperationProcInfo *const*, const char*, const char*);
SOAP_FMAC3 ns3__OperationProcInfo ** SOAP_FMAC4 soap_get_PointerTons3__OperationProcInfo(struct soap*, ns3__OperationProcInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__ArrayOfEEvent_DEFINED
#define SOAP_TYPE_PointerTons10__ArrayOfEEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__ArrayOfEEvent(struct soap*, ns10__ArrayOfEEvent *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__ArrayOfEEvent(struct soap*, const char *, int, ns10__ArrayOfEEvent *const*, const char *);
SOAP_FMAC3 ns10__ArrayOfEEvent ** SOAP_FMAC4 soap_in_PointerTons10__ArrayOfEEvent(struct soap*, const char*, ns10__ArrayOfEEvent **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__ArrayOfEEvent(struct soap*, ns10__ArrayOfEEvent *const*, const char*, const char*);
SOAP_FMAC3 ns10__ArrayOfEEvent ** SOAP_FMAC4 soap_get_PointerTons10__ArrayOfEEvent(struct soap*, ns10__ArrayOfEEvent **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__ESample_DEFINED
#define SOAP_TYPE_PointerTons10__ESample_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__ESample(struct soap*, ns10__ESample *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__ESample(struct soap*, const char *, int, ns10__ESample *const*, const char *);
SOAP_FMAC3 ns10__ESample ** SOAP_FMAC4 soap_in_PointerTons10__ESample(struct soap*, const char*, ns10__ESample **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__ESample(struct soap*, ns10__ESample *const*, const char*, const char*);
SOAP_FMAC3 ns10__ESample ** SOAP_FMAC4 soap_get_PointerTons10__ESample(struct soap*, ns10__ESample **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__ArrayOfESample_DEFINED
#define SOAP_TYPE_PointerTons10__ArrayOfESample_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__ArrayOfESample(struct soap*, ns10__ArrayOfESample *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__ArrayOfESample(struct soap*, const char *, int, ns10__ArrayOfESample *const*, const char *);
SOAP_FMAC3 ns10__ArrayOfESample ** SOAP_FMAC4 soap_in_PointerTons10__ArrayOfESample(struct soap*, const char*, ns10__ArrayOfESample **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__ArrayOfESample(struct soap*, ns10__ArrayOfESample *const*, const char*, const char*);
SOAP_FMAC3 ns10__ArrayOfESample ** SOAP_FMAC4 soap_get_PointerTons10__ArrayOfESample(struct soap*, ns10__ArrayOfESample **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons10__ESampleTypes_DEFINED
#define SOAP_TYPE_PointerTons10__ESampleTypes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons10__ESampleTypes(struct soap*, enum ns10__ESampleTypes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons10__ESampleTypes(struct soap*, const char *, int, enum ns10__ESampleTypes *const*, const char *);
SOAP_FMAC3 enum ns10__ESampleTypes ** SOAP_FMAC4 soap_in_PointerTons10__ESampleTypes(struct soap*, const char*, enum ns10__ESampleTypes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons10__ESampleTypes(struct soap*, enum ns10__ESampleTypes *const*, const char*, const char*);
SOAP_FMAC3 enum ns10__ESampleTypes ** SOAP_FMAC4 soap_get_PointerTons10__ESampleTypes(struct soap*, enum ns10__ESampleTypes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons5__SystemConfigurations_DEFINED
#define SOAP_TYPE_PointerTons5__SystemConfigurations_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SystemConfigurations(struct soap*, ns5__SystemConfigurations *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SystemConfigurations(struct soap*, const char *, int, ns5__SystemConfigurations *const*, const char *);
SOAP_FMAC3 ns5__SystemConfigurations ** SOAP_FMAC4 soap_in_PointerTons5__SystemConfigurations(struct soap*, const char*, ns5__SystemConfigurations **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SystemConfigurations(struct soap*, ns5__SystemConfigurations *const*, const char*, const char*);
SOAP_FMAC3 ns5__SystemConfigurations ** SOAP_FMAC4 soap_get_PointerTons5__SystemConfigurations(struct soap*, ns5__SystemConfigurations **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__ProcessingInfo_DEFINED
#define SOAP_TYPE_PointerTons3__ProcessingInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ProcessingInfo(struct soap*, ns3__ProcessingInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ProcessingInfo(struct soap*, const char *, int, ns3__ProcessingInfo *const*, const char *);
SOAP_FMAC3 ns3__ProcessingInfo ** SOAP_FMAC4 soap_in_PointerTons3__ProcessingInfo(struct soap*, const char*, ns3__ProcessingInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ProcessingInfo(struct soap*, ns3__ProcessingInfo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ProcessingInfo ** SOAP_FMAC4 soap_get_PointerTons3__ProcessingInfo(struct soap*, ns3__ProcessingInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons10__EEvent_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons10__EEvent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons10__EEvent(struct soap*, std::vector<ns10__EEvent *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons10__EEvent(struct soap*, const std::vector<ns10__EEvent *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons10__EEvent(struct soap*, const char*, int, const std::vector<ns10__EEvent *> *, const char*);
SOAP_FMAC3 std::vector<ns10__EEvent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons10__EEvent(struct soap*, const char*, std::vector<ns10__EEvent *> *, const char*);
SOAP_FMAC1 std::vector<ns10__EEvent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons10__EEvent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns10__EEvent *>  * soap_new_std__vectorTemplateOfPointerTons10__EEvent(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons10__EEvent(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons10__EResult_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons10__EResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons10__EResult(struct soap*, std::vector<ns10__EResult *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons10__EResult(struct soap*, const std::vector<ns10__EResult *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons10__EResult(struct soap*, const char*, int, const std::vector<ns10__EResult *> *, const char*);
SOAP_FMAC3 std::vector<ns10__EResult *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons10__EResult(struct soap*, const char*, std::vector<ns10__EResult *> *, const char*);
SOAP_FMAC1 std::vector<ns10__EResult *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons10__EResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns10__EResult *>  * soap_new_std__vectorTemplateOfPointerTons10__EResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons10__EResult(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons10__ESample_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons10__ESample_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons10__ESample(struct soap*, std::vector<ns10__ESample *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons10__ESample(struct soap*, const std::vector<ns10__ESample *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons10__ESample(struct soap*, const char*, int, const std::vector<ns10__ESample *> *, const char*);
SOAP_FMAC3 std::vector<ns10__ESample *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons10__ESample(struct soap*, const char*, std::vector<ns10__ESample *> *, const char*);
SOAP_FMAC1 std::vector<ns10__ESample *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons10__ESample(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns10__ESample *>  * soap_new_std__vectorTemplateOfPointerTons10__ESample(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons10__ESample(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__AuxDeviceState_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__AuxDeviceState_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__AuxDeviceState(struct soap*, std::vector<ns7__AuxDeviceState *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__AuxDeviceState(struct soap*, const std::vector<ns7__AuxDeviceState *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__AuxDeviceState(struct soap*, const char*, int, const std::vector<ns7__AuxDeviceState *> *, const char*);
SOAP_FMAC3 std::vector<ns7__AuxDeviceState *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__AuxDeviceState(struct soap*, const char*, std::vector<ns7__AuxDeviceState *> *, const char*);
SOAP_FMAC1 std::vector<ns7__AuxDeviceState *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__AuxDeviceState(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__AuxDeviceState *>  * soap_new_std__vectorTemplateOfPointerTons7__AuxDeviceState(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__AuxDeviceState(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons7__AuxDevice_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons7__AuxDevice_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons7__AuxDevice(struct soap*, std::vector<ns7__AuxDevice *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons7__AuxDevice(struct soap*, const std::vector<ns7__AuxDevice *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons7__AuxDevice(struct soap*, const char*, int, const std::vector<ns7__AuxDevice *> *, const char*);
SOAP_FMAC3 std::vector<ns7__AuxDevice *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons7__AuxDevice(struct soap*, const char*, std::vector<ns7__AuxDevice *> *, const char*);
SOAP_FMAC1 std::vector<ns7__AuxDevice *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons7__AuxDevice(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns7__AuxDevice *>  * soap_new_std__vectorTemplateOfPointerTons7__AuxDevice(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons7__AuxDevice(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfbool_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfbool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfbool(struct soap*, std::vector<bool> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfbool(struct soap*, const std::vector<bool> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfbool(struct soap*, const char*, int, const std::vector<bool> *, const char*);
SOAP_FMAC3 std::vector<bool> * SOAP_FMAC4 soap_in_std__vectorTemplateOfbool(struct soap*, const char*, std::vector<bool> *, const char*);
SOAP_FMAC1 std::vector<bool>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfbool(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<bool>  * soap_new_std__vectorTemplateOfbool(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfbool(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfstd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string> *, const char*);
SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string> *, const char*);
SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string>  * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, std::vector<ns4__OperationStep_x002eUsingControlledParametr *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, const std::vector<ns4__OperationStep_x002eUsingControlledParametr *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, const char*, int, const std::vector<ns4__OperationStep_x002eUsingControlledParametr *> *, const char*);
SOAP_FMAC3 std::vector<ns4__OperationStep_x002eUsingControlledParametr *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, const char*, std::vector<ns4__OperationStep_x002eUsingControlledParametr *> *, const char*);
SOAP_FMAC1 std::vector<ns4__OperationStep_x002eUsingControlledParametr *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__OperationStep_x002eUsingControlledParametr *>  * soap_new_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__OperationStep_x002eUsingControlledParametr(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__OperationStep_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__OperationStep_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__OperationStep(struct soap*, std::vector<ns4__OperationStep *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__OperationStep(struct soap*, const std::vector<ns4__OperationStep *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__OperationStep(struct soap*, const char*, int, const std::vector<ns4__OperationStep *> *, const char*);
SOAP_FMAC3 std::vector<ns4__OperationStep *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__OperationStep(struct soap*, const char*, std::vector<ns4__OperationStep *> *, const char*);
SOAP_FMAC1 std::vector<ns4__OperationStep *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__OperationStep(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__OperationStep *>  * soap_new_std__vectorTemplateOfPointerTons4__OperationStep(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__OperationStep(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Operation_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Operation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Operation(struct soap*, std::vector<ns4__Operation *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Operation(struct soap*, const std::vector<ns4__Operation *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Operation(struct soap*, const char*, int, const std::vector<ns4__Operation *> *, const char*);
SOAP_FMAC3 std::vector<ns4__Operation *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Operation(struct soap*, const char*, std::vector<ns4__Operation *> *, const char*);
SOAP_FMAC1 std::vector<ns4__Operation *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Operation(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Operation *>  * soap_new_std__vectorTemplateOfPointerTons4__Operation(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__Operation(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__MeasuringComponent_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__MeasuringComponent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__MeasuringComponent(struct soap*, std::vector<ns4__MeasuringComponent *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__MeasuringComponent(struct soap*, const std::vector<ns4__MeasuringComponent *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__MeasuringComponent(struct soap*, const char*, int, const std::vector<ns4__MeasuringComponent *> *, const char*);
SOAP_FMAC3 std::vector<ns4__MeasuringComponent *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__MeasuringComponent(struct soap*, const char*, std::vector<ns4__MeasuringComponent *> *, const char*);
SOAP_FMAC1 std::vector<ns4__MeasuringComponent *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__MeasuringComponent(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__MeasuringComponent *>  * soap_new_std__vectorTemplateOfPointerTons4__MeasuringComponent(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__MeasuringComponent(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__ControlledParametr_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__ControlledParametr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__ControlledParametr(struct soap*, std::vector<ns4__ControlledParametr *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__ControlledParametr(struct soap*, const std::vector<ns4__ControlledParametr *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__ControlledParametr(struct soap*, const char*, int, const std::vector<ns4__ControlledParametr *> *, const char*);
SOAP_FMAC3 std::vector<ns4__ControlledParametr *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__ControlledParametr(struct soap*, const char*, std::vector<ns4__ControlledParametr *> *, const char*);
SOAP_FMAC1 std::vector<ns4__ControlledParametr *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__ControlledParametr(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__ControlledParametr *>  * soap_new_std__vectorTemplateOfPointerTons4__ControlledParametr(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__ControlledParametr(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(struct soap*, std::vector<ns4__Periodicity_x002eTime *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(struct soap*, const std::vector<ns4__Periodicity_x002eTime *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(struct soap*, const char*, int, const std::vector<ns4__Periodicity_x002eTime *> *, const char*);
SOAP_FMAC3 std::vector<ns4__Periodicity_x002eTime *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(struct soap*, const char*, std::vector<ns4__Periodicity_x002eTime *> *, const char*);
SOAP_FMAC1 std::vector<ns4__Periodicity_x002eTime *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Periodicity_x002eTime *>  * soap_new_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__Periodicity_x002eTime(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__AutoPlanItem_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__AutoPlanItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__AutoPlanItem(struct soap*, std::vector<ns4__AutoPlanItem *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__AutoPlanItem(struct soap*, const std::vector<ns4__AutoPlanItem *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__AutoPlanItem(struct soap*, const char*, int, const std::vector<ns4__AutoPlanItem *> *, const char*);
SOAP_FMAC3 std::vector<ns4__AutoPlanItem *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__AutoPlanItem(struct soap*, const char*, std::vector<ns4__AutoPlanItem *> *, const char*);
SOAP_FMAC1 std::vector<ns4__AutoPlanItem *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__AutoPlanItem(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__AutoPlanItem *>  * soap_new_std__vectorTemplateOfPointerTons4__AutoPlanItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons4__AutoPlanItem(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, int, const std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, const char*, std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__OperationProcInfo_x002eOperationStepInfo *>  * soap_new_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eOperationStepInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, std::vector<ns3__OperationProcInfo_x002eControlParamInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, const std::vector<ns3__OperationProcInfo_x002eControlParamInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, const char*, int, const std::vector<ns3__OperationProcInfo_x002eControlParamInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__OperationProcInfo_x002eControlParamInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, const char*, std::vector<ns3__OperationProcInfo_x002eControlParamInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__OperationProcInfo_x002eControlParamInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__OperationProcInfo_x002eControlParamInfo *>  * soap_new_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__OperationProcInfo_x002eControlParamInfo(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
